
stm32_servo_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08006634  08006634  00016634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006904  08006904  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800690c  0800690c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc2f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5c  00000000  00000000  0002dccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0002fa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c20  00000000  00000000  00030708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bfd  00000000  00000000  00031328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e609  00000000  00000000  00052f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc740  00000000  00000000  0006152e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012dc6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004570  00000000  00000000  0012dcc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800661c 	.word	0x0800661c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800661c 	.word	0x0800661c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <moveRobotArmJoint>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_UART4_Init(void);
/* USER CODE BEGIN PFP */
static void moveRobotArmJoint(uint32_t angle, CCR_Register ccr_register) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]

    uint32_t targetCCR = (uint32_t)((angle / 180.0) * 2000 + 2000);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff fbc9 	bl	8000524 <__aeabi_ui2d>
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	4b45      	ldr	r3, [pc, #276]	; (8000eac <moveRobotArmJoint+0x12c>)
 8000d98:	f7ff fd68 	bl	800086c <__aeabi_ddiv>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <moveRobotArmJoint+0x130>)
 8000daa:	f7ff fc35 	bl	8000618 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <moveRobotArmJoint+0x130>)
 8000dbc:	f7ff fa76 	bl	80002ac <__adddf3>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f7ff fe38 	bl	8000a3c <__aeabi_d2uiz>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60bb      	str	r3, [r7, #8]
    uint32_t currentCCR;

    switch (ccr_register) {
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d010      	beq.n	8000df8 <moveRobotArmJoint+0x78>
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	dc60      	bgt.n	8000e9c <moveRobotArmJoint+0x11c>
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <moveRobotArmJoint+0x64>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d005      	beq.n	8000dee <moveRobotArmJoint+0x6e>
        case ARM4:
            currentCCR = htim2.Instance->CCR3;
            break;
        default:
            // handle error case
            return;
 8000de2:	e05b      	b.n	8000e9c <moveRobotArmJoint+0x11c>
            currentCCR = htim2.Instance->CCR1;
 8000de4:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <moveRobotArmJoint+0x134>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dea:	60fb      	str	r3, [r7, #12]
            break;
 8000dec:	e009      	b.n	8000e02 <moveRobotArmJoint+0x82>
            currentCCR = htim2.Instance->CCR2;
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <moveRobotArmJoint+0x134>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df4:	60fb      	str	r3, [r7, #12]
            break;
 8000df6:	e004      	b.n	8000e02 <moveRobotArmJoint+0x82>
            currentCCR = htim2.Instance->CCR3;
 8000df8:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <moveRobotArmJoint+0x134>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfe:	60fb      	str	r3, [r7, #12]
            break;
 8000e00:	bf00      	nop
    }

    if (currentCCR < targetCCR) {
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d243      	bcs.n	8000e92 <moveRobotArmJoint+0x112>
        for (; currentCCR <= targetCCR; currentCCR++) {
 8000e0a:	e01e      	b.n	8000e4a <moveRobotArmJoint+0xca>
            switch (ccr_register) {
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d010      	beq.n	8000e34 <moveRobotArmJoint+0xb4>
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	dc44      	bgt.n	8000ea0 <moveRobotArmJoint+0x120>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <moveRobotArmJoint+0xa0>
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <moveRobotArmJoint+0xaa>
                case ARM4:
                    htim2.Instance->CCR3 = currentCCR;
                    break;
                default:
                    // handle error case
                    return;
 8000e1e:	e03f      	b.n	8000ea0 <moveRobotArmJoint+0x120>
                    htim2.Instance->CCR1 = currentCCR;
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <moveRobotArmJoint+0x134>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34
                    break;
 8000e28:	e009      	b.n	8000e3e <moveRobotArmJoint+0xbe>
                    htim2.Instance->CCR2 = currentCCR;
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <moveRobotArmJoint+0x134>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	639a      	str	r2, [r3, #56]	; 0x38
                    break;
 8000e32:	e004      	b.n	8000e3e <moveRobotArmJoint+0xbe>
                    htim2.Instance->CCR3 = currentCCR;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <moveRobotArmJoint+0x134>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
                    break;
 8000e3c:	bf00      	nop
            }
            HAL_Delay(0.3); // Adjust the delay value to control the speed
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 fd94 	bl	800196c <HAL_Delay>
        for (; currentCCR <= targetCCR; currentCCR++) {
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d9dc      	bls.n	8000e0c <moveRobotArmJoint+0x8c>
 8000e52:	e028      	b.n	8000ea6 <moveRobotArmJoint+0x126>
        }
    } else {
        for (; currentCCR >= targetCCR; currentCCR--) {
            switch (ccr_register) {
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d010      	beq.n	8000e7c <moveRobotArmJoint+0xfc>
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	dc22      	bgt.n	8000ea4 <moveRobotArmJoint+0x124>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <moveRobotArmJoint+0xe8>
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d005      	beq.n	8000e72 <moveRobotArmJoint+0xf2>
                case ARM4:
                    htim2.Instance->CCR3 = currentCCR;
                    break;
                default:
                    // handle error case
                    return;
 8000e66:	e01d      	b.n	8000ea4 <moveRobotArmJoint+0x124>
                    htim2.Instance->CCR1 = currentCCR;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <moveRobotArmJoint+0x134>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34
                    break;
 8000e70:	e009      	b.n	8000e86 <moveRobotArmJoint+0x106>
                    htim2.Instance->CCR2 = currentCCR;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <moveRobotArmJoint+0x134>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38
                    break;
 8000e7a:	e004      	b.n	8000e86 <moveRobotArmJoint+0x106>
                    htim2.Instance->CCR3 = currentCCR;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <moveRobotArmJoint+0x134>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
                    break;
 8000e84:	bf00      	nop
            }
            HAL_Delay(0.3); // Adjust the delay value to control the speed
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 fd70 	bl	800196c <HAL_Delay>
        for (; currentCCR >= targetCCR; currentCCR--) {
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d2dc      	bcs.n	8000e54 <moveRobotArmJoint+0xd4>
 8000e9a:	e004      	b.n	8000ea6 <moveRobotArmJoint+0x126>
            return;
 8000e9c:	bf00      	nop
 8000e9e:	e002      	b.n	8000ea6 <moveRobotArmJoint+0x126>
                    return;
 8000ea0:	bf00      	nop
 8000ea2:	e000      	b.n	8000ea6 <moveRobotArmJoint+0x126>
                    return;
 8000ea4:	bf00      	nop
        }
    }
}
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40668000 	.word	0x40668000
 8000eb0:	409f4000 	.word	0x409f4000
 8000eb4:	2000008c 	.word	0x2000008c

08000eb8 <send_echo>:

static void send_echo(const char* message) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff f98f 	bl	80001e4 <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <send_echo+0x28>)
 8000ed2:	f002 fc1a 	bl	800370a <HAL_UART_Transmit>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000d4 	.word	0x200000d4

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b0a4      	sub	sp, #144	; 0x90
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char rx_buffer[RX_BUFFER_SIZE];
	char tx_data[TX_BUFFER_SIZE];
	char joint_names[NUM_JOINTS][JOINT_NAME_SIZE] = {"BASE1", "ARM2", "ARM4", "CLAW7"};
 8000eea:	4b88      	ldr	r3, [pc, #544]	; (800110c <main+0x228>)
 8000eec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000ef0:	461d      	mov	r5, r3
 8000ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	6023      	str	r3, [r4, #0]
	int joint_values[NUM_JOINTS];
	uint8_t rx_data;
	int rx_index = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	bool start_detected = false;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fcbf 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f911 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 fa2f 	bl	8001370 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f12:	f000 f977 	bl	8001204 <MX_TIM2_Init>
  MX_UART4_Init();
 8000f16:	f000 fa01 	bl	800131c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
    // BASE 1 - PIN: PA15
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	487c      	ldr	r0, [pc, #496]	; (8001110 <main+0x22c>)
 8000f1e:	f001 fdc9 	bl	8002ab4 <HAL_TIM_PWM_Start>
  	// ARM 2 - PIN: PB3
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f22:	2104      	movs	r1, #4
 8000f24:	487a      	ldr	r0, [pc, #488]	; (8001110 <main+0x22c>)
 8000f26:	f001 fdc5 	bl	8002ab4 <HAL_TIM_PWM_Start>
	// ARM 4 - PIN: PB10
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	4878      	ldr	r0, [pc, #480]	; (8001110 <main+0x22c>)
 8000f2e:	f001 fdc1 	bl	8002ab4 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	 printf("Waiting for Rx data...\n");
		// waiting for a # as the start character
	start_detected = false;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	while (!start_detected)
 8000f38:	e010      	b.n	8000f5c <main+0x78>
	{
		HAL_UART_Receive(&huart4, &rx_data, 1, HAL_MAX_DELAY);
 8000f3a:	f107 0117 	add.w	r1, r7, #23
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f42:	2201      	movs	r2, #1
 8000f44:	4873      	ldr	r0, [pc, #460]	; (8001114 <main+0x230>)
 8000f46:	f002 fc72 	bl	800382e <HAL_UART_Receive>
		if (rx_data == '#')
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	2b23      	cmp	r3, #35	; 0x23
 8000f4e:	d105      	bne.n	8000f5c <main+0x78>
		{
			start_detected = true;
 8000f50:	2301      	movs	r3, #1
 8000f52:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			rx_index = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while (!start_detected)
 8000f5c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000f60:	f083 0301 	eor.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1e7      	bne.n	8000f3a <main+0x56>
		}
	}

	while(rx_data != '\n' && rx_index < RX_BUFFER_SIZE - 1 && start_detected == true) {
 8000f6a:	e014      	b.n	8000f96 <main+0xb2>
		// Receive next byte
		HAL_UART_Receive(&huart4, &rx_data, 1, HAL_MAX_DELAY);
 8000f6c:	f107 0117 	add.w	r1, r7, #23
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f74:	2201      	movs	r2, #1
 8000f76:	4867      	ldr	r0, [pc, #412]	; (8001114 <main+0x230>)
 8000f78:	f002 fc59 	bl	800382e <HAL_UART_Receive>
		// Add byte to the buffer
		rx_buffer[rx_index] = rx_data;
 8000f7c:	7df9      	ldrb	r1, [r7, #23]
 8000f7e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f86:	4413      	add	r3, r2
 8000f88:	460a      	mov	r2, r1
 8000f8a:	701a      	strb	r2, [r3, #0]
		rx_index++;
 8000f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f90:	3301      	adds	r3, #1
 8000f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while(rx_data != '\n' && rx_index < RX_BUFFER_SIZE - 1 && start_detected == true) {
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	2b0a      	cmp	r3, #10
 8000f9a:	d007      	beq.n	8000fac <main+0xc8>
 8000f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fa0:	2b1e      	cmp	r3, #30
 8000fa2:	dc03      	bgt.n	8000fac <main+0xc8>
 8000fa4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1df      	bne.n	8000f6c <main+0x88>
	}

		char *joint_split_str = strtok(rx_buffer, ",");
 8000fac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fb0:	4959      	ldr	r1, [pc, #356]	; (8001118 <main+0x234>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f003 fcd6 	bl	8004964 <strtok>
 8000fb8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		char my_string[5];
		char JOINT[5];
		int movement_angle_int;

		while (joint_split_str != NULL) {
 8000fbc:	e08c      	b.n	80010d8 <main+0x1f4>

		    sscanf(joint_split_str, "%[^-]-%d", my_string, &movement_angle_int);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	f107 0210 	add.w	r2, r7, #16
 8000fc4:	4955      	ldr	r1, [pc, #340]	; (800111c <main+0x238>)
 8000fc6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000fca:	f003 fc59 	bl	8004880 <siscanf>

		    for(int i=0; i<sizeof(my_string);i++){
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000fd4:	e011      	b.n	8000ffa <main+0x116>
		        JOINT[i] = my_string[i];
 8000fd6:	f107 0210 	add.w	r2, r7, #16
 8000fda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fde:	4413      	add	r3, r2
 8000fe0:	7819      	ldrb	r1, [r3, #0]
 8000fe2:	f107 0208 	add.w	r2, r7, #8
 8000fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fea:	4413      	add	r3, r2
 8000fec:	460a      	mov	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
		    for(int i=0; i<sizeof(my_string);i++){
 8000ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d9e9      	bls.n	8000fd6 <main+0xf2>
		    }
		    JOINT[sizeof(my_string)] = '\0';
 8001002:	2300      	movs	r3, #0
 8001004:	737b      	strb	r3, [r7, #13]

		    // Determine the CCR register based on joint name
		    CCR_Register ccr_register;
		    if (strcmp(JOINT, "BASE1") == 0) {
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4945      	ldr	r1, [pc, #276]	; (8001120 <main+0x23c>)
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f8df 	bl	80001d0 <strcmp>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d103      	bne.n	8001020 <main+0x13c>
		        ccr_register = BASE1;
 8001018:	2300      	movs	r3, #0
 800101a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800101e:	e018      	b.n	8001052 <main+0x16e>
		    } else if (strcmp(JOINT, "ARM2") == 0) {
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	493f      	ldr	r1, [pc, #252]	; (8001124 <main+0x240>)
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f8d2 	bl	80001d0 <strcmp>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d103      	bne.n	800103a <main+0x156>
		        ccr_register = ARM2;
 8001032:	2301      	movs	r3, #1
 8001034:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001038:	e00b      	b.n	8001052 <main+0x16e>
		    } else if (strcmp(JOINT, "ARM4") == 0) {
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	493a      	ldr	r1, [pc, #232]	; (8001128 <main+0x244>)
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f8c5 	bl	80001d0 <strcmp>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d145      	bne.n	80010d8 <main+0x1f4>
		        ccr_register = ARM4;
 800104c:	2302      	movs	r3, #2
 800104e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		    } else {
		        // Handle error case
		        continue; // Set to a default value
		    }

		    sprintf(tx_data, "Value: %d\n", movement_angle_int);
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001058:	4934      	ldr	r1, [pc, #208]	; (800112c <main+0x248>)
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fbf0 	bl	8004840 <siprintf>
		    tx_data[strlen(tx_data)] = '\0';
 8001060:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f8bd 	bl	80001e4 <strlen>
 800106a:	4603      	mov	r3, r0
 800106c:	3390      	adds	r3, #144	; 0x90
 800106e:	443b      	add	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	f803 2c54 	strb.w	r2, [r3, #-84]
		    send_echo(tx_data);
 8001076:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff1c 	bl	8000eb8 <send_echo>
		    memset(tx_data, 0, sizeof(tx_data));
 8001080:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fbd1 	bl	8004830 <memset>
		    memset(JOINT, 0, sizeof(JOINT));
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2205      	movs	r2, #5
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fbca 	bl	8004830 <memset>
		    memset(my_string, 0, sizeof(my_string));
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	2205      	movs	r2, #5
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 fbc3 	bl	8004830 <memset>
		    if (movement_angle_int >= 0 && movement_angle_int <= 180) { // Check if the value is within valid range
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <main+0x1e2>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2bb4      	cmp	r3, #180	; 0xb4
 80010b4:	dc07      	bgt.n	80010c6 <main+0x1e2>
		        moveRobotArmJoint(movement_angle_int, ccr_register); // Call the moveRobotArmJoint() function with the received value
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	461a      	mov	r2, r3
 80010ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80010be:	4619      	mov	r1, r3
 80010c0:	4610      	mov	r0, r2
 80010c2:	f7ff fe5d 	bl	8000d80 <moveRobotArmJoint>
		    }
		    ccr_register = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		    joint_split_str = strtok(NULL, ",");
 80010cc:	4912      	ldr	r1, [pc, #72]	; (8001118 <main+0x234>)
 80010ce:	2000      	movs	r0, #0
 80010d0:	f003 fc48 	bl	8004964 <strtok>
 80010d4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		while (joint_split_str != NULL) {
 80010d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f47f af6e 	bne.w	8000fbe <main+0xda>
		}

	rx_index = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	rx_buffer[rx_index] = '\0';
 80010e8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80010ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010f0:	4413      	add	r3, r2
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, sizeof(rx_buffer));
 80010f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010fa:	2220      	movs	r2, #32
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fb96 	bl	8004830 <memset>
	start_detected = false;
 8001104:	2300      	movs	r3, #0
 8001106:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  {
 800110a:	e712      	b.n	8000f32 <main+0x4e>
 800110c:	08006668 	.word	0x08006668
 8001110:	2000008c 	.word	0x2000008c
 8001114:	200000d4 	.word	0x200000d4
 8001118:	08006634 	.word	0x08006634
 800111c:	08006638 	.word	0x08006638
 8001120:	08006644 	.word	0x08006644
 8001124:	0800664c 	.word	0x0800664c
 8001128:	08006654 	.word	0x08006654
 800112c:	0800665c 	.word	0x0800665c

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fb76 	bl	8004830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <SystemClock_Config+0xcc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a27      	ldr	r2, [pc, #156]	; (80011fc <SystemClock_Config+0xcc>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <SystemClock_Config+0xcc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <SystemClock_Config+0xd0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <SystemClock_Config+0xd0>)
 800117a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <SystemClock_Config+0xd0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011a0:	2308      	movs	r3, #8
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80011a4:	2354      	movs	r3, #84	; 0x54
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ac:	2307      	movs	r3, #7
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 ff3d 	bl	8002034 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c0:	f000 f90c 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 f99e 	bl	8002524 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ee:	f000 f8f5 	bl	80013dc <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <MX_TIM2_Init+0x114>)
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <MX_TIM2_Init+0x114>)
 800123e:	2229      	movs	r2, #41	; 0x29
 8001240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <MX_TIM2_Init+0x114>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001248:	4b33      	ldr	r3, [pc, #204]	; (8001318 <MX_TIM2_Init+0x114>)
 800124a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800124e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b31      	ldr	r3, [pc, #196]	; (8001318 <MX_TIM2_Init+0x114>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <MX_TIM2_Init+0x114>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125c:	482e      	ldr	r0, [pc, #184]	; (8001318 <MX_TIM2_Init+0x114>)
 800125e:	f001 fb81 	bl	8002964 <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001268:	f000 f8b8 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	4619      	mov	r1, r3
 8001278:	4827      	ldr	r0, [pc, #156]	; (8001318 <MX_TIM2_Init+0x114>)
 800127a:	f001 fda5 	bl	8002dc8 <HAL_TIM_ConfigClockSource>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001284:	f000 f8aa 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001288:	4823      	ldr	r0, [pc, #140]	; (8001318 <MX_TIM2_Init+0x114>)
 800128a:	f001 fbba 	bl	8002a02 <HAL_TIM_PWM_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001294:	f000 f8a2 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4619      	mov	r1, r3
 80012a6:	481c      	ldr	r0, [pc, #112]	; (8001318 <MX_TIM2_Init+0x114>)
 80012a8:	f002 f966 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80012b2:	f000 f893 	bl	80013dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b6:	2360      	movs	r3, #96	; 0x60
 80012b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4812      	ldr	r0, [pc, #72]	; (8001318 <MX_TIM2_Init+0x114>)
 80012ce:	f001 fcb9 	bl	8002c44 <HAL_TIM_PWM_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012d8:	f000 f880 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2204      	movs	r2, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_TIM2_Init+0x114>)
 80012e4:	f001 fcae 	bl	8002c44 <HAL_TIM_PWM_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80012ee:	f000 f875 	bl	80013dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2208      	movs	r2, #8
 80012f6:	4619      	mov	r1, r3
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <MX_TIM2_Init+0x114>)
 80012fa:	f001 fca3 	bl	8002c44 <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001304:	f000 f86a 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <MX_TIM2_Init+0x114>)
 800130a:	f000 f8b5 	bl	8001478 <HAL_TIM_MspPostInit>

}
 800130e:	bf00      	nop
 8001310:	3738      	adds	r7, #56	; 0x38
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000008c 	.word	0x2000008c

0800131c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_UART4_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_UART4_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_UART4_Init+0x4c>)
 8001328:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800132c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_UART4_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_UART4_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_UART4_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_UART4_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_UART4_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_UART4_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_UART4_Init+0x4c>)
 8001354:	f002 f98c 	bl	8003670 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800135e:	f000 f83d 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000d4 	.word	0x200000d4
 800136c:	40004c00 	.word	0x40004c00

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_GPIO_Init+0x68>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <MX_GPIO_Init+0x68>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_GPIO_Init+0x68>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_GPIO_Init+0x68>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <MX_GPIO_Init+0x68>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <MX_GPIO_Init+0x68>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_GPIO_Init+0x68>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <MX_GPIO_Init+0x68>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_GPIO_Init+0x68>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001448:	d10d      	bne.n	8001466 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d13d      	bne.n	8001516 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_TIM_MspPostInit+0xa8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <HAL_TIM_MspPostInit+0xa8>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_TIM_MspPostInit+0xa8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_TIM_MspPostInit+0xa8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <HAL_TIM_MspPostInit+0xa8>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_TIM_MspPostInit+0xa8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ARM4_TIM2_CH3_Pin|ARM_3_TIM2_CH2_Pin;
 80014d2:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014e4:	2301      	movs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <HAL_TIM_MspPostInit+0xac>)
 80014f0:	f000 fc04 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BASE_1_TIM2_CH1_Pin;
 80014f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001506:	2301      	movs	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BASE_1_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_TIM_MspPostInit+0xb0>)
 8001512:	f000 fbf3 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	40020400 	.word	0x40020400
 8001528:	40020000 	.word	0x40020000

0800152c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_UART_MspInit+0x94>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d133      	bne.n	80015b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_UART_MspInit+0x98>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_UART_MspInit+0x98>)
 8001558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_UART_MspInit+0x98>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_UART_MspInit+0x98>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <HAL_UART_MspInit+0x98>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_UART_MspInit+0x98>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001586:	2303      	movs	r3, #3
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001596:	2308      	movs	r3, #8
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_UART_MspInit+0x9c>)
 80015a2:	f000 fbab 	bl	8001cfc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2034      	movs	r0, #52	; 0x34
 80015ac:	f000 fadd 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015b0:	2034      	movs	r0, #52	; 0x34
 80015b2:	f000 faf6 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004c00 	.word	0x40004c00
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler+0x4>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001618:	f000 f988 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <UART4_IRQHandler+0x10>)
 8001626:	f002 f9a5 	bl	8003974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000d4 	.word	0x200000d4

08001634 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <ITM_SendChar+0x48>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <ITM_SendChar+0x48>)
 8001644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001648:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <ITM_SendChar+0x4c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <ITM_SendChar+0x4c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001656:	bf00      	nop
 8001658:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f8      	beq.n	8001658 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001666:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	6013      	str	r3, [r2, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000edfc 	.word	0xe000edfc
 8001680:	e0000e00 	.word	0xe0000e00

08001684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_kill>:

int _kill(int pid, int sig)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169e:	f003 f89d 	bl	80047dc <__errno>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2216      	movs	r2, #22
 80016a6:	601a      	str	r2, [r3, #0]
  return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_exit>:

void _exit (int status)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffe7 	bl	8001694 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c6:	e7fe      	b.n	80016c6 <_exit+0x12>

080016c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016da:	f3af 8000 	nop.w
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
  }

  return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e009      	b.n	8001728 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff89 	bl	8001634 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf1      	blt.n	8001714 <_write+0x12>
  }
  return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_close>:

int _close(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001762:	605a      	str	r2, [r3, #4]
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_isatty>:

int _isatty(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f003 f802 	bl	80047dc <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20020000 	.word	0x20020000
 8001804:	00000400 	.word	0x00000400
 8001808:	20000118 	.word	0x20000118
 800180c:	20000130 	.word	0x20000130

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800186c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800183a:	490e      	ldr	r1, [pc, #56]	; (8001874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001850:	4c0b      	ldr	r4, [pc, #44]	; (8001880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800185e:	f7ff ffd7 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001862:	f002 ffc1 	bl	80047e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff fb3d 	bl	8000ee4 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800186c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001878:	08006914 	.word	0x08006914
  ldr r2, =_sbss
 800187c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001880:	20000130 	.word	0x20000130

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f94f 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fd94 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f967 	bl	8001bbe <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001908:	f000 f92f 	bl	8001b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000000 	.word	0x20000000
 8001924:	20000008 	.word	0x20000008
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008
 8001950:	2000011c 	.word	0x2000011c

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000011c 	.word	0x2000011c

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff29 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff3e 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff31 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa2 	bl	8001b10 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff feb6 	bl	8001954 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d008      	beq.n	8001c08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e052      	b.n	8001cae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0216 	bic.w	r2, r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d103      	bne.n	8001c38 <HAL_DMA_Abort+0x62>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0208 	bic.w	r2, r2, #8
 8001c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c58:	e013      	b.n	8001c82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5a:	f7ff fe7b 	bl	8001954 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d90c      	bls.n	8001c82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e015      	b.n	8001cae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e4      	bne.n	8001c5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	223f      	movs	r2, #63	; 0x3f
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e00c      	b.n	8001cee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e16b      	b.n	8001ff0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 815a 	bne.w	8001fea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d130      	bne.n	8001db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0201 	and.w	r2, r3, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d017      	beq.n	8001dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d123      	bne.n	8001e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80b4 	beq.w	8001fea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b60      	ldr	r3, [pc, #384]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a5f      	ldr	r2, [pc, #380]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9e:	4a5b      	ldr	r2, [pc, #364]	; (800200c <HAL_GPIO_Init+0x310>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_GPIO_Init+0x314>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a51      	ldr	r2, [pc, #324]	; (8002014 <HAL_GPIO_Init+0x318>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x222>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a50      	ldr	r2, [pc, #320]	; (8002018 <HAL_GPIO_Init+0x31c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x21e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4f      	ldr	r2, [pc, #316]	; (800201c <HAL_GPIO_Init+0x320>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x21a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4e      	ldr	r2, [pc, #312]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x216>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4d      	ldr	r2, [pc, #308]	; (8002024 <HAL_GPIO_Init+0x328>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	; (8002028 <HAL_GPIO_Init+0x32c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x20e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4b      	ldr	r2, [pc, #300]	; (800202c <HAL_GPIO_Init+0x330>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x20a>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e00e      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f06:	2308      	movs	r3, #8
 8001f08:	e00c      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f0e:	2305      	movs	r3, #5
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x310>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a32      	ldr	r2, [pc, #200]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f ae90 	bls.w	8001d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40021400 	.word	0x40021400
 8002028:	40021800 	.word	0x40021800
 800202c:	40021c00 	.word	0x40021c00
 8002030:	40013c00 	.word	0x40013c00

08002034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e267      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d075      	beq.n	800213e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002052:	4b88      	ldr	r3, [pc, #544]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b04      	cmp	r3, #4
 800205c:	d00c      	beq.n	8002078 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4b85      	ldr	r3, [pc, #532]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002066:	2b08      	cmp	r3, #8
 8002068:	d112      	bne.n	8002090 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206a:	4b82      	ldr	r3, [pc, #520]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002076:	d10b      	bne.n	8002090 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	4b7e      	ldr	r3, [pc, #504]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d05b      	beq.n	800213c <HAL_RCC_OscConfig+0x108>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d157      	bne.n	800213c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e242      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d106      	bne.n	80020a8 <HAL_RCC_OscConfig+0x74>
 800209a:	4b76      	ldr	r3, [pc, #472]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a75      	ldr	r2, [pc, #468]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e01d      	b.n	80020e4 <HAL_RCC_OscConfig+0xb0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0x98>
 80020b2:	4b70      	ldr	r3, [pc, #448]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6f      	ldr	r2, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a6c      	ldr	r2, [pc, #432]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0xb0>
 80020cc:	4b69      	ldr	r3, [pc, #420]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a68      	ldr	r2, [pc, #416]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b66      	ldr	r3, [pc, #408]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a65      	ldr	r2, [pc, #404]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80020de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fc32 	bl	8001954 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff fc2e 	bl	8001954 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e207      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0xc0>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fc1e 	bl	8001954 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fc1a 	bl	8001954 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1f3      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	4b51      	ldr	r3, [pc, #324]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0xe8>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214a:	4b4a      	ldr	r3, [pc, #296]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	4b47      	ldr	r3, [pc, #284]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800215e:	2b08      	cmp	r3, #8
 8002160:	d11c      	bne.n	800219c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002162:	4b44      	ldr	r3, [pc, #272]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d116      	bne.n	800219c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	4b41      	ldr	r3, [pc, #260]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_RCC_OscConfig+0x152>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d001      	beq.n	8002186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e1c7      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4937      	ldr	r1, [pc, #220]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	e03a      	b.n	8002212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a4:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_RCC_OscConfig+0x244>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7ff fbd3 	bl	8001954 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b2:	f7ff fbcf 	bl	8001954 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e1a8      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b28      	ldr	r3, [pc, #160]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4925      	ldr	r1, [pc, #148]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_OscConfig+0x244>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7ff fbb2 	bl	8001954 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f4:	f7ff fbae 	bl	8001954 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e187      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d036      	beq.n	800228c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d016      	beq.n	8002254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_RCC_OscConfig+0x248>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff fb92 	bl	8001954 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002234:	f7ff fb8e 	bl	8001954 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e167      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_OscConfig+0x240>)
 8002248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x200>
 8002252:	e01b      	b.n	800228c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_OscConfig+0x248>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff fb7b 	bl	8001954 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	e00e      	b.n	8002280 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002262:	f7ff fb77 	bl	8001954 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d907      	bls.n	8002280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e150      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
 8002274:	40023800 	.word	0x40023800
 8002278:	42470000 	.word	0x42470000
 800227c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b88      	ldr	r3, [pc, #544]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ea      	bne.n	8002262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8097 	beq.w	80023c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b81      	ldr	r3, [pc, #516]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	4b7d      	ldr	r3, [pc, #500]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a7c      	ldr	r2, [pc, #496]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c6:	2301      	movs	r3, #1
 80022c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b77      	ldr	r3, [pc, #476]	; (80024a8 <HAL_RCC_OscConfig+0x474>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d6:	4b74      	ldr	r3, [pc, #464]	; (80024a8 <HAL_RCC_OscConfig+0x474>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a73      	ldr	r2, [pc, #460]	; (80024a8 <HAL_RCC_OscConfig+0x474>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fb37 	bl	8001954 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ea:	f7ff fb33 	bl	8001954 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e10c      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <HAL_RCC_OscConfig+0x474>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x2ea>
 8002310:	4b64      	ldr	r3, [pc, #400]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	4a63      	ldr	r2, [pc, #396]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6713      	str	r3, [r2, #112]	; 0x70
 800231c:	e01c      	b.n	8002358 <HAL_RCC_OscConfig+0x324>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b05      	cmp	r3, #5
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0x30c>
 8002326:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a5e      	ldr	r2, [pc, #376]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	4a5b      	ldr	r2, [pc, #364]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6713      	str	r3, [r2, #112]	; 0x70
 800233e:	e00b      	b.n	8002358 <HAL_RCC_OscConfig+0x324>
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a57      	ldr	r2, [pc, #348]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
 800234c:	4b55      	ldr	r3, [pc, #340]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002350:	4a54      	ldr	r2, [pc, #336]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002352:	f023 0304 	bic.w	r3, r3, #4
 8002356:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d015      	beq.n	800238c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7ff faf8 	bl	8001954 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7ff faf4 	bl	8001954 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0cb      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237e:	4b49      	ldr	r3, [pc, #292]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0ee      	beq.n	8002368 <HAL_RCC_OscConfig+0x334>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238c:	f7ff fae2 	bl	8001954 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002392:	e00a      	b.n	80023aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7ff fade 	bl	8001954 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e0b5      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023aa:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ee      	bne.n	8002394 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023bc:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	4a38      	ldr	r2, [pc, #224]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 80023c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a1 	beq.w	8002514 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d05c      	beq.n	8002498 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d141      	bne.n	800246a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <HAL_RCC_OscConfig+0x478>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7ff fab2 	bl	8001954 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f4:	f7ff faae 	bl	8001954 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e087      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	019b      	lsls	r3, r3, #6
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	085b      	lsrs	r3, r3, #1
 800242a:	3b01      	subs	r3, #1
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	491b      	ldr	r1, [pc, #108]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_RCC_OscConfig+0x478>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7ff fa87 	bl	8001954 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244a:	f7ff fa83 	bl	8001954 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e05c      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x416>
 8002468:	e054      	b.n	8002514 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_RCC_OscConfig+0x478>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7ff fa70 	bl	8001954 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff fa6c 	bl	8001954 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e045      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_RCC_OscConfig+0x470>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x444>
 8002496:	e03d      	b.n	8002514 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e038      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40007000 	.word	0x40007000
 80024ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x4ec>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d028      	beq.n	8002510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d121      	bne.n	8002510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d11a      	bne.n	8002510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d111      	bne.n	8002510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	3b01      	subs	r3, #1
 80024fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0cc      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b68      	ldr	r3, [pc, #416]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d90c      	bls.n	8002560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b65      	ldr	r3, [pc, #404]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002582:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800259a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d044      	beq.n	8002644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d119      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e06f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e067      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4934      	ldr	r1, [pc, #208]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002614:	f7ff f99e 	bl	8001954 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7ff f99a 	bl	8001954 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e04f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 020c 	and.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d1eb      	bne.n	800261c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d20c      	bcs.n	800266c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f8fe 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08006688 	.word	0x08006688
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b094      	sub	sp, #80	; 0x50
 80026f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
 80026fc:	2300      	movs	r3, #0
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002700:	2300      	movs	r3, #0
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002708:	4b79      	ldr	r3, [pc, #484]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d00d      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x40>
 8002714:	2b08      	cmp	r3, #8
 8002716:	f200 80e1 	bhi.w	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x34>
 800271e:	2b04      	cmp	r3, #4
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x3a>
 8002722:	e0db      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b73      	ldr	r3, [pc, #460]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002728:	e0db      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272a:	4b73      	ldr	r3, [pc, #460]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800272c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800272e:	e0d8      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273a:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002746:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	2200      	movs	r2, #0
 800274e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002750:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
 800275e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	0159      	lsls	r1, r3, #5
 8002770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002774:	0150      	lsls	r0, r2, #5
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4621      	mov	r1, r4
 800277c:	1a51      	subs	r1, r2, r1
 800277e:	6139      	str	r1, [r7, #16]
 8002780:	4629      	mov	r1, r5
 8002782:	eb63 0301 	sbc.w	r3, r3, r1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002794:	4659      	mov	r1, fp
 8002796:	018b      	lsls	r3, r1, #6
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800279e:	4651      	mov	r1, sl
 80027a0:	018a      	lsls	r2, r1, #6
 80027a2:	4651      	mov	r1, sl
 80027a4:	ebb2 0801 	subs.w	r8, r2, r1
 80027a8:	4659      	mov	r1, fp
 80027aa:	eb63 0901 	sbc.w	r9, r3, r1
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	eb18 0303 	adds.w	r3, r8, r3
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	462b      	mov	r3, r5
 80027d0:	eb49 0303 	adc.w	r3, r9, r3
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027e2:	4629      	mov	r1, r5
 80027e4:	024b      	lsls	r3, r1, #9
 80027e6:	4621      	mov	r1, r4
 80027e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ec:	4621      	mov	r1, r4
 80027ee:	024a      	lsls	r2, r1, #9
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	2200      	movs	r2, #0
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002800:	f7fe f93c 	bl	8000a7c <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800280c:	e058      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	2200      	movs	r2, #0
 8002816:	4618      	mov	r0, r3
 8002818:	4611      	mov	r1, r2
 800281a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
 8002824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	f04f 0000 	mov.w	r0, #0
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	0159      	lsls	r1, r3, #5
 8002836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283a:	0150      	lsls	r0, r2, #5
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4641      	mov	r1, r8
 8002842:	ebb2 0a01 	subs.w	sl, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb63 0b01 	sbc.w	fp, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800285c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002860:	ebb2 040a 	subs.w	r4, r2, sl
 8002864:	eb63 050b 	sbc.w	r5, r3, fp
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	00eb      	lsls	r3, r5, #3
 8002872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002876:	00e2      	lsls	r2, r4, #3
 8002878:	4614      	mov	r4, r2
 800287a:	461d      	mov	r5, r3
 800287c:	4643      	mov	r3, r8
 800287e:	18e3      	adds	r3, r4, r3
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	464b      	mov	r3, r9
 8002884:	eb45 0303 	adc.w	r3, r5, r3
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002896:	4629      	mov	r1, r5
 8002898:	028b      	lsls	r3, r1, #10
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a0:	4621      	mov	r1, r4
 80028a2:	028a      	lsls	r2, r1, #10
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028aa:	2200      	movs	r2, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	61fa      	str	r2, [r7, #28]
 80028b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b4:	f7fe f8e2 	bl	8000a7c <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3750      	adds	r7, #80	; 0x50
 80028e8:	46bd      	mov	sp, r7
 80028ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	007a1200 	.word	0x007a1200

080028fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_RCC_GetHCLKFreq+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002918:	f7ff fff0 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0a9b      	lsrs	r3, r3, #10
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08006698 	.word	0x08006698

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002940:	f7ff ffdc 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0b5b      	lsrs	r3, r3, #13
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40023800 	.word	0x40023800
 8002960:	08006698 	.word	0x08006698

08002964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e041      	b.n	80029fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fd54 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 fad8 	bl	8002f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e041      	b.n	8002a98 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d106      	bne.n	8002a2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f839 	bl	8002aa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f000 fa89 	bl	8002f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_TIM_PWM_Start+0x24>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e022      	b.n	8002b1e <HAL_TIM_PWM_Start+0x6a>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d109      	bne.n	8002af2 <HAL_TIM_PWM_Start+0x3e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	bf14      	ite	ne
 8002aea:	2301      	movne	r3, #1
 8002aec:	2300      	moveq	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	e015      	b.n	8002b1e <HAL_TIM_PWM_Start+0x6a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d109      	bne.n	8002b0c <HAL_TIM_PWM_Start+0x58>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	e008      	b.n	8002b1e <HAL_TIM_PWM_Start+0x6a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e07c      	b.n	8002c20 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_PWM_Start+0x82>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b34:	e013      	b.n	8002b5e <HAL_TIM_PWM_Start+0xaa>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_PWM_Start+0x92>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b44:	e00b      	b.n	8002b5e <HAL_TIM_PWM_Start+0xaa>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0xa2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b54:	e003      	b.n	8002b5e <HAL_TIM_PWM_Start+0xaa>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2201      	movs	r2, #1
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fce0 	bl	800352c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2d      	ldr	r2, [pc, #180]	; (8002c28 <HAL_TIM_PWM_Start+0x174>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_TIM_PWM_Start+0xcc>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <HAL_TIM_PWM_Start+0x178>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d101      	bne.n	8002b84 <HAL_TIM_PWM_Start+0xd0>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_TIM_PWM_Start+0xd2>
 8002b84:	2300      	movs	r3, #0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_TIM_PWM_Start+0x174>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d01d      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_TIM_PWM_Start+0x17c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d018      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_TIM_PWM_Start+0x180>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_TIM_PWM_Start+0x184>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <HAL_TIM_PWM_Start+0x178>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_TIM_PWM_Start+0x188>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_TIM_PWM_Start+0x136>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <HAL_TIM_PWM_Start+0x18c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d111      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b06      	cmp	r3, #6
 8002bfa:	d010      	beq.n	8002c1e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0c:	e007      	b.n	8002c1e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40010400 	.word	0x40010400
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40001800 	.word	0x40001800

08002c44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e0ae      	b.n	8002dc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	f200 809f 	bhi.w	8002db0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002db1 	.word	0x08002db1
 8002c80:	08002db1 	.word	0x08002db1
 8002c84:	08002db1 	.word	0x08002db1
 8002c88:	08002ced 	.word	0x08002ced
 8002c8c:	08002db1 	.word	0x08002db1
 8002c90:	08002db1 	.word	0x08002db1
 8002c94:	08002db1 	.word	0x08002db1
 8002c98:	08002d2f 	.word	0x08002d2f
 8002c9c:	08002db1 	.word	0x08002db1
 8002ca0:	08002db1 	.word	0x08002db1
 8002ca4:	08002db1 	.word	0x08002db1
 8002ca8:	08002d6f 	.word	0x08002d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f9f0 	bl	8003098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6999      	ldr	r1, [r3, #24]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	619a      	str	r2, [r3, #24]
      break;
 8002cea:	e064      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fa40 	bl	8003178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]
      break;
 8002d2c:	e043      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fa95 	bl	8003264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0208 	orr.w	r2, r2, #8
 8002d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69d9      	ldr	r1, [r3, #28]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	61da      	str	r2, [r3, #28]
      break;
 8002d6c:	e023      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fae9 	bl	800334c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69d9      	ldr	r1, [r3, #28]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	61da      	str	r2, [r3, #28]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	75fb      	strb	r3, [r7, #23]
      break;
 8002db4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_TIM_ConfigClockSource+0x1c>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e0b4      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x186>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1c:	d03e      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0xd4>
 8002e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e22:	f200 8087 	bhi.w	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2a:	f000 8086 	beq.w	8002f3a <HAL_TIM_ConfigClockSource+0x172>
 8002e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e32:	d87f      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b70      	cmp	r3, #112	; 0x70
 8002e36:	d01a      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0xa6>
 8002e38:	2b70      	cmp	r3, #112	; 0x70
 8002e3a:	d87b      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b60      	cmp	r3, #96	; 0x60
 8002e3e:	d050      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x11a>
 8002e40:	2b60      	cmp	r3, #96	; 0x60
 8002e42:	d877      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b50      	cmp	r3, #80	; 0x50
 8002e46:	d03c      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0xfa>
 8002e48:	2b50      	cmp	r3, #80	; 0x50
 8002e4a:	d873      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d058      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x13a>
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d86f      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e54:	2b30      	cmp	r3, #48	; 0x30
 8002e56:	d064      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x15a>
 8002e58:	2b30      	cmp	r3, #48	; 0x30
 8002e5a:	d86b      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d060      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x15a>
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d867      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d05c      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x15a>
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d05a      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x15a>
 8002e6c:	e062      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f000 fb35 	bl	80034ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	609a      	str	r2, [r3, #8]
      break;
 8002e9a:	e04f      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f000 fb1e 	bl	80034ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ebe:	609a      	str	r2, [r3, #8]
      break;
 8002ec0:	e03c      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 fa92 	bl	80033f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2150      	movs	r1, #80	; 0x50
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 faeb 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e02c      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f000 fab1 	bl	8003456 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2160      	movs	r1, #96	; 0x60
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fadb 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002f00:	e01c      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f000 fa72 	bl	80033f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2140      	movs	r1, #64	; 0x40
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 facb 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002f20:	e00c      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f000 fac2 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002f32:	e003      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e000      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a40      	ldr	r2, [pc, #256]	; (800306c <TIM_Base_SetConfig+0x114>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f76:	d00f      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <TIM_Base_SetConfig+0x118>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00b      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a3c      	ldr	r2, [pc, #240]	; (8003074 <TIM_Base_SetConfig+0x11c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3b      	ldr	r2, [pc, #236]	; (8003078 <TIM_Base_SetConfig+0x120>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x40>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3a      	ldr	r2, [pc, #232]	; (800307c <TIM_Base_SetConfig+0x124>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a2f      	ldr	r2, [pc, #188]	; (800306c <TIM_Base_SetConfig+0x114>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d02b      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d027      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <TIM_Base_SetConfig+0x118>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d023      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <TIM_Base_SetConfig+0x11c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01f      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <TIM_Base_SetConfig+0x120>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01b      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a29      	ldr	r2, [pc, #164]	; (800307c <TIM_Base_SetConfig+0x124>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d017      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a28      	ldr	r2, [pc, #160]	; (8003080 <TIM_Base_SetConfig+0x128>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <TIM_Base_SetConfig+0x12c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00f      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a26      	ldr	r2, [pc, #152]	; (8003088 <TIM_Base_SetConfig+0x130>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00b      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <TIM_Base_SetConfig+0x134>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d007      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a24      	ldr	r2, [pc, #144]	; (8003090 <TIM_Base_SetConfig+0x138>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a23      	ldr	r2, [pc, #140]	; (8003094 <TIM_Base_SetConfig+0x13c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d108      	bne.n	800301c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <TIM_Base_SetConfig+0x114>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0xf8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0c      	ldr	r2, [pc, #48]	; (800307c <TIM_Base_SetConfig+0x124>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	615a      	str	r2, [r3, #20]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40010000 	.word	0x40010000
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800
 8003078:	40000c00 	.word	0x40000c00
 800307c:	40010400 	.word	0x40010400
 8003080:	40014000 	.word	0x40014000
 8003084:	40014400 	.word	0x40014400
 8003088:	40014800 	.word	0x40014800
 800308c:	40001800 	.word	0x40001800
 8003090:	40001c00 	.word	0x40001c00
 8003094:	40002000 	.word	0x40002000

08003098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f023 0302 	bic.w	r3, r3, #2
 80030e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a20      	ldr	r2, [pc, #128]	; (8003170 <TIM_OC1_SetConfig+0xd8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <TIM_OC1_SetConfig+0x64>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <TIM_OC1_SetConfig+0xdc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10c      	bne.n	8003116 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0308 	bic.w	r3, r3, #8
 8003102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <TIM_OC1_SetConfig+0xd8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_OC1_SetConfig+0x8e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <TIM_OC1_SetConfig+0xdc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d111      	bne.n	800314a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	621a      	str	r2, [r3, #32]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40010000 	.word	0x40010000
 8003174:	40010400 	.word	0x40010400

08003178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0210 	bic.w	r2, r3, #16
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0320 	bic.w	r3, r3, #32
 80031c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a22      	ldr	r2, [pc, #136]	; (800325c <TIM_OC2_SetConfig+0xe4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_OC2_SetConfig+0x68>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a21      	ldr	r2, [pc, #132]	; (8003260 <TIM_OC2_SetConfig+0xe8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d10d      	bne.n	80031fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a17      	ldr	r2, [pc, #92]	; (800325c <TIM_OC2_SetConfig+0xe4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_OC2_SetConfig+0x94>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a16      	ldr	r2, [pc, #88]	; (8003260 <TIM_OC2_SetConfig+0xe8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d113      	bne.n	8003234 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800321a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000
 8003260:	40010400 	.word	0x40010400

08003264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a21      	ldr	r2, [pc, #132]	; (8003344 <TIM_OC3_SetConfig+0xe0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_OC3_SetConfig+0x66>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a20      	ldr	r2, [pc, #128]	; (8003348 <TIM_OC3_SetConfig+0xe4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10d      	bne.n	80032e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a16      	ldr	r2, [pc, #88]	; (8003344 <TIM_OC3_SetConfig+0xe0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_OC3_SetConfig+0x92>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <TIM_OC3_SetConfig+0xe4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d113      	bne.n	800331e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40010000 	.word	0x40010000
 8003348:	40010400 	.word	0x40010400

0800334c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	031b      	lsls	r3, r3, #12
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <TIM_OC4_SetConfig+0xa4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_OC4_SetConfig+0x68>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a11      	ldr	r2, [pc, #68]	; (80033f4 <TIM_OC4_SetConfig+0xa8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d109      	bne.n	80033c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	019b      	lsls	r3, r3, #6
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010000 	.word	0x40010000
 80033f4:	40010400 	.word	0x40010400

080033f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0201 	bic.w	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 030a 	bic.w	r3, r3, #10
 8003434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
 800343c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003456:	b480      	push	{r7}
 8003458:	b087      	sub	sp, #28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0210 	bic.w	r2, r3, #16
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	031b      	lsls	r3, r3, #12
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f043 0307 	orr.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	021a      	lsls	r2, r3, #8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	431a      	orrs	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	609a      	str	r2, [r3, #8]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	2201      	movs	r2, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a1a      	ldr	r2, [r3, #32]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	431a      	orrs	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800358c:	2302      	movs	r3, #2
 800358e:	e05a      	b.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d01d      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1b      	ldr	r2, [pc, #108]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a15      	ldr	r2, [pc, #84]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10c      	bne.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	4313      	orrs	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40010000 	.word	0x40010000
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800
 8003660:	40000c00 	.word	0x40000c00
 8003664:	40010400 	.word	0x40010400
 8003668:	40014000 	.word	0x40014000
 800366c:	40001800 	.word	0x40001800

08003670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e03f      	b.n	8003702 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd ff48 	bl	800152c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fe1d 	bl	80042f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b08a      	sub	sp, #40	; 0x28
 800370e:	af02      	add	r7, sp, #8
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b20      	cmp	r3, #32
 8003728:	d17c      	bne.n	8003824 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_Transmit+0x2c>
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e075      	b.n	8003826 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_UART_Transmit+0x3e>
 8003744:	2302      	movs	r3, #2
 8003746:	e06e      	b.n	8003826 <HAL_UART_Transmit+0x11c>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2221      	movs	r2, #33	; 0x21
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800375e:	f7fe f8f9 	bl	8001954 <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003778:	d108      	bne.n	800378c <HAL_UART_Transmit+0x82>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	e003      	b.n	8003794 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800379c:	e02a      	b.n	80037f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2180      	movs	r1, #128	; 0x80
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fb9b 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e036      	b.n	8003826 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	3302      	adds	r3, #2
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	e007      	b.n	80037e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1cf      	bne.n	800379e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2200      	movs	r2, #0
 8003806:	2140      	movs	r1, #64	; 0x40
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fb6b 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e006      	b.n	8003826 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b08a      	sub	sp, #40	; 0x28
 8003832:	af02      	add	r7, sp, #8
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b20      	cmp	r3, #32
 800384c:	f040 808c 	bne.w	8003968 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_UART_Receive+0x2e>
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e084      	b.n	800396a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_UART_Receive+0x40>
 800386a:	2302      	movs	r3, #2
 800386c:	e07d      	b.n	800396a <HAL_UART_Receive+0x13c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2222      	movs	r2, #34	; 0x22
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388a:	f7fe f863 	bl	8001954 <HAL_GetTick>
 800388e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a4:	d108      	bne.n	80038b8 <HAL_UART_Receive+0x8a>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d104      	bne.n	80038b8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	e003      	b.n	80038c0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038c8:	e043      	b.n	8003952 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2120      	movs	r1, #32
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fb05 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e042      	b.n	800396a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10c      	bne.n	8003904 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	3302      	adds	r3, #2
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e01f      	b.n	8003944 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	d007      	beq.n	800391e <HAL_UART_Receive+0xf0>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <HAL_UART_Receive+0xfe>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e008      	b.n	800393e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003938:	b2da      	uxtb	r2, r3
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3301      	adds	r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1b6      	bne.n	80038ca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b0ba      	sub	sp, #232	; 0xe8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_UART_IRQHandler+0x66>
 80039c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fbd3 	bl	800417e <UART_Receive_IT>
      return;
 80039d8:	e256      	b.n	8003e88 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80de 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x22c>
 80039e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80d1 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xae>
 8003a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_UART_IRQHandler+0xd2>
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f043 0202 	orr.w	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_UART_IRQHandler+0xf6>
 8003a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d011      	beq.n	8003a9a <HAL_UART_IRQHandler+0x126>
 8003a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f043 0208 	orr.w	r2, r3, #8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 81ed 	beq.w	8003e7e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x14e>
 8003ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fb5e 	bl	800417e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_UART_IRQHandler+0x17a>
 8003ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04f      	beq.n	8003b8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa66 	bl	8003fc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d141      	bne.n	8003b86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3314      	adds	r3, #20
 8003b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1d9      	bne.n	8003b02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d013      	beq.n	8003b7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	4a7d      	ldr	r2, [pc, #500]	; (8003d50 <HAL_UART_IRQHandler+0x3dc>)
 8003b5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe f8a7 	bl	8001cb6 <HAL_DMA_Abort_IT>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e00e      	b.n	8003b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f99a 	bl	8003eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	e00a      	b.n	8003b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f996 	bl	8003eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	e006      	b.n	8003b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f992 	bl	8003eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b9a:	e170      	b.n	8003e7e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	bf00      	nop
    return;
 8003b9e:	e16e      	b.n	8003e7e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 814a 	bne.w	8003e3e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8143 	beq.w	8003e3e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 813c 	beq.w	8003e3e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	f040 80b4 	bne.w	8003d54 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8140 	beq.w	8003e82 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	f080 8139 	bcs.w	8003e82 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c22:	f000 8088 	beq.w	8003d36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1d9      	bne.n	8003c26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3314      	adds	r3, #20
 8003c78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e1      	bne.n	8003c72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3314      	adds	r3, #20
 8003cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e3      	bne.n	8003cae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d06:	f023 0310 	bic.w	r3, r3, #16
 8003d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	330c      	adds	r3, #12
 8003d14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d18:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e3      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd ff50 	bl	8001bd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	4619      	mov	r1, r3
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8c0 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d4c:	e099      	b.n	8003e82 <HAL_UART_IRQHandler+0x50e>
 8003d4e:	bf00      	nop
 8003d50:	08004087 	.word	0x08004087
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 808b 	beq.w	8003e86 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8086 	beq.w	8003e86 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d9e:	647a      	str	r2, [r7, #68]	; 0x44
 8003da0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003da4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e3      	bne.n	8003d7a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3314      	adds	r3, #20
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3314      	adds	r3, #20
 8003dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dd6:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e3      	bne.n	8003db2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0310 	bic.w	r3, r3, #16
 8003e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e1c:	61fa      	str	r2, [r7, #28]
 8003e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	69b9      	ldr	r1, [r7, #24]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e3      	bne.n	8003df8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f848 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e3c:	e023      	b.n	8003e86 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_UART_IRQHandler+0x4ea>
 8003e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f929 	bl	80040ae <UART_Transmit_IT>
    return;
 8003e5c:	e014      	b.n	8003e88 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00e      	beq.n	8003e88 <HAL_UART_IRQHandler+0x514>
 8003e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f969 	bl	800414e <UART_EndTransmit_IT>
    return;
 8003e7c:	e004      	b.n	8003e88 <HAL_UART_IRQHandler+0x514>
    return;
 8003e7e:	bf00      	nop
 8003e80:	e002      	b.n	8003e88 <HAL_UART_IRQHandler+0x514>
      return;
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <HAL_UART_IRQHandler+0x514>
      return;
 8003e86:	bf00      	nop
  }
}
 8003e88:	37e8      	adds	r7, #232	; 0xe8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop

08003e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b090      	sub	sp, #64	; 0x40
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef4:	e050      	b.n	8003f98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efc:	d04c      	beq.n	8003f98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f04:	f7fd fd26 	bl	8001954 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d241      	bcs.n	8003f98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f34:	637a      	str	r2, [r7, #52]	; 0x34
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e5      	bne.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	613b      	str	r3, [r7, #16]
   return(result);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3314      	adds	r3, #20
 8003f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f68:	623a      	str	r2, [r7, #32]
 8003f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	69f9      	ldr	r1, [r7, #28]
 8003f6e:	6a3a      	ldr	r2, [r7, #32]
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e5      	bne.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e00f      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d09f      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3740      	adds	r7, #64	; 0x40
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b095      	sub	sp, #84	; 0x54
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe8:	643a      	str	r2, [r7, #64]	; 0x40
 8003fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e5      	bne.n	8003fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	61fb      	str	r3, [r7, #28]
   return(result);
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800401c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e5      	bne.n	8003ffc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	2b01      	cmp	r3, #1
 8004036:	d119      	bne.n	800406c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	330c      	adds	r3, #12
 800403e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	60bb      	str	r3, [r7, #8]
   return(result);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f023 0310 	bic.w	r3, r3, #16
 800404e:	647b      	str	r3, [r7, #68]	; 0x44
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004058:	61ba      	str	r2, [r7, #24]
 800405a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6979      	ldr	r1, [r7, #20]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	613b      	str	r3, [r7, #16]
   return(result);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e5      	bne.n	8004038 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
}
 800407a:	bf00      	nop
 800407c:	3754      	adds	r7, #84	; 0x54
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7ff ff09 	bl	8003eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b21      	cmp	r3, #33	; 0x21
 80040c0:	d13e      	bne.n	8004140 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d114      	bne.n	80040f6 <UART_Transmit_IT+0x48>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d110      	bne.n	80040f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	1c9a      	adds	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	621a      	str	r2, [r3, #32]
 80040f4:	e008      	b.n	8004108 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6211      	str	r1, [r2, #32]
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29b      	uxth	r3, r3
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4619      	mov	r1, r3
 8004116:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10f      	bne.n	800413c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800412a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
  }
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004164:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff fe8e 	bl	8003e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b08c      	sub	sp, #48	; 0x30
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	f040 80ab 	bne.w	80042ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419c:	d117      	bne.n	80041ce <UART_Receive_IT+0x50>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d113      	bne.n	80041ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041bc:	b29a      	uxth	r2, r3
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	1c9a      	adds	r2, r3, #2
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
 80041cc:	e026      	b.n	800421c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d007      	beq.n	80041f2 <UART_Receive_IT+0x74>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <UART_Receive_IT+0x82>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e008      	b.n	8004212 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420c:	b2da      	uxtb	r2, r3
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29b      	uxth	r3, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4619      	mov	r1, r3
 800422a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800422c:	2b00      	cmp	r3, #0
 800422e:	d15a      	bne.n	80042e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0220 	bic.w	r2, r2, #32
 800423e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	2b01      	cmp	r3, #1
 800426e:	d135      	bne.n	80042dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	613b      	str	r3, [r7, #16]
   return(result);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f023 0310 	bic.w	r3, r3, #16
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004296:	623a      	str	r2, [r7, #32]
 8004298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	69f9      	ldr	r1, [r7, #28]
 800429c:	6a3a      	ldr	r2, [r7, #32]
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e5      	bne.n	8004276 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d10a      	bne.n	80042ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fdf9 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
 80042da:	e002      	b.n	80042e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff fde1 	bl	8003ea4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e002      	b.n	80042ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3730      	adds	r7, #48	; 0x30
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b0c0      	sub	sp, #256	; 0x100
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	ea40 0301 	orr.w	r3, r0, r1
 800431c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	431a      	orrs	r2, r3
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	431a      	orrs	r2, r3
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800434c:	f021 010c 	bic.w	r1, r1, #12
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800435a:	430b      	orrs	r3, r1
 800435c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	6999      	ldr	r1, [r3, #24]
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	ea40 0301 	orr.w	r3, r0, r1
 800437a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b8f      	ldr	r3, [pc, #572]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004384:	429a      	cmp	r2, r3
 8004386:	d005      	beq.n	8004394 <UART_SetConfig+0xa0>
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b8d      	ldr	r3, [pc, #564]	; (80045c4 <UART_SetConfig+0x2d0>)
 8004390:	429a      	cmp	r2, r3
 8004392:	d104      	bne.n	800439e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7fe fad2 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8004398:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800439c:	e003      	b.n	80043a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800439e:	f7fe fab9 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 80043a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	f040 810c 	bne.w	80045cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043c6:	4622      	mov	r2, r4
 80043c8:	462b      	mov	r3, r5
 80043ca:	1891      	adds	r1, r2, r2
 80043cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80043ce:	415b      	adcs	r3, r3
 80043d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043d6:	4621      	mov	r1, r4
 80043d8:	eb12 0801 	adds.w	r8, r2, r1
 80043dc:	4629      	mov	r1, r5
 80043de:	eb43 0901 	adc.w	r9, r3, r1
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043f6:	4690      	mov	r8, r2
 80043f8:	4699      	mov	r9, r3
 80043fa:	4623      	mov	r3, r4
 80043fc:	eb18 0303 	adds.w	r3, r8, r3
 8004400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004404:	462b      	mov	r3, r5
 8004406:	eb49 0303 	adc.w	r3, r9, r3
 800440a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800441a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800441e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004422:	460b      	mov	r3, r1
 8004424:	18db      	adds	r3, r3, r3
 8004426:	653b      	str	r3, [r7, #80]	; 0x50
 8004428:	4613      	mov	r3, r2
 800442a:	eb42 0303 	adc.w	r3, r2, r3
 800442e:	657b      	str	r3, [r7, #84]	; 0x54
 8004430:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004434:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004438:	f7fc fb20 	bl	8000a7c <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4b61      	ldr	r3, [pc, #388]	; (80045c8 <UART_SetConfig+0x2d4>)
 8004442:	fba3 2302 	umull	r2, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	011c      	lsls	r4, r3, #4
 800444a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004454:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004458:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	64b9      	str	r1, [r7, #72]	; 0x48
 8004464:	415b      	adcs	r3, r3
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004468:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800446c:	4641      	mov	r1, r8
 800446e:	eb12 0a01 	adds.w	sl, r2, r1
 8004472:	4649      	mov	r1, r9
 8004474:	eb43 0b01 	adc.w	fp, r3, r1
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004484:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004488:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800448c:	4692      	mov	sl, r2
 800448e:	469b      	mov	fp, r3
 8004490:	4643      	mov	r3, r8
 8004492:	eb1a 0303 	adds.w	r3, sl, r3
 8004496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800449a:	464b      	mov	r3, r9
 800449c:	eb4b 0303 	adc.w	r3, fp, r3
 80044a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044b8:	460b      	mov	r3, r1
 80044ba:	18db      	adds	r3, r3, r3
 80044bc:	643b      	str	r3, [r7, #64]	; 0x40
 80044be:	4613      	mov	r3, r2
 80044c0:	eb42 0303 	adc.w	r3, r2, r3
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
 80044c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044ce:	f7fc fad5 	bl	8000a7c <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <UART_SetConfig+0x2d4>)
 80044da:	fba3 2301 	umull	r2, r3, r3, r1
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2264      	movs	r2, #100	; 0x64
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	1acb      	subs	r3, r1, r3
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <UART_SetConfig+0x2d4>)
 80044f0:	fba3 2302 	umull	r2, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044fc:	441c      	add	r4, r3
 80044fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004508:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800450c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004510:	4642      	mov	r2, r8
 8004512:	464b      	mov	r3, r9
 8004514:	1891      	adds	r1, r2, r2
 8004516:	63b9      	str	r1, [r7, #56]	; 0x38
 8004518:	415b      	adcs	r3, r3
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004520:	4641      	mov	r1, r8
 8004522:	1851      	adds	r1, r2, r1
 8004524:	6339      	str	r1, [r7, #48]	; 0x30
 8004526:	4649      	mov	r1, r9
 8004528:	414b      	adcs	r3, r1
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004538:	4659      	mov	r1, fp
 800453a:	00cb      	lsls	r3, r1, #3
 800453c:	4651      	mov	r1, sl
 800453e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004542:	4651      	mov	r1, sl
 8004544:	00ca      	lsls	r2, r1, #3
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	4603      	mov	r3, r0
 800454c:	4642      	mov	r2, r8
 800454e:	189b      	adds	r3, r3, r2
 8004550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004554:	464b      	mov	r3, r9
 8004556:	460a      	mov	r2, r1
 8004558:	eb42 0303 	adc.w	r3, r2, r3
 800455c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800456c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004570:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004574:	460b      	mov	r3, r1
 8004576:	18db      	adds	r3, r3, r3
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
 800457a:	4613      	mov	r3, r2
 800457c:	eb42 0303 	adc.w	r3, r2, r3
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004586:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800458a:	f7fc fa77 	bl	8000a7c <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <UART_SetConfig+0x2d4>)
 8004594:	fba3 1302 	umull	r1, r3, r3, r2
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	2164      	movs	r1, #100	; 0x64
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	3332      	adds	r3, #50	; 0x32
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <UART_SetConfig+0x2d4>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	f003 0207 	and.w	r2, r3, #7
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4422      	add	r2, r4
 80045ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045bc:	e105      	b.n	80047ca <UART_SetConfig+0x4d6>
 80045be:	bf00      	nop
 80045c0:	40011000 	.word	0x40011000
 80045c4:	40011400 	.word	0x40011400
 80045c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d0:	2200      	movs	r2, #0
 80045d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045de:	4642      	mov	r2, r8
 80045e0:	464b      	mov	r3, r9
 80045e2:	1891      	adds	r1, r2, r2
 80045e4:	6239      	str	r1, [r7, #32]
 80045e6:	415b      	adcs	r3, r3
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ee:	4641      	mov	r1, r8
 80045f0:	1854      	adds	r4, r2, r1
 80045f2:	4649      	mov	r1, r9
 80045f4:	eb43 0501 	adc.w	r5, r3, r1
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	00eb      	lsls	r3, r5, #3
 8004602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004606:	00e2      	lsls	r2, r4, #3
 8004608:	4614      	mov	r4, r2
 800460a:	461d      	mov	r5, r3
 800460c:	4643      	mov	r3, r8
 800460e:	18e3      	adds	r3, r4, r3
 8004610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004614:	464b      	mov	r3, r9
 8004616:	eb45 0303 	adc.w	r3, r5, r3
 800461a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800462a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800463a:	4629      	mov	r1, r5
 800463c:	008b      	lsls	r3, r1, #2
 800463e:	4621      	mov	r1, r4
 8004640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004644:	4621      	mov	r1, r4
 8004646:	008a      	lsls	r2, r1, #2
 8004648:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800464c:	f7fc fa16 	bl	8000a7c <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <UART_SetConfig+0x4e4>)
 8004656:	fba3 2302 	umull	r2, r3, r3, r2
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	011c      	lsls	r4, r3, #4
 800465e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004668:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800466c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	1891      	adds	r1, r2, r2
 8004676:	61b9      	str	r1, [r7, #24]
 8004678:	415b      	adcs	r3, r3
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004680:	4641      	mov	r1, r8
 8004682:	1851      	adds	r1, r2, r1
 8004684:	6139      	str	r1, [r7, #16]
 8004686:	4649      	mov	r1, r9
 8004688:	414b      	adcs	r3, r1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004698:	4659      	mov	r1, fp
 800469a:	00cb      	lsls	r3, r1, #3
 800469c:	4651      	mov	r1, sl
 800469e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a2:	4651      	mov	r1, sl
 80046a4:	00ca      	lsls	r2, r1, #3
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	4642      	mov	r2, r8
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046b4:	464b      	mov	r3, r9
 80046b6:	460a      	mov	r2, r1
 80046b8:	eb42 0303 	adc.w	r3, r2, r3
 80046bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046d8:	4649      	mov	r1, r9
 80046da:	008b      	lsls	r3, r1, #2
 80046dc:	4641      	mov	r1, r8
 80046de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046e2:	4641      	mov	r1, r8
 80046e4:	008a      	lsls	r2, r1, #2
 80046e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046ea:	f7fc f9c7 	bl	8000a7c <__aeabi_uldivmod>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <UART_SetConfig+0x4e4>)
 80046f4:	fba3 1302 	umull	r1, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	2164      	movs	r1, #100	; 0x64
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	3332      	adds	r3, #50	; 0x32
 8004706:	4a34      	ldr	r2, [pc, #208]	; (80047d8 <UART_SetConfig+0x4e4>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004712:	441c      	add	r4, r3
 8004714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004718:	2200      	movs	r2, #0
 800471a:	673b      	str	r3, [r7, #112]	; 0x70
 800471c:	677a      	str	r2, [r7, #116]	; 0x74
 800471e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004722:	4642      	mov	r2, r8
 8004724:	464b      	mov	r3, r9
 8004726:	1891      	adds	r1, r2, r2
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	415b      	adcs	r3, r3
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004732:	4641      	mov	r1, r8
 8004734:	1851      	adds	r1, r2, r1
 8004736:	6039      	str	r1, [r7, #0]
 8004738:	4649      	mov	r1, r9
 800473a:	414b      	adcs	r3, r1
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800474a:	4659      	mov	r1, fp
 800474c:	00cb      	lsls	r3, r1, #3
 800474e:	4651      	mov	r1, sl
 8004750:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004754:	4651      	mov	r1, sl
 8004756:	00ca      	lsls	r2, r1, #3
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	4603      	mov	r3, r0
 800475e:	4642      	mov	r2, r8
 8004760:	189b      	adds	r3, r3, r2
 8004762:	66bb      	str	r3, [r7, #104]	; 0x68
 8004764:	464b      	mov	r3, r9
 8004766:	460a      	mov	r2, r1
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	663b      	str	r3, [r7, #96]	; 0x60
 8004778:	667a      	str	r2, [r7, #100]	; 0x64
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004786:	4649      	mov	r1, r9
 8004788:	008b      	lsls	r3, r1, #2
 800478a:	4641      	mov	r1, r8
 800478c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004790:	4641      	mov	r1, r8
 8004792:	008a      	lsls	r2, r1, #2
 8004794:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004798:	f7fc f970 	bl	8000a7c <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <UART_SetConfig+0x4e4>)
 80047a2:	fba3 1302 	umull	r1, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2164      	movs	r1, #100	; 0x64
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	3332      	adds	r3, #50	; 0x32
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <UART_SetConfig+0x4e4>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 020f 	and.w	r2, r3, #15
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4422      	add	r2, r4
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047d0:	46bd      	mov	sp, r7
 80047d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d6:	bf00      	nop
 80047d8:	51eb851f 	.word	0x51eb851f

080047dc <__errno>:
 80047dc:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <__errno+0x8>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	2000000c 	.word	0x2000000c

080047e8 <__libc_init_array>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4d0d      	ldr	r5, [pc, #52]	; (8004820 <__libc_init_array+0x38>)
 80047ec:	4c0d      	ldr	r4, [pc, #52]	; (8004824 <__libc_init_array+0x3c>)
 80047ee:	1b64      	subs	r4, r4, r5
 80047f0:	10a4      	asrs	r4, r4, #2
 80047f2:	2600      	movs	r6, #0
 80047f4:	42a6      	cmp	r6, r4
 80047f6:	d109      	bne.n	800480c <__libc_init_array+0x24>
 80047f8:	4d0b      	ldr	r5, [pc, #44]	; (8004828 <__libc_init_array+0x40>)
 80047fa:	4c0c      	ldr	r4, [pc, #48]	; (800482c <__libc_init_array+0x44>)
 80047fc:	f001 ff0e 	bl	800661c <_init>
 8004800:	1b64      	subs	r4, r4, r5
 8004802:	10a4      	asrs	r4, r4, #2
 8004804:	2600      	movs	r6, #0
 8004806:	42a6      	cmp	r6, r4
 8004808:	d105      	bne.n	8004816 <__libc_init_array+0x2e>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004810:	4798      	blx	r3
 8004812:	3601      	adds	r6, #1
 8004814:	e7ee      	b.n	80047f4 <__libc_init_array+0xc>
 8004816:	f855 3b04 	ldr.w	r3, [r5], #4
 800481a:	4798      	blx	r3
 800481c:	3601      	adds	r6, #1
 800481e:	e7f2      	b.n	8004806 <__libc_init_array+0x1e>
 8004820:	0800690c 	.word	0x0800690c
 8004824:	0800690c 	.word	0x0800690c
 8004828:	0800690c 	.word	0x0800690c
 800482c:	08006910 	.word	0x08006910

08004830 <memset>:
 8004830:	4402      	add	r2, r0
 8004832:	4603      	mov	r3, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	d100      	bne.n	800483a <memset+0xa>
 8004838:	4770      	bx	lr
 800483a:	f803 1b01 	strb.w	r1, [r3], #1
 800483e:	e7f9      	b.n	8004834 <memset+0x4>

08004840 <siprintf>:
 8004840:	b40e      	push	{r1, r2, r3}
 8004842:	b500      	push	{lr}
 8004844:	b09c      	sub	sp, #112	; 0x70
 8004846:	ab1d      	add	r3, sp, #116	; 0x74
 8004848:	9002      	str	r0, [sp, #8]
 800484a:	9006      	str	r0, [sp, #24]
 800484c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004850:	4809      	ldr	r0, [pc, #36]	; (8004878 <siprintf+0x38>)
 8004852:	9107      	str	r1, [sp, #28]
 8004854:	9104      	str	r1, [sp, #16]
 8004856:	4909      	ldr	r1, [pc, #36]	; (800487c <siprintf+0x3c>)
 8004858:	f853 2b04 	ldr.w	r2, [r3], #4
 800485c:	9105      	str	r1, [sp, #20]
 800485e:	6800      	ldr	r0, [r0, #0]
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	a902      	add	r1, sp, #8
 8004864:	f000 fa82 	bl	8004d6c <_svfiprintf_r>
 8004868:	9b02      	ldr	r3, [sp, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	b01c      	add	sp, #112	; 0x70
 8004870:	f85d eb04 	ldr.w	lr, [sp], #4
 8004874:	b003      	add	sp, #12
 8004876:	4770      	bx	lr
 8004878:	2000000c 	.word	0x2000000c
 800487c:	ffff0208 	.word	0xffff0208

08004880 <siscanf>:
 8004880:	b40e      	push	{r1, r2, r3}
 8004882:	b510      	push	{r4, lr}
 8004884:	b09f      	sub	sp, #124	; 0x7c
 8004886:	ac21      	add	r4, sp, #132	; 0x84
 8004888:	f44f 7101 	mov.w	r1, #516	; 0x204
 800488c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004890:	9201      	str	r2, [sp, #4]
 8004892:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004896:	9004      	str	r0, [sp, #16]
 8004898:	9008      	str	r0, [sp, #32]
 800489a:	f7fb fca3 	bl	80001e4 <strlen>
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <siscanf+0x50>)
 80048a0:	9005      	str	r0, [sp, #20]
 80048a2:	9009      	str	r0, [sp, #36]	; 0x24
 80048a4:	930d      	str	r3, [sp, #52]	; 0x34
 80048a6:	480b      	ldr	r0, [pc, #44]	; (80048d4 <siscanf+0x54>)
 80048a8:	9a01      	ldr	r2, [sp, #4]
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	9403      	str	r4, [sp, #12]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9311      	str	r3, [sp, #68]	; 0x44
 80048b2:	9316      	str	r3, [sp, #88]	; 0x58
 80048b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80048bc:	a904      	add	r1, sp, #16
 80048be:	4623      	mov	r3, r4
 80048c0:	f000 fbae 	bl	8005020 <__ssvfiscanf_r>
 80048c4:	b01f      	add	sp, #124	; 0x7c
 80048c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ca:	b003      	add	sp, #12
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	2000000c 	.word	0x2000000c

080048d8 <__sread>:
 80048d8:	b510      	push	{r4, lr}
 80048da:	460c      	mov	r4, r1
 80048dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e0:	f001 f956 	bl	8005b90 <_read_r>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	bfab      	itete	ge
 80048e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048ea:	89a3      	ldrhlt	r3, [r4, #12]
 80048ec:	181b      	addge	r3, r3, r0
 80048ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048f2:	bfac      	ite	ge
 80048f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048f6:	81a3      	strhlt	r3, [r4, #12]
 80048f8:	bd10      	pop	{r4, pc}

080048fa <__seofread>:
 80048fa:	2000      	movs	r0, #0
 80048fc:	4770      	bx	lr

080048fe <__swrite>:
 80048fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004902:	461f      	mov	r7, r3
 8004904:	898b      	ldrh	r3, [r1, #12]
 8004906:	05db      	lsls	r3, r3, #23
 8004908:	4605      	mov	r5, r0
 800490a:	460c      	mov	r4, r1
 800490c:	4616      	mov	r6, r2
 800490e:	d505      	bpl.n	800491c <__swrite+0x1e>
 8004910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004914:	2302      	movs	r3, #2
 8004916:	2200      	movs	r2, #0
 8004918:	f000 f8d2 	bl	8004ac0 <_lseek_r>
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004926:	81a3      	strh	r3, [r4, #12]
 8004928:	4632      	mov	r2, r6
 800492a:	463b      	mov	r3, r7
 800492c:	4628      	mov	r0, r5
 800492e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004932:	f000 b873 	b.w	8004a1c <_write_r>

08004936 <__sseek>:
 8004936:	b510      	push	{r4, lr}
 8004938:	460c      	mov	r4, r1
 800493a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493e:	f000 f8bf 	bl	8004ac0 <_lseek_r>
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	bf15      	itete	ne
 8004948:	6560      	strne	r0, [r4, #84]	; 0x54
 800494a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800494e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004952:	81a3      	strheq	r3, [r4, #12]
 8004954:	bf18      	it	ne
 8004956:	81a3      	strhne	r3, [r4, #12]
 8004958:	bd10      	pop	{r4, pc}

0800495a <__sclose>:
 800495a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800495e:	f000 b88d 	b.w	8004a7c <_close_r>
	...

08004964 <strtok>:
 8004964:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <strtok+0x5c>)
 8004966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004968:	681e      	ldr	r6, [r3, #0]
 800496a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800496c:	4605      	mov	r5, r0
 800496e:	b9fc      	cbnz	r4, 80049b0 <strtok+0x4c>
 8004970:	2050      	movs	r0, #80	; 0x50
 8004972:	9101      	str	r1, [sp, #4]
 8004974:	f000 f8b6 	bl	8004ae4 <malloc>
 8004978:	9901      	ldr	r1, [sp, #4]
 800497a:	65b0      	str	r0, [r6, #88]	; 0x58
 800497c:	4602      	mov	r2, r0
 800497e:	b920      	cbnz	r0, 800498a <strtok+0x26>
 8004980:	4b10      	ldr	r3, [pc, #64]	; (80049c4 <strtok+0x60>)
 8004982:	4811      	ldr	r0, [pc, #68]	; (80049c8 <strtok+0x64>)
 8004984:	2157      	movs	r1, #87	; 0x57
 8004986:	f000 f85b 	bl	8004a40 <__assert_func>
 800498a:	e9c0 4400 	strd	r4, r4, [r0]
 800498e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004992:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004996:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800499a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800499e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80049a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80049a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80049aa:	6184      	str	r4, [r0, #24]
 80049ac:	7704      	strb	r4, [r0, #28]
 80049ae:	6244      	str	r4, [r0, #36]	; 0x24
 80049b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80049b2:	2301      	movs	r3, #1
 80049b4:	4628      	mov	r0, r5
 80049b6:	b002      	add	sp, #8
 80049b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049bc:	f000 b806 	b.w	80049cc <__strtok_r>
 80049c0:	2000000c 	.word	0x2000000c
 80049c4:	080066a4 	.word	0x080066a4
 80049c8:	080066bb 	.word	0x080066bb

080049cc <__strtok_r>:
 80049cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ce:	b908      	cbnz	r0, 80049d4 <__strtok_r+0x8>
 80049d0:	6810      	ldr	r0, [r2, #0]
 80049d2:	b188      	cbz	r0, 80049f8 <__strtok_r+0x2c>
 80049d4:	4604      	mov	r4, r0
 80049d6:	4620      	mov	r0, r4
 80049d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80049dc:	460f      	mov	r7, r1
 80049de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80049e2:	b91e      	cbnz	r6, 80049ec <__strtok_r+0x20>
 80049e4:	b965      	cbnz	r5, 8004a00 <__strtok_r+0x34>
 80049e6:	6015      	str	r5, [r2, #0]
 80049e8:	4628      	mov	r0, r5
 80049ea:	e005      	b.n	80049f8 <__strtok_r+0x2c>
 80049ec:	42b5      	cmp	r5, r6
 80049ee:	d1f6      	bne.n	80049de <__strtok_r+0x12>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1f0      	bne.n	80049d6 <__strtok_r+0xa>
 80049f4:	6014      	str	r4, [r2, #0]
 80049f6:	7003      	strb	r3, [r0, #0]
 80049f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fa:	461c      	mov	r4, r3
 80049fc:	e00c      	b.n	8004a18 <__strtok_r+0x4c>
 80049fe:	b915      	cbnz	r5, 8004a06 <__strtok_r+0x3a>
 8004a00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004a04:	460e      	mov	r6, r1
 8004a06:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004a0a:	42ab      	cmp	r3, r5
 8004a0c:	d1f7      	bne.n	80049fe <__strtok_r+0x32>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f3      	beq.n	80049fa <__strtok_r+0x2e>
 8004a12:	2300      	movs	r3, #0
 8004a14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004a18:	6014      	str	r4, [r2, #0]
 8004a1a:	e7ed      	b.n	80049f8 <__strtok_r+0x2c>

08004a1c <_write_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4d07      	ldr	r5, [pc, #28]	; (8004a3c <_write_r+0x20>)
 8004a20:	4604      	mov	r4, r0
 8004a22:	4608      	mov	r0, r1
 8004a24:	4611      	mov	r1, r2
 8004a26:	2200      	movs	r2, #0
 8004a28:	602a      	str	r2, [r5, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f7fc fe69 	bl	8001702 <_write>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_write_r+0x1e>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_write_r+0x1e>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	20000128 	.word	0x20000128

08004a40 <__assert_func>:
 8004a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a42:	4614      	mov	r4, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <__assert_func+0x2c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	68d8      	ldr	r0, [r3, #12]
 8004a4e:	b14c      	cbz	r4, 8004a64 <__assert_func+0x24>
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <__assert_func+0x30>)
 8004a52:	9100      	str	r1, [sp, #0]
 8004a54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a58:	4906      	ldr	r1, [pc, #24]	; (8004a74 <__assert_func+0x34>)
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	f000 f81e 	bl	8004a9c <fiprintf>
 8004a60:	f001 fae2 	bl	8006028 <abort>
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <__assert_func+0x38>)
 8004a66:	461c      	mov	r4, r3
 8004a68:	e7f3      	b.n	8004a52 <__assert_func+0x12>
 8004a6a:	bf00      	nop
 8004a6c:	2000000c 	.word	0x2000000c
 8004a70:	08006718 	.word	0x08006718
 8004a74:	08006725 	.word	0x08006725
 8004a78:	08006753 	.word	0x08006753

08004a7c <_close_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4d06      	ldr	r5, [pc, #24]	; (8004a98 <_close_r+0x1c>)
 8004a80:	2300      	movs	r3, #0
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	602b      	str	r3, [r5, #0]
 8004a88:	f7fc fe57 	bl	800173a <_close>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_close_r+0x1a>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_close_r+0x1a>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	20000128 	.word	0x20000128

08004a9c <fiprintf>:
 8004a9c:	b40e      	push	{r1, r2, r3}
 8004a9e:	b503      	push	{r0, r1, lr}
 8004aa0:	4601      	mov	r1, r0
 8004aa2:	ab03      	add	r3, sp, #12
 8004aa4:	4805      	ldr	r0, [pc, #20]	; (8004abc <fiprintf+0x20>)
 8004aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	f000 fc59 	bl	8005364 <_vfiprintf_r>
 8004ab2:	b002      	add	sp, #8
 8004ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ab8:	b003      	add	sp, #12
 8004aba:	4770      	bx	lr
 8004abc:	2000000c 	.word	0x2000000c

08004ac0 <_lseek_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d07      	ldr	r5, [pc, #28]	; (8004ae0 <_lseek_r+0x20>)
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	4608      	mov	r0, r1
 8004ac8:	4611      	mov	r1, r2
 8004aca:	2200      	movs	r2, #0
 8004acc:	602a      	str	r2, [r5, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f7fc fe5a 	bl	8001788 <_lseek>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_lseek_r+0x1e>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_lseek_r+0x1e>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	20000128 	.word	0x20000128

08004ae4 <malloc>:
 8004ae4:	4b02      	ldr	r3, [pc, #8]	; (8004af0 <malloc+0xc>)
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	f000 b86f 	b.w	8004bcc <_malloc_r>
 8004aee:	bf00      	nop
 8004af0:	2000000c 	.word	0x2000000c

08004af4 <_free_r>:
 8004af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004af6:	2900      	cmp	r1, #0
 8004af8:	d044      	beq.n	8004b84 <_free_r+0x90>
 8004afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004afe:	9001      	str	r0, [sp, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f1a1 0404 	sub.w	r4, r1, #4
 8004b06:	bfb8      	it	lt
 8004b08:	18e4      	addlt	r4, r4, r3
 8004b0a:	f001 fcdd 	bl	80064c8 <__malloc_lock>
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <_free_r+0x94>)
 8004b10:	9801      	ldr	r0, [sp, #4]
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	b933      	cbnz	r3, 8004b24 <_free_r+0x30>
 8004b16:	6063      	str	r3, [r4, #4]
 8004b18:	6014      	str	r4, [r2, #0]
 8004b1a:	b003      	add	sp, #12
 8004b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b20:	f001 bcd8 	b.w	80064d4 <__malloc_unlock>
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	d908      	bls.n	8004b3a <_free_r+0x46>
 8004b28:	6825      	ldr	r5, [r4, #0]
 8004b2a:	1961      	adds	r1, r4, r5
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	bf01      	itttt	eq
 8004b30:	6819      	ldreq	r1, [r3, #0]
 8004b32:	685b      	ldreq	r3, [r3, #4]
 8004b34:	1949      	addeq	r1, r1, r5
 8004b36:	6021      	streq	r1, [r4, #0]
 8004b38:	e7ed      	b.n	8004b16 <_free_r+0x22>
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	b10b      	cbz	r3, 8004b44 <_free_r+0x50>
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d9fa      	bls.n	8004b3a <_free_r+0x46>
 8004b44:	6811      	ldr	r1, [r2, #0]
 8004b46:	1855      	adds	r5, r2, r1
 8004b48:	42a5      	cmp	r5, r4
 8004b4a:	d10b      	bne.n	8004b64 <_free_r+0x70>
 8004b4c:	6824      	ldr	r4, [r4, #0]
 8004b4e:	4421      	add	r1, r4
 8004b50:	1854      	adds	r4, r2, r1
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	6011      	str	r1, [r2, #0]
 8004b56:	d1e0      	bne.n	8004b1a <_free_r+0x26>
 8004b58:	681c      	ldr	r4, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	6053      	str	r3, [r2, #4]
 8004b5e:	4421      	add	r1, r4
 8004b60:	6011      	str	r1, [r2, #0]
 8004b62:	e7da      	b.n	8004b1a <_free_r+0x26>
 8004b64:	d902      	bls.n	8004b6c <_free_r+0x78>
 8004b66:	230c      	movs	r3, #12
 8004b68:	6003      	str	r3, [r0, #0]
 8004b6a:	e7d6      	b.n	8004b1a <_free_r+0x26>
 8004b6c:	6825      	ldr	r5, [r4, #0]
 8004b6e:	1961      	adds	r1, r4, r5
 8004b70:	428b      	cmp	r3, r1
 8004b72:	bf04      	itt	eq
 8004b74:	6819      	ldreq	r1, [r3, #0]
 8004b76:	685b      	ldreq	r3, [r3, #4]
 8004b78:	6063      	str	r3, [r4, #4]
 8004b7a:	bf04      	itt	eq
 8004b7c:	1949      	addeq	r1, r1, r5
 8004b7e:	6021      	streq	r1, [r4, #0]
 8004b80:	6054      	str	r4, [r2, #4]
 8004b82:	e7ca      	b.n	8004b1a <_free_r+0x26>
 8004b84:	b003      	add	sp, #12
 8004b86:	bd30      	pop	{r4, r5, pc}
 8004b88:	20000120 	.word	0x20000120

08004b8c <sbrk_aligned>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	4e0e      	ldr	r6, [pc, #56]	; (8004bc8 <sbrk_aligned+0x3c>)
 8004b90:	460c      	mov	r4, r1
 8004b92:	6831      	ldr	r1, [r6, #0]
 8004b94:	4605      	mov	r5, r0
 8004b96:	b911      	cbnz	r1, 8004b9e <sbrk_aligned+0x12>
 8004b98:	f001 f80c 	bl	8005bb4 <_sbrk_r>
 8004b9c:	6030      	str	r0, [r6, #0]
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f001 f807 	bl	8005bb4 <_sbrk_r>
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	d00a      	beq.n	8004bc0 <sbrk_aligned+0x34>
 8004baa:	1cc4      	adds	r4, r0, #3
 8004bac:	f024 0403 	bic.w	r4, r4, #3
 8004bb0:	42a0      	cmp	r0, r4
 8004bb2:	d007      	beq.n	8004bc4 <sbrk_aligned+0x38>
 8004bb4:	1a21      	subs	r1, r4, r0
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f000 fffc 	bl	8005bb4 <_sbrk_r>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d101      	bne.n	8004bc4 <sbrk_aligned+0x38>
 8004bc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
 8004bc8:	20000124 	.word	0x20000124

08004bcc <_malloc_r>:
 8004bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd0:	1ccd      	adds	r5, r1, #3
 8004bd2:	f025 0503 	bic.w	r5, r5, #3
 8004bd6:	3508      	adds	r5, #8
 8004bd8:	2d0c      	cmp	r5, #12
 8004bda:	bf38      	it	cc
 8004bdc:	250c      	movcc	r5, #12
 8004bde:	2d00      	cmp	r5, #0
 8004be0:	4607      	mov	r7, r0
 8004be2:	db01      	blt.n	8004be8 <_malloc_r+0x1c>
 8004be4:	42a9      	cmp	r1, r5
 8004be6:	d905      	bls.n	8004bf4 <_malloc_r+0x28>
 8004be8:	230c      	movs	r3, #12
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	2600      	movs	r6, #0
 8004bee:	4630      	mov	r0, r6
 8004bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bf4:	4e2e      	ldr	r6, [pc, #184]	; (8004cb0 <_malloc_r+0xe4>)
 8004bf6:	f001 fc67 	bl	80064c8 <__malloc_lock>
 8004bfa:	6833      	ldr	r3, [r6, #0]
 8004bfc:	461c      	mov	r4, r3
 8004bfe:	bb34      	cbnz	r4, 8004c4e <_malloc_r+0x82>
 8004c00:	4629      	mov	r1, r5
 8004c02:	4638      	mov	r0, r7
 8004c04:	f7ff ffc2 	bl	8004b8c <sbrk_aligned>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	d14d      	bne.n	8004caa <_malloc_r+0xde>
 8004c0e:	6834      	ldr	r4, [r6, #0]
 8004c10:	4626      	mov	r6, r4
 8004c12:	2e00      	cmp	r6, #0
 8004c14:	d140      	bne.n	8004c98 <_malloc_r+0xcc>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	4631      	mov	r1, r6
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	eb04 0803 	add.w	r8, r4, r3
 8004c20:	f000 ffc8 	bl	8005bb4 <_sbrk_r>
 8004c24:	4580      	cmp	r8, r0
 8004c26:	d13a      	bne.n	8004c9e <_malloc_r+0xd2>
 8004c28:	6821      	ldr	r1, [r4, #0]
 8004c2a:	3503      	adds	r5, #3
 8004c2c:	1a6d      	subs	r5, r5, r1
 8004c2e:	f025 0503 	bic.w	r5, r5, #3
 8004c32:	3508      	adds	r5, #8
 8004c34:	2d0c      	cmp	r5, #12
 8004c36:	bf38      	it	cc
 8004c38:	250c      	movcc	r5, #12
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f7ff ffa5 	bl	8004b8c <sbrk_aligned>
 8004c42:	3001      	adds	r0, #1
 8004c44:	d02b      	beq.n	8004c9e <_malloc_r+0xd2>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	442b      	add	r3, r5
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	e00e      	b.n	8004c6c <_malloc_r+0xa0>
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	1b52      	subs	r2, r2, r5
 8004c52:	d41e      	bmi.n	8004c92 <_malloc_r+0xc6>
 8004c54:	2a0b      	cmp	r2, #11
 8004c56:	d916      	bls.n	8004c86 <_malloc_r+0xba>
 8004c58:	1961      	adds	r1, r4, r5
 8004c5a:	42a3      	cmp	r3, r4
 8004c5c:	6025      	str	r5, [r4, #0]
 8004c5e:	bf18      	it	ne
 8004c60:	6059      	strne	r1, [r3, #4]
 8004c62:	6863      	ldr	r3, [r4, #4]
 8004c64:	bf08      	it	eq
 8004c66:	6031      	streq	r1, [r6, #0]
 8004c68:	5162      	str	r2, [r4, r5]
 8004c6a:	604b      	str	r3, [r1, #4]
 8004c6c:	4638      	mov	r0, r7
 8004c6e:	f104 060b 	add.w	r6, r4, #11
 8004c72:	f001 fc2f 	bl	80064d4 <__malloc_unlock>
 8004c76:	f026 0607 	bic.w	r6, r6, #7
 8004c7a:	1d23      	adds	r3, r4, #4
 8004c7c:	1af2      	subs	r2, r6, r3
 8004c7e:	d0b6      	beq.n	8004bee <_malloc_r+0x22>
 8004c80:	1b9b      	subs	r3, r3, r6
 8004c82:	50a3      	str	r3, [r4, r2]
 8004c84:	e7b3      	b.n	8004bee <_malloc_r+0x22>
 8004c86:	6862      	ldr	r2, [r4, #4]
 8004c88:	42a3      	cmp	r3, r4
 8004c8a:	bf0c      	ite	eq
 8004c8c:	6032      	streq	r2, [r6, #0]
 8004c8e:	605a      	strne	r2, [r3, #4]
 8004c90:	e7ec      	b.n	8004c6c <_malloc_r+0xa0>
 8004c92:	4623      	mov	r3, r4
 8004c94:	6864      	ldr	r4, [r4, #4]
 8004c96:	e7b2      	b.n	8004bfe <_malloc_r+0x32>
 8004c98:	4634      	mov	r4, r6
 8004c9a:	6876      	ldr	r6, [r6, #4]
 8004c9c:	e7b9      	b.n	8004c12 <_malloc_r+0x46>
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	f001 fc16 	bl	80064d4 <__malloc_unlock>
 8004ca8:	e7a1      	b.n	8004bee <_malloc_r+0x22>
 8004caa:	6025      	str	r5, [r4, #0]
 8004cac:	e7de      	b.n	8004c6c <_malloc_r+0xa0>
 8004cae:	bf00      	nop
 8004cb0:	20000120 	.word	0x20000120

08004cb4 <__ssputs_r>:
 8004cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	688e      	ldr	r6, [r1, #8]
 8004cba:	429e      	cmp	r6, r3
 8004cbc:	4682      	mov	sl, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4690      	mov	r8, r2
 8004cc2:	461f      	mov	r7, r3
 8004cc4:	d838      	bhi.n	8004d38 <__ssputs_r+0x84>
 8004cc6:	898a      	ldrh	r2, [r1, #12]
 8004cc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ccc:	d032      	beq.n	8004d34 <__ssputs_r+0x80>
 8004cce:	6825      	ldr	r5, [r4, #0]
 8004cd0:	6909      	ldr	r1, [r1, #16]
 8004cd2:	eba5 0901 	sub.w	r9, r5, r1
 8004cd6:	6965      	ldr	r5, [r4, #20]
 8004cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	444b      	add	r3, r9
 8004ce4:	106d      	asrs	r5, r5, #1
 8004ce6:	429d      	cmp	r5, r3
 8004ce8:	bf38      	it	cc
 8004cea:	461d      	movcc	r5, r3
 8004cec:	0553      	lsls	r3, r2, #21
 8004cee:	d531      	bpl.n	8004d54 <__ssputs_r+0xa0>
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7ff ff6b 	bl	8004bcc <_malloc_r>
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	b950      	cbnz	r0, 8004d10 <__ssputs_r+0x5c>
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	f8ca 3000 	str.w	r3, [sl]
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	6921      	ldr	r1, [r4, #16]
 8004d12:	464a      	mov	r2, r9
 8004d14:	f001 fbb0 	bl	8006478 <memcpy>
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d22:	81a3      	strh	r3, [r4, #12]
 8004d24:	6126      	str	r6, [r4, #16]
 8004d26:	6165      	str	r5, [r4, #20]
 8004d28:	444e      	add	r6, r9
 8004d2a:	eba5 0509 	sub.w	r5, r5, r9
 8004d2e:	6026      	str	r6, [r4, #0]
 8004d30:	60a5      	str	r5, [r4, #8]
 8004d32:	463e      	mov	r6, r7
 8004d34:	42be      	cmp	r6, r7
 8004d36:	d900      	bls.n	8004d3a <__ssputs_r+0x86>
 8004d38:	463e      	mov	r6, r7
 8004d3a:	6820      	ldr	r0, [r4, #0]
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	4641      	mov	r1, r8
 8004d40:	f001 fba8 	bl	8006494 <memmove>
 8004d44:	68a3      	ldr	r3, [r4, #8]
 8004d46:	1b9b      	subs	r3, r3, r6
 8004d48:	60a3      	str	r3, [r4, #8]
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	4433      	add	r3, r6
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	2000      	movs	r0, #0
 8004d52:	e7db      	b.n	8004d0c <__ssputs_r+0x58>
 8004d54:	462a      	mov	r2, r5
 8004d56:	f001 fbc3 	bl	80064e0 <_realloc_r>
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d1e1      	bne.n	8004d24 <__ssputs_r+0x70>
 8004d60:	6921      	ldr	r1, [r4, #16]
 8004d62:	4650      	mov	r0, sl
 8004d64:	f7ff fec6 	bl	8004af4 <_free_r>
 8004d68:	e7c7      	b.n	8004cfa <__ssputs_r+0x46>
	...

08004d6c <_svfiprintf_r>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	4698      	mov	r8, r3
 8004d72:	898b      	ldrh	r3, [r1, #12]
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	b09d      	sub	sp, #116	; 0x74
 8004d78:	4607      	mov	r7, r0
 8004d7a:	460d      	mov	r5, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	d50e      	bpl.n	8004d9e <_svfiprintf_r+0x32>
 8004d80:	690b      	ldr	r3, [r1, #16]
 8004d82:	b963      	cbnz	r3, 8004d9e <_svfiprintf_r+0x32>
 8004d84:	2140      	movs	r1, #64	; 0x40
 8004d86:	f7ff ff21 	bl	8004bcc <_malloc_r>
 8004d8a:	6028      	str	r0, [r5, #0]
 8004d8c:	6128      	str	r0, [r5, #16]
 8004d8e:	b920      	cbnz	r0, 8004d9a <_svfiprintf_r+0x2e>
 8004d90:	230c      	movs	r3, #12
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d98:	e0d1      	b.n	8004f3e <_svfiprintf_r+0x1d2>
 8004d9a:	2340      	movs	r3, #64	; 0x40
 8004d9c:	616b      	str	r3, [r5, #20]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	9309      	str	r3, [sp, #36]	; 0x24
 8004da2:	2320      	movs	r3, #32
 8004da4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dac:	2330      	movs	r3, #48	; 0x30
 8004dae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f58 <_svfiprintf_r+0x1ec>
 8004db2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004db6:	f04f 0901 	mov.w	r9, #1
 8004dba:	4623      	mov	r3, r4
 8004dbc:	469a      	mov	sl, r3
 8004dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc2:	b10a      	cbz	r2, 8004dc8 <_svfiprintf_r+0x5c>
 8004dc4:	2a25      	cmp	r2, #37	; 0x25
 8004dc6:	d1f9      	bne.n	8004dbc <_svfiprintf_r+0x50>
 8004dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004dcc:	d00b      	beq.n	8004de6 <_svfiprintf_r+0x7a>
 8004dce:	465b      	mov	r3, fp
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	f7ff ff6d 	bl	8004cb4 <__ssputs_r>
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f000 80aa 	beq.w	8004f34 <_svfiprintf_r+0x1c8>
 8004de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de2:	445a      	add	r2, fp
 8004de4:	9209      	str	r2, [sp, #36]	; 0x24
 8004de6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80a2 	beq.w	8004f34 <_svfiprintf_r+0x1c8>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dfa:	f10a 0a01 	add.w	sl, sl, #1
 8004dfe:	9304      	str	r3, [sp, #16]
 8004e00:	9307      	str	r3, [sp, #28]
 8004e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e06:	931a      	str	r3, [sp, #104]	; 0x68
 8004e08:	4654      	mov	r4, sl
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e10:	4851      	ldr	r0, [pc, #324]	; (8004f58 <_svfiprintf_r+0x1ec>)
 8004e12:	f7fb f9f5 	bl	8000200 <memchr>
 8004e16:	9a04      	ldr	r2, [sp, #16]
 8004e18:	b9d8      	cbnz	r0, 8004e52 <_svfiprintf_r+0xe6>
 8004e1a:	06d0      	lsls	r0, r2, #27
 8004e1c:	bf44      	itt	mi
 8004e1e:	2320      	movmi	r3, #32
 8004e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e24:	0711      	lsls	r1, r2, #28
 8004e26:	bf44      	itt	mi
 8004e28:	232b      	movmi	r3, #43	; 0x2b
 8004e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e32:	2b2a      	cmp	r3, #42	; 0x2a
 8004e34:	d015      	beq.n	8004e62 <_svfiprintf_r+0xf6>
 8004e36:	9a07      	ldr	r2, [sp, #28]
 8004e38:	4654      	mov	r4, sl
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f04f 0c0a 	mov.w	ip, #10
 8004e40:	4621      	mov	r1, r4
 8004e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e46:	3b30      	subs	r3, #48	; 0x30
 8004e48:	2b09      	cmp	r3, #9
 8004e4a:	d94e      	bls.n	8004eea <_svfiprintf_r+0x17e>
 8004e4c:	b1b0      	cbz	r0, 8004e7c <_svfiprintf_r+0x110>
 8004e4e:	9207      	str	r2, [sp, #28]
 8004e50:	e014      	b.n	8004e7c <_svfiprintf_r+0x110>
 8004e52:	eba0 0308 	sub.w	r3, r0, r8
 8004e56:	fa09 f303 	lsl.w	r3, r9, r3
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	9304      	str	r3, [sp, #16]
 8004e5e:	46a2      	mov	sl, r4
 8004e60:	e7d2      	b.n	8004e08 <_svfiprintf_r+0x9c>
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	1d19      	adds	r1, r3, #4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	9103      	str	r1, [sp, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bfbb      	ittet	lt
 8004e6e:	425b      	neglt	r3, r3
 8004e70:	f042 0202 	orrlt.w	r2, r2, #2
 8004e74:	9307      	strge	r3, [sp, #28]
 8004e76:	9307      	strlt	r3, [sp, #28]
 8004e78:	bfb8      	it	lt
 8004e7a:	9204      	strlt	r2, [sp, #16]
 8004e7c:	7823      	ldrb	r3, [r4, #0]
 8004e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e80:	d10c      	bne.n	8004e9c <_svfiprintf_r+0x130>
 8004e82:	7863      	ldrb	r3, [r4, #1]
 8004e84:	2b2a      	cmp	r3, #42	; 0x2a
 8004e86:	d135      	bne.n	8004ef4 <_svfiprintf_r+0x188>
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	9203      	str	r2, [sp, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bfb8      	it	lt
 8004e94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e98:	3402      	adds	r4, #2
 8004e9a:	9305      	str	r3, [sp, #20]
 8004e9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f68 <_svfiprintf_r+0x1fc>
 8004ea0:	7821      	ldrb	r1, [r4, #0]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	f7fb f9ab 	bl	8000200 <memchr>
 8004eaa:	b140      	cbz	r0, 8004ebe <_svfiprintf_r+0x152>
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	eba0 000a 	sub.w	r0, r0, sl
 8004eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8004eb6:	9b04      	ldr	r3, [sp, #16]
 8004eb8:	4303      	orrs	r3, r0
 8004eba:	3401      	adds	r4, #1
 8004ebc:	9304      	str	r3, [sp, #16]
 8004ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec2:	4826      	ldr	r0, [pc, #152]	; (8004f5c <_svfiprintf_r+0x1f0>)
 8004ec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ec8:	2206      	movs	r2, #6
 8004eca:	f7fb f999 	bl	8000200 <memchr>
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d038      	beq.n	8004f44 <_svfiprintf_r+0x1d8>
 8004ed2:	4b23      	ldr	r3, [pc, #140]	; (8004f60 <_svfiprintf_r+0x1f4>)
 8004ed4:	bb1b      	cbnz	r3, 8004f1e <_svfiprintf_r+0x1b2>
 8004ed6:	9b03      	ldr	r3, [sp, #12]
 8004ed8:	3307      	adds	r3, #7
 8004eda:	f023 0307 	bic.w	r3, r3, #7
 8004ede:	3308      	adds	r3, #8
 8004ee0:	9303      	str	r3, [sp, #12]
 8004ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee4:	4433      	add	r3, r6
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	e767      	b.n	8004dba <_svfiprintf_r+0x4e>
 8004eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eee:	460c      	mov	r4, r1
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	e7a5      	b.n	8004e40 <_svfiprintf_r+0xd4>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	3401      	adds	r4, #1
 8004ef8:	9305      	str	r3, [sp, #20]
 8004efa:	4619      	mov	r1, r3
 8004efc:	f04f 0c0a 	mov.w	ip, #10
 8004f00:	4620      	mov	r0, r4
 8004f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f06:	3a30      	subs	r2, #48	; 0x30
 8004f08:	2a09      	cmp	r2, #9
 8004f0a:	d903      	bls.n	8004f14 <_svfiprintf_r+0x1a8>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0c5      	beq.n	8004e9c <_svfiprintf_r+0x130>
 8004f10:	9105      	str	r1, [sp, #20]
 8004f12:	e7c3      	b.n	8004e9c <_svfiprintf_r+0x130>
 8004f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f18:	4604      	mov	r4, r0
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e7f0      	b.n	8004f00 <_svfiprintf_r+0x194>
 8004f1e:	ab03      	add	r3, sp, #12
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	462a      	mov	r2, r5
 8004f24:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <_svfiprintf_r+0x1f8>)
 8004f26:	a904      	add	r1, sp, #16
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f3af 8000 	nop.w
 8004f2e:	1c42      	adds	r2, r0, #1
 8004f30:	4606      	mov	r6, r0
 8004f32:	d1d6      	bne.n	8004ee2 <_svfiprintf_r+0x176>
 8004f34:	89ab      	ldrh	r3, [r5, #12]
 8004f36:	065b      	lsls	r3, r3, #25
 8004f38:	f53f af2c 	bmi.w	8004d94 <_svfiprintf_r+0x28>
 8004f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f3e:	b01d      	add	sp, #116	; 0x74
 8004f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f44:	ab03      	add	r3, sp, #12
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	462a      	mov	r2, r5
 8004f4a:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <_svfiprintf_r+0x1f8>)
 8004f4c:	a904      	add	r1, sp, #16
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f000 fba6 	bl	80056a0 <_printf_i>
 8004f54:	e7eb      	b.n	8004f2e <_svfiprintf_r+0x1c2>
 8004f56:	bf00      	nop
 8004f58:	08006754 	.word	0x08006754
 8004f5c:	0800675e 	.word	0x0800675e
 8004f60:	00000000 	.word	0x00000000
 8004f64:	08004cb5 	.word	0x08004cb5
 8004f68:	0800675a 	.word	0x0800675a

08004f6c <_sungetc_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	1c4b      	adds	r3, r1, #1
 8004f70:	4614      	mov	r4, r2
 8004f72:	d103      	bne.n	8004f7c <_sungetc_r+0x10>
 8004f74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004f78:	4628      	mov	r0, r5
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	8993      	ldrh	r3, [r2, #12]
 8004f7e:	f023 0320 	bic.w	r3, r3, #32
 8004f82:	8193      	strh	r3, [r2, #12]
 8004f84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f86:	6852      	ldr	r2, [r2, #4]
 8004f88:	b2cd      	uxtb	r5, r1
 8004f8a:	b18b      	cbz	r3, 8004fb0 <_sungetc_r+0x44>
 8004f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	dd08      	ble.n	8004fa4 <_sungetc_r+0x38>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	1e5a      	subs	r2, r3, #1
 8004f96:	6022      	str	r2, [r4, #0]
 8004f98:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004f9c:	6863      	ldr	r3, [r4, #4]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	6063      	str	r3, [r4, #4]
 8004fa2:	e7e9      	b.n	8004f78 <_sungetc_r+0xc>
 8004fa4:	4621      	mov	r1, r4
 8004fa6:	f000 ff45 	bl	8005e34 <__submore>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d0f1      	beq.n	8004f92 <_sungetc_r+0x26>
 8004fae:	e7e1      	b.n	8004f74 <_sungetc_r+0x8>
 8004fb0:	6921      	ldr	r1, [r4, #16]
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	b151      	cbz	r1, 8004fcc <_sungetc_r+0x60>
 8004fb6:	4299      	cmp	r1, r3
 8004fb8:	d208      	bcs.n	8004fcc <_sungetc_r+0x60>
 8004fba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004fbe:	42a9      	cmp	r1, r5
 8004fc0:	d104      	bne.n	8004fcc <_sungetc_r+0x60>
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	3201      	adds	r2, #1
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	6062      	str	r2, [r4, #4]
 8004fca:	e7d5      	b.n	8004f78 <_sungetc_r+0xc>
 8004fcc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fda:	4623      	mov	r3, r4
 8004fdc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e7dc      	b.n	8004fa0 <_sungetc_r+0x34>

08004fe6 <__ssrefill_r>:
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	460c      	mov	r4, r1
 8004fea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004fec:	b169      	cbz	r1, 800500a <__ssrefill_r+0x24>
 8004fee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	d001      	beq.n	8004ffa <__ssrefill_r+0x14>
 8004ff6:	f7ff fd7d 	bl	8004af4 <_free_r>
 8004ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	2000      	movs	r0, #0
 8005000:	6360      	str	r0, [r4, #52]	; 0x34
 8005002:	b113      	cbz	r3, 800500a <__ssrefill_r+0x24>
 8005004:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	bd10      	pop	{r4, pc}
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	2300      	movs	r3, #0
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	89a3      	ldrh	r3, [r4, #12]
 8005014:	f043 0320 	orr.w	r3, r3, #32
 8005018:	81a3      	strh	r3, [r4, #12]
 800501a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800501e:	e7f3      	b.n	8005008 <__ssrefill_r+0x22>

08005020 <__ssvfiscanf_r>:
 8005020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	460c      	mov	r4, r1
 8005026:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800502a:	2100      	movs	r1, #0
 800502c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005030:	49a6      	ldr	r1, [pc, #664]	; (80052cc <__ssvfiscanf_r+0x2ac>)
 8005032:	91a0      	str	r1, [sp, #640]	; 0x280
 8005034:	f10d 0804 	add.w	r8, sp, #4
 8005038:	49a5      	ldr	r1, [pc, #660]	; (80052d0 <__ssvfiscanf_r+0x2b0>)
 800503a:	4fa6      	ldr	r7, [pc, #664]	; (80052d4 <__ssvfiscanf_r+0x2b4>)
 800503c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80052d8 <__ssvfiscanf_r+0x2b8>
 8005040:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005044:	4606      	mov	r6, r0
 8005046:	91a1      	str	r1, [sp, #644]	; 0x284
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	7813      	ldrb	r3, [r2, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 815a 	beq.w	8005306 <__ssvfiscanf_r+0x2e6>
 8005052:	5dd9      	ldrb	r1, [r3, r7]
 8005054:	f011 0108 	ands.w	r1, r1, #8
 8005058:	f102 0501 	add.w	r5, r2, #1
 800505c:	d019      	beq.n	8005092 <__ssvfiscanf_r+0x72>
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	dd0f      	ble.n	8005084 <__ssvfiscanf_r+0x64>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	781a      	ldrb	r2, [r3, #0]
 8005068:	5cba      	ldrb	r2, [r7, r2]
 800506a:	0712      	lsls	r2, r2, #28
 800506c:	d401      	bmi.n	8005072 <__ssvfiscanf_r+0x52>
 800506e:	462a      	mov	r2, r5
 8005070:	e7eb      	b.n	800504a <__ssvfiscanf_r+0x2a>
 8005072:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005074:	3201      	adds	r2, #1
 8005076:	9245      	str	r2, [sp, #276]	; 0x114
 8005078:	6862      	ldr	r2, [r4, #4]
 800507a:	3301      	adds	r3, #1
 800507c:	3a01      	subs	r2, #1
 800507e:	6062      	str	r2, [r4, #4]
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	e7ec      	b.n	800505e <__ssvfiscanf_r+0x3e>
 8005084:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005086:	4621      	mov	r1, r4
 8005088:	4630      	mov	r0, r6
 800508a:	4798      	blx	r3
 800508c:	2800      	cmp	r0, #0
 800508e:	d0e9      	beq.n	8005064 <__ssvfiscanf_r+0x44>
 8005090:	e7ed      	b.n	800506e <__ssvfiscanf_r+0x4e>
 8005092:	2b25      	cmp	r3, #37	; 0x25
 8005094:	d012      	beq.n	80050bc <__ssvfiscanf_r+0x9c>
 8005096:	469a      	mov	sl, r3
 8005098:	6863      	ldr	r3, [r4, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f340 8091 	ble.w	80051c2 <__ssvfiscanf_r+0x1a2>
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	7813      	ldrb	r3, [r2, #0]
 80050a4:	4553      	cmp	r3, sl
 80050a6:	f040 812e 	bne.w	8005306 <__ssvfiscanf_r+0x2e6>
 80050aa:	6863      	ldr	r3, [r4, #4]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	6063      	str	r3, [r4, #4]
 80050b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80050b2:	3201      	adds	r2, #1
 80050b4:	3301      	adds	r3, #1
 80050b6:	6022      	str	r2, [r4, #0]
 80050b8:	9345      	str	r3, [sp, #276]	; 0x114
 80050ba:	e7d8      	b.n	800506e <__ssvfiscanf_r+0x4e>
 80050bc:	9141      	str	r1, [sp, #260]	; 0x104
 80050be:	9143      	str	r1, [sp, #268]	; 0x10c
 80050c0:	7853      	ldrb	r3, [r2, #1]
 80050c2:	2b2a      	cmp	r3, #42	; 0x2a
 80050c4:	bf02      	ittt	eq
 80050c6:	2310      	moveq	r3, #16
 80050c8:	1c95      	addeq	r5, r2, #2
 80050ca:	9341      	streq	r3, [sp, #260]	; 0x104
 80050cc:	220a      	movs	r2, #10
 80050ce:	46aa      	mov	sl, r5
 80050d0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80050d4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d91d      	bls.n	8005118 <__ssvfiscanf_r+0xf8>
 80050dc:	487e      	ldr	r0, [pc, #504]	; (80052d8 <__ssvfiscanf_r+0x2b8>)
 80050de:	2203      	movs	r2, #3
 80050e0:	f7fb f88e 	bl	8000200 <memchr>
 80050e4:	b140      	cbz	r0, 80050f8 <__ssvfiscanf_r+0xd8>
 80050e6:	2301      	movs	r3, #1
 80050e8:	eba0 0009 	sub.w	r0, r0, r9
 80050ec:	fa03 f000 	lsl.w	r0, r3, r0
 80050f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80050f2:	4318      	orrs	r0, r3
 80050f4:	9041      	str	r0, [sp, #260]	; 0x104
 80050f6:	4655      	mov	r5, sl
 80050f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050fc:	2b78      	cmp	r3, #120	; 0x78
 80050fe:	d806      	bhi.n	800510e <__ssvfiscanf_r+0xee>
 8005100:	2b57      	cmp	r3, #87	; 0x57
 8005102:	d810      	bhi.n	8005126 <__ssvfiscanf_r+0x106>
 8005104:	2b25      	cmp	r3, #37	; 0x25
 8005106:	d0c6      	beq.n	8005096 <__ssvfiscanf_r+0x76>
 8005108:	d856      	bhi.n	80051b8 <__ssvfiscanf_r+0x198>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d064      	beq.n	80051d8 <__ssvfiscanf_r+0x1b8>
 800510e:	2303      	movs	r3, #3
 8005110:	9347      	str	r3, [sp, #284]	; 0x11c
 8005112:	230a      	movs	r3, #10
 8005114:	9342      	str	r3, [sp, #264]	; 0x108
 8005116:	e071      	b.n	80051fc <__ssvfiscanf_r+0x1dc>
 8005118:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800511a:	fb02 1103 	mla	r1, r2, r3, r1
 800511e:	3930      	subs	r1, #48	; 0x30
 8005120:	9143      	str	r1, [sp, #268]	; 0x10c
 8005122:	4655      	mov	r5, sl
 8005124:	e7d3      	b.n	80050ce <__ssvfiscanf_r+0xae>
 8005126:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800512a:	2a20      	cmp	r2, #32
 800512c:	d8ef      	bhi.n	800510e <__ssvfiscanf_r+0xee>
 800512e:	a101      	add	r1, pc, #4	; (adr r1, 8005134 <__ssvfiscanf_r+0x114>)
 8005130:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005134:	080051e7 	.word	0x080051e7
 8005138:	0800510f 	.word	0x0800510f
 800513c:	0800510f 	.word	0x0800510f
 8005140:	08005245 	.word	0x08005245
 8005144:	0800510f 	.word	0x0800510f
 8005148:	0800510f 	.word	0x0800510f
 800514c:	0800510f 	.word	0x0800510f
 8005150:	0800510f 	.word	0x0800510f
 8005154:	0800510f 	.word	0x0800510f
 8005158:	0800510f 	.word	0x0800510f
 800515c:	0800510f 	.word	0x0800510f
 8005160:	0800525b 	.word	0x0800525b
 8005164:	08005231 	.word	0x08005231
 8005168:	080051bf 	.word	0x080051bf
 800516c:	080051bf 	.word	0x080051bf
 8005170:	080051bf 	.word	0x080051bf
 8005174:	0800510f 	.word	0x0800510f
 8005178:	08005235 	.word	0x08005235
 800517c:	0800510f 	.word	0x0800510f
 8005180:	0800510f 	.word	0x0800510f
 8005184:	0800510f 	.word	0x0800510f
 8005188:	0800510f 	.word	0x0800510f
 800518c:	0800526b 	.word	0x0800526b
 8005190:	0800523d 	.word	0x0800523d
 8005194:	080051df 	.word	0x080051df
 8005198:	0800510f 	.word	0x0800510f
 800519c:	0800510f 	.word	0x0800510f
 80051a0:	08005267 	.word	0x08005267
 80051a4:	0800510f 	.word	0x0800510f
 80051a8:	08005231 	.word	0x08005231
 80051ac:	0800510f 	.word	0x0800510f
 80051b0:	0800510f 	.word	0x0800510f
 80051b4:	080051e7 	.word	0x080051e7
 80051b8:	3b45      	subs	r3, #69	; 0x45
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d8a7      	bhi.n	800510e <__ssvfiscanf_r+0xee>
 80051be:	2305      	movs	r3, #5
 80051c0:	e01b      	b.n	80051fa <__ssvfiscanf_r+0x1da>
 80051c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80051c4:	4621      	mov	r1, r4
 80051c6:	4630      	mov	r0, r6
 80051c8:	4798      	blx	r3
 80051ca:	2800      	cmp	r0, #0
 80051cc:	f43f af68 	beq.w	80050a0 <__ssvfiscanf_r+0x80>
 80051d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80051d2:	2800      	cmp	r0, #0
 80051d4:	f040 808d 	bne.w	80052f2 <__ssvfiscanf_r+0x2d2>
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051dc:	e08f      	b.n	80052fe <__ssvfiscanf_r+0x2de>
 80051de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80051e0:	f042 0220 	orr.w	r2, r2, #32
 80051e4:	9241      	str	r2, [sp, #260]	; 0x104
 80051e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80051e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ec:	9241      	str	r2, [sp, #260]	; 0x104
 80051ee:	2210      	movs	r2, #16
 80051f0:	2b6f      	cmp	r3, #111	; 0x6f
 80051f2:	9242      	str	r2, [sp, #264]	; 0x108
 80051f4:	bf34      	ite	cc
 80051f6:	2303      	movcc	r3, #3
 80051f8:	2304      	movcs	r3, #4
 80051fa:	9347      	str	r3, [sp, #284]	; 0x11c
 80051fc:	6863      	ldr	r3, [r4, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dd42      	ble.n	8005288 <__ssvfiscanf_r+0x268>
 8005202:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005204:	0659      	lsls	r1, r3, #25
 8005206:	d404      	bmi.n	8005212 <__ssvfiscanf_r+0x1f2>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	5cba      	ldrb	r2, [r7, r2]
 800520e:	0712      	lsls	r2, r2, #28
 8005210:	d441      	bmi.n	8005296 <__ssvfiscanf_r+0x276>
 8005212:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005214:	2b02      	cmp	r3, #2
 8005216:	dc50      	bgt.n	80052ba <__ssvfiscanf_r+0x29a>
 8005218:	466b      	mov	r3, sp
 800521a:	4622      	mov	r2, r4
 800521c:	a941      	add	r1, sp, #260	; 0x104
 800521e:	4630      	mov	r0, r6
 8005220:	f000 fb64 	bl	80058ec <_scanf_chars>
 8005224:	2801      	cmp	r0, #1
 8005226:	d06e      	beq.n	8005306 <__ssvfiscanf_r+0x2e6>
 8005228:	2802      	cmp	r0, #2
 800522a:	f47f af20 	bne.w	800506e <__ssvfiscanf_r+0x4e>
 800522e:	e7cf      	b.n	80051d0 <__ssvfiscanf_r+0x1b0>
 8005230:	220a      	movs	r2, #10
 8005232:	e7dd      	b.n	80051f0 <__ssvfiscanf_r+0x1d0>
 8005234:	2300      	movs	r3, #0
 8005236:	9342      	str	r3, [sp, #264]	; 0x108
 8005238:	2303      	movs	r3, #3
 800523a:	e7de      	b.n	80051fa <__ssvfiscanf_r+0x1da>
 800523c:	2308      	movs	r3, #8
 800523e:	9342      	str	r3, [sp, #264]	; 0x108
 8005240:	2304      	movs	r3, #4
 8005242:	e7da      	b.n	80051fa <__ssvfiscanf_r+0x1da>
 8005244:	4629      	mov	r1, r5
 8005246:	4640      	mov	r0, r8
 8005248:	f000 fcc4 	bl	8005bd4 <__sccl>
 800524c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800524e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005252:	9341      	str	r3, [sp, #260]	; 0x104
 8005254:	4605      	mov	r5, r0
 8005256:	2301      	movs	r3, #1
 8005258:	e7cf      	b.n	80051fa <__ssvfiscanf_r+0x1da>
 800525a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800525c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005260:	9341      	str	r3, [sp, #260]	; 0x104
 8005262:	2300      	movs	r3, #0
 8005264:	e7c9      	b.n	80051fa <__ssvfiscanf_r+0x1da>
 8005266:	2302      	movs	r3, #2
 8005268:	e7c7      	b.n	80051fa <__ssvfiscanf_r+0x1da>
 800526a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800526c:	06c3      	lsls	r3, r0, #27
 800526e:	f53f aefe 	bmi.w	800506e <__ssvfiscanf_r+0x4e>
 8005272:	9b00      	ldr	r3, [sp, #0]
 8005274:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005276:	1d19      	adds	r1, r3, #4
 8005278:	9100      	str	r1, [sp, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f010 0f01 	tst.w	r0, #1
 8005280:	bf14      	ite	ne
 8005282:	801a      	strhne	r2, [r3, #0]
 8005284:	601a      	streq	r2, [r3, #0]
 8005286:	e6f2      	b.n	800506e <__ssvfiscanf_r+0x4e>
 8005288:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800528a:	4621      	mov	r1, r4
 800528c:	4630      	mov	r0, r6
 800528e:	4798      	blx	r3
 8005290:	2800      	cmp	r0, #0
 8005292:	d0b6      	beq.n	8005202 <__ssvfiscanf_r+0x1e2>
 8005294:	e79c      	b.n	80051d0 <__ssvfiscanf_r+0x1b0>
 8005296:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005298:	3201      	adds	r2, #1
 800529a:	9245      	str	r2, [sp, #276]	; 0x114
 800529c:	6862      	ldr	r2, [r4, #4]
 800529e:	3a01      	subs	r2, #1
 80052a0:	2a00      	cmp	r2, #0
 80052a2:	6062      	str	r2, [r4, #4]
 80052a4:	dd02      	ble.n	80052ac <__ssvfiscanf_r+0x28c>
 80052a6:	3301      	adds	r3, #1
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	e7ad      	b.n	8005208 <__ssvfiscanf_r+0x1e8>
 80052ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052ae:	4621      	mov	r1, r4
 80052b0:	4630      	mov	r0, r6
 80052b2:	4798      	blx	r3
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d0a7      	beq.n	8005208 <__ssvfiscanf_r+0x1e8>
 80052b8:	e78a      	b.n	80051d0 <__ssvfiscanf_r+0x1b0>
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	dc0e      	bgt.n	80052dc <__ssvfiscanf_r+0x2bc>
 80052be:	466b      	mov	r3, sp
 80052c0:	4622      	mov	r2, r4
 80052c2:	a941      	add	r1, sp, #260	; 0x104
 80052c4:	4630      	mov	r0, r6
 80052c6:	f000 fb6b 	bl	80059a0 <_scanf_i>
 80052ca:	e7ab      	b.n	8005224 <__ssvfiscanf_r+0x204>
 80052cc:	08004f6d 	.word	0x08004f6d
 80052d0:	08004fe7 	.word	0x08004fe7
 80052d4:	080067a3 	.word	0x080067a3
 80052d8:	0800675a 	.word	0x0800675a
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <__ssvfiscanf_r+0x2ec>)
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f43f aec5 	beq.w	800506e <__ssvfiscanf_r+0x4e>
 80052e4:	466b      	mov	r3, sp
 80052e6:	4622      	mov	r2, r4
 80052e8:	a941      	add	r1, sp, #260	; 0x104
 80052ea:	4630      	mov	r0, r6
 80052ec:	f3af 8000 	nop.w
 80052f0:	e798      	b.n	8005224 <__ssvfiscanf_r+0x204>
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052f8:	bf18      	it	ne
 80052fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80052fe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005306:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005308:	e7f9      	b.n	80052fe <__ssvfiscanf_r+0x2de>
 800530a:	bf00      	nop
 800530c:	00000000 	.word	0x00000000

08005310 <__sfputc_r>:
 8005310:	6893      	ldr	r3, [r2, #8]
 8005312:	3b01      	subs	r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	b410      	push	{r4}
 8005318:	6093      	str	r3, [r2, #8]
 800531a:	da08      	bge.n	800532e <__sfputc_r+0x1e>
 800531c:	6994      	ldr	r4, [r2, #24]
 800531e:	42a3      	cmp	r3, r4
 8005320:	db01      	blt.n	8005326 <__sfputc_r+0x16>
 8005322:	290a      	cmp	r1, #10
 8005324:	d103      	bne.n	800532e <__sfputc_r+0x1e>
 8005326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800532a:	f000 bdbd 	b.w	8005ea8 <__swbuf_r>
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	1c58      	adds	r0, r3, #1
 8005332:	6010      	str	r0, [r2, #0]
 8005334:	7019      	strb	r1, [r3, #0]
 8005336:	4608      	mov	r0, r1
 8005338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800533c:	4770      	bx	lr

0800533e <__sfputs_r>:
 800533e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005340:	4606      	mov	r6, r0
 8005342:	460f      	mov	r7, r1
 8005344:	4614      	mov	r4, r2
 8005346:	18d5      	adds	r5, r2, r3
 8005348:	42ac      	cmp	r4, r5
 800534a:	d101      	bne.n	8005350 <__sfputs_r+0x12>
 800534c:	2000      	movs	r0, #0
 800534e:	e007      	b.n	8005360 <__sfputs_r+0x22>
 8005350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005354:	463a      	mov	r2, r7
 8005356:	4630      	mov	r0, r6
 8005358:	f7ff ffda 	bl	8005310 <__sfputc_r>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d1f3      	bne.n	8005348 <__sfputs_r+0xa>
 8005360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005364 <_vfiprintf_r>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	460d      	mov	r5, r1
 800536a:	b09d      	sub	sp, #116	; 0x74
 800536c:	4614      	mov	r4, r2
 800536e:	4698      	mov	r8, r3
 8005370:	4606      	mov	r6, r0
 8005372:	b118      	cbz	r0, 800537c <_vfiprintf_r+0x18>
 8005374:	6983      	ldr	r3, [r0, #24]
 8005376:	b90b      	cbnz	r3, 800537c <_vfiprintf_r+0x18>
 8005378:	f000 ff78 	bl	800626c <__sinit>
 800537c:	4b89      	ldr	r3, [pc, #548]	; (80055a4 <_vfiprintf_r+0x240>)
 800537e:	429d      	cmp	r5, r3
 8005380:	d11b      	bne.n	80053ba <_vfiprintf_r+0x56>
 8005382:	6875      	ldr	r5, [r6, #4]
 8005384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005386:	07d9      	lsls	r1, r3, #31
 8005388:	d405      	bmi.n	8005396 <_vfiprintf_r+0x32>
 800538a:	89ab      	ldrh	r3, [r5, #12]
 800538c:	059a      	lsls	r2, r3, #22
 800538e:	d402      	bmi.n	8005396 <_vfiprintf_r+0x32>
 8005390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005392:	f001 f809 	bl	80063a8 <__retarget_lock_acquire_recursive>
 8005396:	89ab      	ldrh	r3, [r5, #12]
 8005398:	071b      	lsls	r3, r3, #28
 800539a:	d501      	bpl.n	80053a0 <_vfiprintf_r+0x3c>
 800539c:	692b      	ldr	r3, [r5, #16]
 800539e:	b9eb      	cbnz	r3, 80053dc <_vfiprintf_r+0x78>
 80053a0:	4629      	mov	r1, r5
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 fdd2 	bl	8005f4c <__swsetup_r>
 80053a8:	b1c0      	cbz	r0, 80053dc <_vfiprintf_r+0x78>
 80053aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053ac:	07dc      	lsls	r4, r3, #31
 80053ae:	d50e      	bpl.n	80053ce <_vfiprintf_r+0x6a>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b4:	b01d      	add	sp, #116	; 0x74
 80053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ba:	4b7b      	ldr	r3, [pc, #492]	; (80055a8 <_vfiprintf_r+0x244>)
 80053bc:	429d      	cmp	r5, r3
 80053be:	d101      	bne.n	80053c4 <_vfiprintf_r+0x60>
 80053c0:	68b5      	ldr	r5, [r6, #8]
 80053c2:	e7df      	b.n	8005384 <_vfiprintf_r+0x20>
 80053c4:	4b79      	ldr	r3, [pc, #484]	; (80055ac <_vfiprintf_r+0x248>)
 80053c6:	429d      	cmp	r5, r3
 80053c8:	bf08      	it	eq
 80053ca:	68f5      	ldreq	r5, [r6, #12]
 80053cc:	e7da      	b.n	8005384 <_vfiprintf_r+0x20>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	0598      	lsls	r0, r3, #22
 80053d2:	d4ed      	bmi.n	80053b0 <_vfiprintf_r+0x4c>
 80053d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053d6:	f000 ffe8 	bl	80063aa <__retarget_lock_release_recursive>
 80053da:	e7e9      	b.n	80053b0 <_vfiprintf_r+0x4c>
 80053dc:	2300      	movs	r3, #0
 80053de:	9309      	str	r3, [sp, #36]	; 0x24
 80053e0:	2320      	movs	r3, #32
 80053e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ea:	2330      	movs	r3, #48	; 0x30
 80053ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055b0 <_vfiprintf_r+0x24c>
 80053f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053f4:	f04f 0901 	mov.w	r9, #1
 80053f8:	4623      	mov	r3, r4
 80053fa:	469a      	mov	sl, r3
 80053fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005400:	b10a      	cbz	r2, 8005406 <_vfiprintf_r+0xa2>
 8005402:	2a25      	cmp	r2, #37	; 0x25
 8005404:	d1f9      	bne.n	80053fa <_vfiprintf_r+0x96>
 8005406:	ebba 0b04 	subs.w	fp, sl, r4
 800540a:	d00b      	beq.n	8005424 <_vfiprintf_r+0xc0>
 800540c:	465b      	mov	r3, fp
 800540e:	4622      	mov	r2, r4
 8005410:	4629      	mov	r1, r5
 8005412:	4630      	mov	r0, r6
 8005414:	f7ff ff93 	bl	800533e <__sfputs_r>
 8005418:	3001      	adds	r0, #1
 800541a:	f000 80aa 	beq.w	8005572 <_vfiprintf_r+0x20e>
 800541e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005420:	445a      	add	r2, fp
 8005422:	9209      	str	r2, [sp, #36]	; 0x24
 8005424:	f89a 3000 	ldrb.w	r3, [sl]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80a2 	beq.w	8005572 <_vfiprintf_r+0x20e>
 800542e:	2300      	movs	r3, #0
 8005430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005438:	f10a 0a01 	add.w	sl, sl, #1
 800543c:	9304      	str	r3, [sp, #16]
 800543e:	9307      	str	r3, [sp, #28]
 8005440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005444:	931a      	str	r3, [sp, #104]	; 0x68
 8005446:	4654      	mov	r4, sl
 8005448:	2205      	movs	r2, #5
 800544a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800544e:	4858      	ldr	r0, [pc, #352]	; (80055b0 <_vfiprintf_r+0x24c>)
 8005450:	f7fa fed6 	bl	8000200 <memchr>
 8005454:	9a04      	ldr	r2, [sp, #16]
 8005456:	b9d8      	cbnz	r0, 8005490 <_vfiprintf_r+0x12c>
 8005458:	06d1      	lsls	r1, r2, #27
 800545a:	bf44      	itt	mi
 800545c:	2320      	movmi	r3, #32
 800545e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005462:	0713      	lsls	r3, r2, #28
 8005464:	bf44      	itt	mi
 8005466:	232b      	movmi	r3, #43	; 0x2b
 8005468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800546c:	f89a 3000 	ldrb.w	r3, [sl]
 8005470:	2b2a      	cmp	r3, #42	; 0x2a
 8005472:	d015      	beq.n	80054a0 <_vfiprintf_r+0x13c>
 8005474:	9a07      	ldr	r2, [sp, #28]
 8005476:	4654      	mov	r4, sl
 8005478:	2000      	movs	r0, #0
 800547a:	f04f 0c0a 	mov.w	ip, #10
 800547e:	4621      	mov	r1, r4
 8005480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005484:	3b30      	subs	r3, #48	; 0x30
 8005486:	2b09      	cmp	r3, #9
 8005488:	d94e      	bls.n	8005528 <_vfiprintf_r+0x1c4>
 800548a:	b1b0      	cbz	r0, 80054ba <_vfiprintf_r+0x156>
 800548c:	9207      	str	r2, [sp, #28]
 800548e:	e014      	b.n	80054ba <_vfiprintf_r+0x156>
 8005490:	eba0 0308 	sub.w	r3, r0, r8
 8005494:	fa09 f303 	lsl.w	r3, r9, r3
 8005498:	4313      	orrs	r3, r2
 800549a:	9304      	str	r3, [sp, #16]
 800549c:	46a2      	mov	sl, r4
 800549e:	e7d2      	b.n	8005446 <_vfiprintf_r+0xe2>
 80054a0:	9b03      	ldr	r3, [sp, #12]
 80054a2:	1d19      	adds	r1, r3, #4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	9103      	str	r1, [sp, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bfbb      	ittet	lt
 80054ac:	425b      	neglt	r3, r3
 80054ae:	f042 0202 	orrlt.w	r2, r2, #2
 80054b2:	9307      	strge	r3, [sp, #28]
 80054b4:	9307      	strlt	r3, [sp, #28]
 80054b6:	bfb8      	it	lt
 80054b8:	9204      	strlt	r2, [sp, #16]
 80054ba:	7823      	ldrb	r3, [r4, #0]
 80054bc:	2b2e      	cmp	r3, #46	; 0x2e
 80054be:	d10c      	bne.n	80054da <_vfiprintf_r+0x176>
 80054c0:	7863      	ldrb	r3, [r4, #1]
 80054c2:	2b2a      	cmp	r3, #42	; 0x2a
 80054c4:	d135      	bne.n	8005532 <_vfiprintf_r+0x1ce>
 80054c6:	9b03      	ldr	r3, [sp, #12]
 80054c8:	1d1a      	adds	r2, r3, #4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	9203      	str	r2, [sp, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bfb8      	it	lt
 80054d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054d6:	3402      	adds	r4, #2
 80054d8:	9305      	str	r3, [sp, #20]
 80054da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055c0 <_vfiprintf_r+0x25c>
 80054de:	7821      	ldrb	r1, [r4, #0]
 80054e0:	2203      	movs	r2, #3
 80054e2:	4650      	mov	r0, sl
 80054e4:	f7fa fe8c 	bl	8000200 <memchr>
 80054e8:	b140      	cbz	r0, 80054fc <_vfiprintf_r+0x198>
 80054ea:	2340      	movs	r3, #64	; 0x40
 80054ec:	eba0 000a 	sub.w	r0, r0, sl
 80054f0:	fa03 f000 	lsl.w	r0, r3, r0
 80054f4:	9b04      	ldr	r3, [sp, #16]
 80054f6:	4303      	orrs	r3, r0
 80054f8:	3401      	adds	r4, #1
 80054fa:	9304      	str	r3, [sp, #16]
 80054fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005500:	482c      	ldr	r0, [pc, #176]	; (80055b4 <_vfiprintf_r+0x250>)
 8005502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005506:	2206      	movs	r2, #6
 8005508:	f7fa fe7a 	bl	8000200 <memchr>
 800550c:	2800      	cmp	r0, #0
 800550e:	d03f      	beq.n	8005590 <_vfiprintf_r+0x22c>
 8005510:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <_vfiprintf_r+0x254>)
 8005512:	bb1b      	cbnz	r3, 800555c <_vfiprintf_r+0x1f8>
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	3307      	adds	r3, #7
 8005518:	f023 0307 	bic.w	r3, r3, #7
 800551c:	3308      	adds	r3, #8
 800551e:	9303      	str	r3, [sp, #12]
 8005520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005522:	443b      	add	r3, r7
 8005524:	9309      	str	r3, [sp, #36]	; 0x24
 8005526:	e767      	b.n	80053f8 <_vfiprintf_r+0x94>
 8005528:	fb0c 3202 	mla	r2, ip, r2, r3
 800552c:	460c      	mov	r4, r1
 800552e:	2001      	movs	r0, #1
 8005530:	e7a5      	b.n	800547e <_vfiprintf_r+0x11a>
 8005532:	2300      	movs	r3, #0
 8005534:	3401      	adds	r4, #1
 8005536:	9305      	str	r3, [sp, #20]
 8005538:	4619      	mov	r1, r3
 800553a:	f04f 0c0a 	mov.w	ip, #10
 800553e:	4620      	mov	r0, r4
 8005540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005544:	3a30      	subs	r2, #48	; 0x30
 8005546:	2a09      	cmp	r2, #9
 8005548:	d903      	bls.n	8005552 <_vfiprintf_r+0x1ee>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0c5      	beq.n	80054da <_vfiprintf_r+0x176>
 800554e:	9105      	str	r1, [sp, #20]
 8005550:	e7c3      	b.n	80054da <_vfiprintf_r+0x176>
 8005552:	fb0c 2101 	mla	r1, ip, r1, r2
 8005556:	4604      	mov	r4, r0
 8005558:	2301      	movs	r3, #1
 800555a:	e7f0      	b.n	800553e <_vfiprintf_r+0x1da>
 800555c:	ab03      	add	r3, sp, #12
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	462a      	mov	r2, r5
 8005562:	4b16      	ldr	r3, [pc, #88]	; (80055bc <_vfiprintf_r+0x258>)
 8005564:	a904      	add	r1, sp, #16
 8005566:	4630      	mov	r0, r6
 8005568:	f3af 8000 	nop.w
 800556c:	4607      	mov	r7, r0
 800556e:	1c78      	adds	r0, r7, #1
 8005570:	d1d6      	bne.n	8005520 <_vfiprintf_r+0x1bc>
 8005572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005574:	07d9      	lsls	r1, r3, #31
 8005576:	d405      	bmi.n	8005584 <_vfiprintf_r+0x220>
 8005578:	89ab      	ldrh	r3, [r5, #12]
 800557a:	059a      	lsls	r2, r3, #22
 800557c:	d402      	bmi.n	8005584 <_vfiprintf_r+0x220>
 800557e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005580:	f000 ff13 	bl	80063aa <__retarget_lock_release_recursive>
 8005584:	89ab      	ldrh	r3, [r5, #12]
 8005586:	065b      	lsls	r3, r3, #25
 8005588:	f53f af12 	bmi.w	80053b0 <_vfiprintf_r+0x4c>
 800558c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800558e:	e711      	b.n	80053b4 <_vfiprintf_r+0x50>
 8005590:	ab03      	add	r3, sp, #12
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	462a      	mov	r2, r5
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <_vfiprintf_r+0x258>)
 8005598:	a904      	add	r1, sp, #16
 800559a:	4630      	mov	r0, r6
 800559c:	f000 f880 	bl	80056a0 <_printf_i>
 80055a0:	e7e4      	b.n	800556c <_vfiprintf_r+0x208>
 80055a2:	bf00      	nop
 80055a4:	080068c4 	.word	0x080068c4
 80055a8:	080068e4 	.word	0x080068e4
 80055ac:	080068a4 	.word	0x080068a4
 80055b0:	08006754 	.word	0x08006754
 80055b4:	0800675e 	.word	0x0800675e
 80055b8:	00000000 	.word	0x00000000
 80055bc:	0800533f 	.word	0x0800533f
 80055c0:	0800675a 	.word	0x0800675a

080055c4 <_printf_common>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4616      	mov	r6, r2
 80055ca:	4699      	mov	r9, r3
 80055cc:	688a      	ldr	r2, [r1, #8]
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bfb8      	it	lt
 80055d8:	4613      	movlt	r3, r2
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e0:	4607      	mov	r7, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b10a      	cbz	r2, 80055ea <_printf_common+0x26>
 80055e6:	3301      	adds	r3, #1
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	0699      	lsls	r1, r3, #26
 80055ee:	bf42      	ittt	mi
 80055f0:	6833      	ldrmi	r3, [r6, #0]
 80055f2:	3302      	addmi	r3, #2
 80055f4:	6033      	strmi	r3, [r6, #0]
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	f015 0506 	ands.w	r5, r5, #6
 80055fc:	d106      	bne.n	800560c <_printf_common+0x48>
 80055fe:	f104 0a19 	add.w	sl, r4, #25
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	6832      	ldr	r2, [r6, #0]
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	42ab      	cmp	r3, r5
 800560a:	dc26      	bgt.n	800565a <_printf_common+0x96>
 800560c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005610:	1e13      	subs	r3, r2, #0
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	bf18      	it	ne
 8005616:	2301      	movne	r3, #1
 8005618:	0692      	lsls	r2, r2, #26
 800561a:	d42b      	bmi.n	8005674 <_printf_common+0xb0>
 800561c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005620:	4649      	mov	r1, r9
 8005622:	4638      	mov	r0, r7
 8005624:	47c0      	blx	r8
 8005626:	3001      	adds	r0, #1
 8005628:	d01e      	beq.n	8005668 <_printf_common+0xa4>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	68e5      	ldr	r5, [r4, #12]
 800562e:	6832      	ldr	r2, [r6, #0]
 8005630:	f003 0306 	and.w	r3, r3, #6
 8005634:	2b04      	cmp	r3, #4
 8005636:	bf08      	it	eq
 8005638:	1aad      	subeq	r5, r5, r2
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	6922      	ldr	r2, [r4, #16]
 800563e:	bf0c      	ite	eq
 8005640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005644:	2500      	movne	r5, #0
 8005646:	4293      	cmp	r3, r2
 8005648:	bfc4      	itt	gt
 800564a:	1a9b      	subgt	r3, r3, r2
 800564c:	18ed      	addgt	r5, r5, r3
 800564e:	2600      	movs	r6, #0
 8005650:	341a      	adds	r4, #26
 8005652:	42b5      	cmp	r5, r6
 8005654:	d11a      	bne.n	800568c <_printf_common+0xc8>
 8005656:	2000      	movs	r0, #0
 8005658:	e008      	b.n	800566c <_printf_common+0xa8>
 800565a:	2301      	movs	r3, #1
 800565c:	4652      	mov	r2, sl
 800565e:	4649      	mov	r1, r9
 8005660:	4638      	mov	r0, r7
 8005662:	47c0      	blx	r8
 8005664:	3001      	adds	r0, #1
 8005666:	d103      	bne.n	8005670 <_printf_common+0xac>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	3501      	adds	r5, #1
 8005672:	e7c6      	b.n	8005602 <_printf_common+0x3e>
 8005674:	18e1      	adds	r1, r4, r3
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	2030      	movs	r0, #48	; 0x30
 800567a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800567e:	4422      	add	r2, r4
 8005680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005688:	3302      	adds	r3, #2
 800568a:	e7c7      	b.n	800561c <_printf_common+0x58>
 800568c:	2301      	movs	r3, #1
 800568e:	4622      	mov	r2, r4
 8005690:	4649      	mov	r1, r9
 8005692:	4638      	mov	r0, r7
 8005694:	47c0      	blx	r8
 8005696:	3001      	adds	r0, #1
 8005698:	d0e6      	beq.n	8005668 <_printf_common+0xa4>
 800569a:	3601      	adds	r6, #1
 800569c:	e7d9      	b.n	8005652 <_printf_common+0x8e>
	...

080056a0 <_printf_i>:
 80056a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a4:	7e0f      	ldrb	r7, [r1, #24]
 80056a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056a8:	2f78      	cmp	r7, #120	; 0x78
 80056aa:	4691      	mov	r9, r2
 80056ac:	4680      	mov	r8, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	469a      	mov	sl, r3
 80056b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056b6:	d807      	bhi.n	80056c8 <_printf_i+0x28>
 80056b8:	2f62      	cmp	r7, #98	; 0x62
 80056ba:	d80a      	bhi.n	80056d2 <_printf_i+0x32>
 80056bc:	2f00      	cmp	r7, #0
 80056be:	f000 80d8 	beq.w	8005872 <_printf_i+0x1d2>
 80056c2:	2f58      	cmp	r7, #88	; 0x58
 80056c4:	f000 80a3 	beq.w	800580e <_printf_i+0x16e>
 80056c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d0:	e03a      	b.n	8005748 <_printf_i+0xa8>
 80056d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056d6:	2b15      	cmp	r3, #21
 80056d8:	d8f6      	bhi.n	80056c8 <_printf_i+0x28>
 80056da:	a101      	add	r1, pc, #4	; (adr r1, 80056e0 <_printf_i+0x40>)
 80056dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e0:	08005739 	.word	0x08005739
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	080056c9 	.word	0x080056c9
 80056ec:	080056c9 	.word	0x080056c9
 80056f0:	080056c9 	.word	0x080056c9
 80056f4:	080056c9 	.word	0x080056c9
 80056f8:	0800574d 	.word	0x0800574d
 80056fc:	080056c9 	.word	0x080056c9
 8005700:	080056c9 	.word	0x080056c9
 8005704:	080056c9 	.word	0x080056c9
 8005708:	080056c9 	.word	0x080056c9
 800570c:	08005859 	.word	0x08005859
 8005710:	0800577d 	.word	0x0800577d
 8005714:	0800583b 	.word	0x0800583b
 8005718:	080056c9 	.word	0x080056c9
 800571c:	080056c9 	.word	0x080056c9
 8005720:	0800587b 	.word	0x0800587b
 8005724:	080056c9 	.word	0x080056c9
 8005728:	0800577d 	.word	0x0800577d
 800572c:	080056c9 	.word	0x080056c9
 8005730:	080056c9 	.word	0x080056c9
 8005734:	08005843 	.word	0x08005843
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	1d1a      	adds	r2, r3, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	602a      	str	r2, [r5, #0]
 8005740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005748:	2301      	movs	r3, #1
 800574a:	e0a3      	b.n	8005894 <_printf_i+0x1f4>
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	6829      	ldr	r1, [r5, #0]
 8005750:	0606      	lsls	r6, r0, #24
 8005752:	f101 0304 	add.w	r3, r1, #4
 8005756:	d50a      	bpl.n	800576e <_printf_i+0xce>
 8005758:	680e      	ldr	r6, [r1, #0]
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	2e00      	cmp	r6, #0
 800575e:	da03      	bge.n	8005768 <_printf_i+0xc8>
 8005760:	232d      	movs	r3, #45	; 0x2d
 8005762:	4276      	negs	r6, r6
 8005764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005768:	485e      	ldr	r0, [pc, #376]	; (80058e4 <_printf_i+0x244>)
 800576a:	230a      	movs	r3, #10
 800576c:	e019      	b.n	80057a2 <_printf_i+0x102>
 800576e:	680e      	ldr	r6, [r1, #0]
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005776:	bf18      	it	ne
 8005778:	b236      	sxthne	r6, r6
 800577a:	e7ef      	b.n	800575c <_printf_i+0xbc>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	6820      	ldr	r0, [r4, #0]
 8005780:	1d19      	adds	r1, r3, #4
 8005782:	6029      	str	r1, [r5, #0]
 8005784:	0601      	lsls	r1, r0, #24
 8005786:	d501      	bpl.n	800578c <_printf_i+0xec>
 8005788:	681e      	ldr	r6, [r3, #0]
 800578a:	e002      	b.n	8005792 <_printf_i+0xf2>
 800578c:	0646      	lsls	r6, r0, #25
 800578e:	d5fb      	bpl.n	8005788 <_printf_i+0xe8>
 8005790:	881e      	ldrh	r6, [r3, #0]
 8005792:	4854      	ldr	r0, [pc, #336]	; (80058e4 <_printf_i+0x244>)
 8005794:	2f6f      	cmp	r7, #111	; 0x6f
 8005796:	bf0c      	ite	eq
 8005798:	2308      	moveq	r3, #8
 800579a:	230a      	movne	r3, #10
 800579c:	2100      	movs	r1, #0
 800579e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a2:	6865      	ldr	r5, [r4, #4]
 80057a4:	60a5      	str	r5, [r4, #8]
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	bfa2      	ittt	ge
 80057aa:	6821      	ldrge	r1, [r4, #0]
 80057ac:	f021 0104 	bicge.w	r1, r1, #4
 80057b0:	6021      	strge	r1, [r4, #0]
 80057b2:	b90e      	cbnz	r6, 80057b8 <_printf_i+0x118>
 80057b4:	2d00      	cmp	r5, #0
 80057b6:	d04d      	beq.n	8005854 <_printf_i+0x1b4>
 80057b8:	4615      	mov	r5, r2
 80057ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80057be:	fb03 6711 	mls	r7, r3, r1, r6
 80057c2:	5dc7      	ldrb	r7, [r0, r7]
 80057c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057c8:	4637      	mov	r7, r6
 80057ca:	42bb      	cmp	r3, r7
 80057cc:	460e      	mov	r6, r1
 80057ce:	d9f4      	bls.n	80057ba <_printf_i+0x11a>
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d10b      	bne.n	80057ec <_printf_i+0x14c>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	07de      	lsls	r6, r3, #31
 80057d8:	d508      	bpl.n	80057ec <_printf_i+0x14c>
 80057da:	6923      	ldr	r3, [r4, #16]
 80057dc:	6861      	ldr	r1, [r4, #4]
 80057de:	4299      	cmp	r1, r3
 80057e0:	bfde      	ittt	le
 80057e2:	2330      	movle	r3, #48	; 0x30
 80057e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057ec:	1b52      	subs	r2, r2, r5
 80057ee:	6122      	str	r2, [r4, #16]
 80057f0:	f8cd a000 	str.w	sl, [sp]
 80057f4:	464b      	mov	r3, r9
 80057f6:	aa03      	add	r2, sp, #12
 80057f8:	4621      	mov	r1, r4
 80057fa:	4640      	mov	r0, r8
 80057fc:	f7ff fee2 	bl	80055c4 <_printf_common>
 8005800:	3001      	adds	r0, #1
 8005802:	d14c      	bne.n	800589e <_printf_i+0x1fe>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005808:	b004      	add	sp, #16
 800580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580e:	4835      	ldr	r0, [pc, #212]	; (80058e4 <_printf_i+0x244>)
 8005810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005814:	6829      	ldr	r1, [r5, #0]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	f851 6b04 	ldr.w	r6, [r1], #4
 800581c:	6029      	str	r1, [r5, #0]
 800581e:	061d      	lsls	r5, r3, #24
 8005820:	d514      	bpl.n	800584c <_printf_i+0x1ac>
 8005822:	07df      	lsls	r7, r3, #31
 8005824:	bf44      	itt	mi
 8005826:	f043 0320 	orrmi.w	r3, r3, #32
 800582a:	6023      	strmi	r3, [r4, #0]
 800582c:	b91e      	cbnz	r6, 8005836 <_printf_i+0x196>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	f023 0320 	bic.w	r3, r3, #32
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	2310      	movs	r3, #16
 8005838:	e7b0      	b.n	800579c <_printf_i+0xfc>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	f043 0320 	orr.w	r3, r3, #32
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	2378      	movs	r3, #120	; 0x78
 8005844:	4828      	ldr	r0, [pc, #160]	; (80058e8 <_printf_i+0x248>)
 8005846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800584a:	e7e3      	b.n	8005814 <_printf_i+0x174>
 800584c:	0659      	lsls	r1, r3, #25
 800584e:	bf48      	it	mi
 8005850:	b2b6      	uxthmi	r6, r6
 8005852:	e7e6      	b.n	8005822 <_printf_i+0x182>
 8005854:	4615      	mov	r5, r2
 8005856:	e7bb      	b.n	80057d0 <_printf_i+0x130>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	6826      	ldr	r6, [r4, #0]
 800585c:	6961      	ldr	r1, [r4, #20]
 800585e:	1d18      	adds	r0, r3, #4
 8005860:	6028      	str	r0, [r5, #0]
 8005862:	0635      	lsls	r5, r6, #24
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	d501      	bpl.n	800586c <_printf_i+0x1cc>
 8005868:	6019      	str	r1, [r3, #0]
 800586a:	e002      	b.n	8005872 <_printf_i+0x1d2>
 800586c:	0670      	lsls	r0, r6, #25
 800586e:	d5fb      	bpl.n	8005868 <_printf_i+0x1c8>
 8005870:	8019      	strh	r1, [r3, #0]
 8005872:	2300      	movs	r3, #0
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	4615      	mov	r5, r2
 8005878:	e7ba      	b.n	80057f0 <_printf_i+0x150>
 800587a:	682b      	ldr	r3, [r5, #0]
 800587c:	1d1a      	adds	r2, r3, #4
 800587e:	602a      	str	r2, [r5, #0]
 8005880:	681d      	ldr	r5, [r3, #0]
 8005882:	6862      	ldr	r2, [r4, #4]
 8005884:	2100      	movs	r1, #0
 8005886:	4628      	mov	r0, r5
 8005888:	f7fa fcba 	bl	8000200 <memchr>
 800588c:	b108      	cbz	r0, 8005892 <_printf_i+0x1f2>
 800588e:	1b40      	subs	r0, r0, r5
 8005890:	6060      	str	r0, [r4, #4]
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	2300      	movs	r3, #0
 8005898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589c:	e7a8      	b.n	80057f0 <_printf_i+0x150>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	462a      	mov	r2, r5
 80058a2:	4649      	mov	r1, r9
 80058a4:	4640      	mov	r0, r8
 80058a6:	47d0      	blx	sl
 80058a8:	3001      	adds	r0, #1
 80058aa:	d0ab      	beq.n	8005804 <_printf_i+0x164>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	079b      	lsls	r3, r3, #30
 80058b0:	d413      	bmi.n	80058da <_printf_i+0x23a>
 80058b2:	68e0      	ldr	r0, [r4, #12]
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	4298      	cmp	r0, r3
 80058b8:	bfb8      	it	lt
 80058ba:	4618      	movlt	r0, r3
 80058bc:	e7a4      	b.n	8005808 <_printf_i+0x168>
 80058be:	2301      	movs	r3, #1
 80058c0:	4632      	mov	r2, r6
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d09b      	beq.n	8005804 <_printf_i+0x164>
 80058cc:	3501      	adds	r5, #1
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	9903      	ldr	r1, [sp, #12]
 80058d2:	1a5b      	subs	r3, r3, r1
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dcf2      	bgt.n	80058be <_printf_i+0x21e>
 80058d8:	e7eb      	b.n	80058b2 <_printf_i+0x212>
 80058da:	2500      	movs	r5, #0
 80058dc:	f104 0619 	add.w	r6, r4, #25
 80058e0:	e7f5      	b.n	80058ce <_printf_i+0x22e>
 80058e2:	bf00      	nop
 80058e4:	08006765 	.word	0x08006765
 80058e8:	08006776 	.word	0x08006776

080058ec <_scanf_chars>:
 80058ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f0:	4615      	mov	r5, r2
 80058f2:	688a      	ldr	r2, [r1, #8]
 80058f4:	4680      	mov	r8, r0
 80058f6:	460c      	mov	r4, r1
 80058f8:	b932      	cbnz	r2, 8005908 <_scanf_chars+0x1c>
 80058fa:	698a      	ldr	r2, [r1, #24]
 80058fc:	2a00      	cmp	r2, #0
 80058fe:	bf0c      	ite	eq
 8005900:	2201      	moveq	r2, #1
 8005902:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8005906:	608a      	str	r2, [r1, #8]
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800599c <_scanf_chars+0xb0>
 800590e:	06d1      	lsls	r1, r2, #27
 8005910:	bf5f      	itttt	pl
 8005912:	681a      	ldrpl	r2, [r3, #0]
 8005914:	1d11      	addpl	r1, r2, #4
 8005916:	6019      	strpl	r1, [r3, #0]
 8005918:	6816      	ldrpl	r6, [r2, #0]
 800591a:	2700      	movs	r7, #0
 800591c:	69a0      	ldr	r0, [r4, #24]
 800591e:	b188      	cbz	r0, 8005944 <_scanf_chars+0x58>
 8005920:	2801      	cmp	r0, #1
 8005922:	d107      	bne.n	8005934 <_scanf_chars+0x48>
 8005924:	682a      	ldr	r2, [r5, #0]
 8005926:	7811      	ldrb	r1, [r2, #0]
 8005928:	6962      	ldr	r2, [r4, #20]
 800592a:	5c52      	ldrb	r2, [r2, r1]
 800592c:	b952      	cbnz	r2, 8005944 <_scanf_chars+0x58>
 800592e:	2f00      	cmp	r7, #0
 8005930:	d031      	beq.n	8005996 <_scanf_chars+0xaa>
 8005932:	e022      	b.n	800597a <_scanf_chars+0x8e>
 8005934:	2802      	cmp	r0, #2
 8005936:	d120      	bne.n	800597a <_scanf_chars+0x8e>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005940:	071b      	lsls	r3, r3, #28
 8005942:	d41a      	bmi.n	800597a <_scanf_chars+0x8e>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	06da      	lsls	r2, r3, #27
 8005948:	bf5e      	ittt	pl
 800594a:	682b      	ldrpl	r3, [r5, #0]
 800594c:	781b      	ldrbpl	r3, [r3, #0]
 800594e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005952:	682a      	ldr	r2, [r5, #0]
 8005954:	686b      	ldr	r3, [r5, #4]
 8005956:	3201      	adds	r2, #1
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	68a2      	ldr	r2, [r4, #8]
 800595c:	3b01      	subs	r3, #1
 800595e:	3a01      	subs	r2, #1
 8005960:	606b      	str	r3, [r5, #4]
 8005962:	3701      	adds	r7, #1
 8005964:	60a2      	str	r2, [r4, #8]
 8005966:	b142      	cbz	r2, 800597a <_scanf_chars+0x8e>
 8005968:	2b00      	cmp	r3, #0
 800596a:	dcd7      	bgt.n	800591c <_scanf_chars+0x30>
 800596c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005970:	4629      	mov	r1, r5
 8005972:	4640      	mov	r0, r8
 8005974:	4798      	blx	r3
 8005976:	2800      	cmp	r0, #0
 8005978:	d0d0      	beq.n	800591c <_scanf_chars+0x30>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	f013 0310 	ands.w	r3, r3, #16
 8005980:	d105      	bne.n	800598e <_scanf_chars+0xa2>
 8005982:	68e2      	ldr	r2, [r4, #12]
 8005984:	3201      	adds	r2, #1
 8005986:	60e2      	str	r2, [r4, #12]
 8005988:	69a2      	ldr	r2, [r4, #24]
 800598a:	b102      	cbz	r2, 800598e <_scanf_chars+0xa2>
 800598c:	7033      	strb	r3, [r6, #0]
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	443b      	add	r3, r7
 8005992:	6123      	str	r3, [r4, #16]
 8005994:	2000      	movs	r0, #0
 8005996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599a:	bf00      	nop
 800599c:	080067a3 	.word	0x080067a3

080059a0 <_scanf_i>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	4698      	mov	r8, r3
 80059a6:	4b76      	ldr	r3, [pc, #472]	; (8005b80 <_scanf_i+0x1e0>)
 80059a8:	460c      	mov	r4, r1
 80059aa:	4682      	mov	sl, r0
 80059ac:	4616      	mov	r6, r2
 80059ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059b2:	b087      	sub	sp, #28
 80059b4:	ab03      	add	r3, sp, #12
 80059b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80059ba:	4b72      	ldr	r3, [pc, #456]	; (8005b84 <_scanf_i+0x1e4>)
 80059bc:	69a1      	ldr	r1, [r4, #24]
 80059be:	4a72      	ldr	r2, [pc, #456]	; (8005b88 <_scanf_i+0x1e8>)
 80059c0:	2903      	cmp	r1, #3
 80059c2:	bf18      	it	ne
 80059c4:	461a      	movne	r2, r3
 80059c6:	68a3      	ldr	r3, [r4, #8]
 80059c8:	9201      	str	r2, [sp, #4]
 80059ca:	1e5a      	subs	r2, r3, #1
 80059cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80059d0:	bf88      	it	hi
 80059d2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80059d6:	4627      	mov	r7, r4
 80059d8:	bf82      	ittt	hi
 80059da:	eb03 0905 	addhi.w	r9, r3, r5
 80059de:	f240 135d 	movwhi	r3, #349	; 0x15d
 80059e2:	60a3      	strhi	r3, [r4, #8]
 80059e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80059e8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80059ec:	bf98      	it	ls
 80059ee:	f04f 0900 	movls.w	r9, #0
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	463d      	mov	r5, r7
 80059f6:	f04f 0b00 	mov.w	fp, #0
 80059fa:	6831      	ldr	r1, [r6, #0]
 80059fc:	ab03      	add	r3, sp, #12
 80059fe:	7809      	ldrb	r1, [r1, #0]
 8005a00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f7fa fbfb 	bl	8000200 <memchr>
 8005a0a:	b328      	cbz	r0, 8005a58 <_scanf_i+0xb8>
 8005a0c:	f1bb 0f01 	cmp.w	fp, #1
 8005a10:	d159      	bne.n	8005ac6 <_scanf_i+0x126>
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	b92a      	cbnz	r2, 8005a22 <_scanf_i+0x82>
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	2308      	movs	r3, #8
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1e:	6063      	str	r3, [r4, #4]
 8005a20:	6022      	str	r2, [r4, #0]
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005a28:	6022      	str	r2, [r4, #0]
 8005a2a:	68a2      	ldr	r2, [r4, #8]
 8005a2c:	1e51      	subs	r1, r2, #1
 8005a2e:	60a1      	str	r1, [r4, #8]
 8005a30:	b192      	cbz	r2, 8005a58 <_scanf_i+0xb8>
 8005a32:	6832      	ldr	r2, [r6, #0]
 8005a34:	1c51      	adds	r1, r2, #1
 8005a36:	6031      	str	r1, [r6, #0]
 8005a38:	7812      	ldrb	r2, [r2, #0]
 8005a3a:	f805 2b01 	strb.w	r2, [r5], #1
 8005a3e:	6872      	ldr	r2, [r6, #4]
 8005a40:	3a01      	subs	r2, #1
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	6072      	str	r2, [r6, #4]
 8005a46:	dc07      	bgt.n	8005a58 <_scanf_i+0xb8>
 8005a48:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4650      	mov	r0, sl
 8005a50:	4790      	blx	r2
 8005a52:	2800      	cmp	r0, #0
 8005a54:	f040 8085 	bne.w	8005b62 <_scanf_i+0x1c2>
 8005a58:	f10b 0b01 	add.w	fp, fp, #1
 8005a5c:	f1bb 0f03 	cmp.w	fp, #3
 8005a60:	d1cb      	bne.n	80059fa <_scanf_i+0x5a>
 8005a62:	6863      	ldr	r3, [r4, #4]
 8005a64:	b90b      	cbnz	r3, 8005a6a <_scanf_i+0xca>
 8005a66:	230a      	movs	r3, #10
 8005a68:	6063      	str	r3, [r4, #4]
 8005a6a:	6863      	ldr	r3, [r4, #4]
 8005a6c:	4947      	ldr	r1, [pc, #284]	; (8005b8c <_scanf_i+0x1ec>)
 8005a6e:	6960      	ldr	r0, [r4, #20]
 8005a70:	1ac9      	subs	r1, r1, r3
 8005a72:	f000 f8af 	bl	8005bd4 <__sccl>
 8005a76:	f04f 0b00 	mov.w	fp, #0
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d03d      	beq.n	8005afe <_scanf_i+0x15e>
 8005a82:	6831      	ldr	r1, [r6, #0]
 8005a84:	6960      	ldr	r0, [r4, #20]
 8005a86:	f891 c000 	ldrb.w	ip, [r1]
 8005a8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d035      	beq.n	8005afe <_scanf_i+0x15e>
 8005a92:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005a96:	d124      	bne.n	8005ae2 <_scanf_i+0x142>
 8005a98:	0510      	lsls	r0, r2, #20
 8005a9a:	d522      	bpl.n	8005ae2 <_scanf_i+0x142>
 8005a9c:	f10b 0b01 	add.w	fp, fp, #1
 8005aa0:	f1b9 0f00 	cmp.w	r9, #0
 8005aa4:	d003      	beq.n	8005aae <_scanf_i+0x10e>
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005aac:	60a3      	str	r3, [r4, #8]
 8005aae:	6873      	ldr	r3, [r6, #4]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	6073      	str	r3, [r6, #4]
 8005ab6:	dd1b      	ble.n	8005af0 <_scanf_i+0x150>
 8005ab8:	6833      	ldr	r3, [r6, #0]
 8005aba:	3301      	adds	r3, #1
 8005abc:	6033      	str	r3, [r6, #0]
 8005abe:	68a3      	ldr	r3, [r4, #8]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	60a3      	str	r3, [r4, #8]
 8005ac4:	e7d9      	b.n	8005a7a <_scanf_i+0xda>
 8005ac6:	f1bb 0f02 	cmp.w	fp, #2
 8005aca:	d1ae      	bne.n	8005a2a <_scanf_i+0x8a>
 8005acc:	6822      	ldr	r2, [r4, #0]
 8005ace:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005ad2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005ad6:	d1bf      	bne.n	8005a58 <_scanf_i+0xb8>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	6063      	str	r3, [r4, #4]
 8005adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ae0:	e7a2      	b.n	8005a28 <_scanf_i+0x88>
 8005ae2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005ae6:	6022      	str	r2, [r4, #0]
 8005ae8:	780b      	ldrb	r3, [r1, #0]
 8005aea:	f805 3b01 	strb.w	r3, [r5], #1
 8005aee:	e7de      	b.n	8005aae <_scanf_i+0x10e>
 8005af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005af4:	4631      	mov	r1, r6
 8005af6:	4650      	mov	r0, sl
 8005af8:	4798      	blx	r3
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d0df      	beq.n	8005abe <_scanf_i+0x11e>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	05db      	lsls	r3, r3, #23
 8005b02:	d50d      	bpl.n	8005b20 <_scanf_i+0x180>
 8005b04:	42bd      	cmp	r5, r7
 8005b06:	d909      	bls.n	8005b1c <_scanf_i+0x17c>
 8005b08:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b10:	4632      	mov	r2, r6
 8005b12:	4650      	mov	r0, sl
 8005b14:	4798      	blx	r3
 8005b16:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005b1a:	464d      	mov	r5, r9
 8005b1c:	42bd      	cmp	r5, r7
 8005b1e:	d02d      	beq.n	8005b7c <_scanf_i+0x1dc>
 8005b20:	6822      	ldr	r2, [r4, #0]
 8005b22:	f012 0210 	ands.w	r2, r2, #16
 8005b26:	d113      	bne.n	8005b50 <_scanf_i+0x1b0>
 8005b28:	702a      	strb	r2, [r5, #0]
 8005b2a:	6863      	ldr	r3, [r4, #4]
 8005b2c:	9e01      	ldr	r6, [sp, #4]
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4650      	mov	r0, sl
 8005b32:	47b0      	blx	r6
 8005b34:	6821      	ldr	r1, [r4, #0]
 8005b36:	f8d8 3000 	ldr.w	r3, [r8]
 8005b3a:	f011 0f20 	tst.w	r1, #32
 8005b3e:	d013      	beq.n	8005b68 <_scanf_i+0x1c8>
 8005b40:	1d1a      	adds	r2, r3, #4
 8005b42:	f8c8 2000 	str.w	r2, [r8]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6018      	str	r0, [r3, #0]
 8005b4a:	68e3      	ldr	r3, [r4, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60e3      	str	r3, [r4, #12]
 8005b50:	1bed      	subs	r5, r5, r7
 8005b52:	44ab      	add	fp, r5
 8005b54:	6925      	ldr	r5, [r4, #16]
 8005b56:	445d      	add	r5, fp
 8005b58:	6125      	str	r5, [r4, #16]
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	b007      	add	sp, #28
 8005b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	f04f 0b00 	mov.w	fp, #0
 8005b66:	e7ca      	b.n	8005afe <_scanf_i+0x15e>
 8005b68:	1d1a      	adds	r2, r3, #4
 8005b6a:	f8c8 2000 	str.w	r2, [r8]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f011 0f01 	tst.w	r1, #1
 8005b74:	bf14      	ite	ne
 8005b76:	8018      	strhne	r0, [r3, #0]
 8005b78:	6018      	streq	r0, [r3, #0]
 8005b7a:	e7e6      	b.n	8005b4a <_scanf_i+0x1aa>
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	e7ed      	b.n	8005b5c <_scanf_i+0x1bc>
 8005b80:	0800667c 	.word	0x0800667c
 8005b84:	08005e31 	.word	0x08005e31
 8005b88:	08005d49 	.word	0x08005d49
 8005b8c:	080067a0 	.word	0x080067a0

08005b90 <_read_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4d07      	ldr	r5, [pc, #28]	; (8005bb0 <_read_r+0x20>)
 8005b94:	4604      	mov	r4, r0
 8005b96:	4608      	mov	r0, r1
 8005b98:	4611      	mov	r1, r2
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	602a      	str	r2, [r5, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f7fb fd92 	bl	80016c8 <_read>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_read_r+0x1e>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_read_r+0x1e>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	20000128 	.word	0x20000128

08005bb4 <_sbrk_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d06      	ldr	r5, [pc, #24]	; (8005bd0 <_sbrk_r+0x1c>)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	f7fb fdf0 	bl	80017a4 <_sbrk>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_sbrk_r+0x1a>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_sbrk_r+0x1a>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	20000128 	.word	0x20000128

08005bd4 <__sccl>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	780b      	ldrb	r3, [r1, #0]
 8005bd8:	4604      	mov	r4, r0
 8005bda:	2b5e      	cmp	r3, #94	; 0x5e
 8005bdc:	bf0b      	itete	eq
 8005bde:	784b      	ldrbeq	r3, [r1, #1]
 8005be0:	1c48      	addne	r0, r1, #1
 8005be2:	1c88      	addeq	r0, r1, #2
 8005be4:	2200      	movne	r2, #0
 8005be6:	bf08      	it	eq
 8005be8:	2201      	moveq	r2, #1
 8005bea:	1e61      	subs	r1, r4, #1
 8005bec:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005bf0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005bf4:	42a9      	cmp	r1, r5
 8005bf6:	d1fb      	bne.n	8005bf0 <__sccl+0x1c>
 8005bf8:	b90b      	cbnz	r3, 8005bfe <__sccl+0x2a>
 8005bfa:	3801      	subs	r0, #1
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	f082 0201 	eor.w	r2, r2, #1
 8005c02:	54e2      	strb	r2, [r4, r3]
 8005c04:	4605      	mov	r5, r0
 8005c06:	4628      	mov	r0, r5
 8005c08:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005c0c:	292d      	cmp	r1, #45	; 0x2d
 8005c0e:	d006      	beq.n	8005c1e <__sccl+0x4a>
 8005c10:	295d      	cmp	r1, #93	; 0x5d
 8005c12:	d0f3      	beq.n	8005bfc <__sccl+0x28>
 8005c14:	b909      	cbnz	r1, 8005c1a <__sccl+0x46>
 8005c16:	4628      	mov	r0, r5
 8005c18:	e7f0      	b.n	8005bfc <__sccl+0x28>
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	e7f1      	b.n	8005c02 <__sccl+0x2e>
 8005c1e:	786e      	ldrb	r6, [r5, #1]
 8005c20:	2e5d      	cmp	r6, #93	; 0x5d
 8005c22:	d0fa      	beq.n	8005c1a <__sccl+0x46>
 8005c24:	42b3      	cmp	r3, r6
 8005c26:	dcf8      	bgt.n	8005c1a <__sccl+0x46>
 8005c28:	3502      	adds	r5, #2
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	3101      	adds	r1, #1
 8005c2e:	428e      	cmp	r6, r1
 8005c30:	5462      	strb	r2, [r4, r1]
 8005c32:	dcfb      	bgt.n	8005c2c <__sccl+0x58>
 8005c34:	1af1      	subs	r1, r6, r3
 8005c36:	3901      	subs	r1, #1
 8005c38:	1c58      	adds	r0, r3, #1
 8005c3a:	42b3      	cmp	r3, r6
 8005c3c:	bfa8      	it	ge
 8005c3e:	2100      	movge	r1, #0
 8005c40:	1843      	adds	r3, r0, r1
 8005c42:	e7e0      	b.n	8005c06 <__sccl+0x32>

08005c44 <_strtol_l.constprop.0>:
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4a:	d001      	beq.n	8005c50 <_strtol_l.constprop.0+0xc>
 8005c4c:	2b24      	cmp	r3, #36	; 0x24
 8005c4e:	d906      	bls.n	8005c5e <_strtol_l.constprop.0+0x1a>
 8005c50:	f7fe fdc4 	bl	80047dc <__errno>
 8005c54:	2316      	movs	r3, #22
 8005c56:	6003      	str	r3, [r0, #0]
 8005c58:	2000      	movs	r0, #0
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005d44 <_strtol_l.constprop.0+0x100>
 8005c62:	460d      	mov	r5, r1
 8005c64:	462e      	mov	r6, r5
 8005c66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c6a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005c6e:	f017 0708 	ands.w	r7, r7, #8
 8005c72:	d1f7      	bne.n	8005c64 <_strtol_l.constprop.0+0x20>
 8005c74:	2c2d      	cmp	r4, #45	; 0x2d
 8005c76:	d132      	bne.n	8005cde <_strtol_l.constprop.0+0x9a>
 8005c78:	782c      	ldrb	r4, [r5, #0]
 8005c7a:	2701      	movs	r7, #1
 8005c7c:	1cb5      	adds	r5, r6, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d05b      	beq.n	8005d3a <_strtol_l.constprop.0+0xf6>
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d109      	bne.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005c86:	2c30      	cmp	r4, #48	; 0x30
 8005c88:	d107      	bne.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005c8a:	782c      	ldrb	r4, [r5, #0]
 8005c8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c90:	2c58      	cmp	r4, #88	; 0x58
 8005c92:	d14d      	bne.n	8005d30 <_strtol_l.constprop.0+0xec>
 8005c94:	786c      	ldrb	r4, [r5, #1]
 8005c96:	2310      	movs	r3, #16
 8005c98:	3502      	adds	r5, #2
 8005c9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005ca2:	f04f 0c00 	mov.w	ip, #0
 8005ca6:	fbb8 f9f3 	udiv	r9, r8, r3
 8005caa:	4666      	mov	r6, ip
 8005cac:	fb03 8a19 	mls	sl, r3, r9, r8
 8005cb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005cb4:	f1be 0f09 	cmp.w	lr, #9
 8005cb8:	d816      	bhi.n	8005ce8 <_strtol_l.constprop.0+0xa4>
 8005cba:	4674      	mov	r4, lr
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	dd24      	ble.n	8005d0a <_strtol_l.constprop.0+0xc6>
 8005cc0:	f1bc 0f00 	cmp.w	ip, #0
 8005cc4:	db1e      	blt.n	8005d04 <_strtol_l.constprop.0+0xc0>
 8005cc6:	45b1      	cmp	r9, r6
 8005cc8:	d31c      	bcc.n	8005d04 <_strtol_l.constprop.0+0xc0>
 8005cca:	d101      	bne.n	8005cd0 <_strtol_l.constprop.0+0x8c>
 8005ccc:	45a2      	cmp	sl, r4
 8005cce:	db19      	blt.n	8005d04 <_strtol_l.constprop.0+0xc0>
 8005cd0:	fb06 4603 	mla	r6, r6, r3, r4
 8005cd4:	f04f 0c01 	mov.w	ip, #1
 8005cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cdc:	e7e8      	b.n	8005cb0 <_strtol_l.constprop.0+0x6c>
 8005cde:	2c2b      	cmp	r4, #43	; 0x2b
 8005ce0:	bf04      	itt	eq
 8005ce2:	782c      	ldrbeq	r4, [r5, #0]
 8005ce4:	1cb5      	addeq	r5, r6, #2
 8005ce6:	e7ca      	b.n	8005c7e <_strtol_l.constprop.0+0x3a>
 8005ce8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005cec:	f1be 0f19 	cmp.w	lr, #25
 8005cf0:	d801      	bhi.n	8005cf6 <_strtol_l.constprop.0+0xb2>
 8005cf2:	3c37      	subs	r4, #55	; 0x37
 8005cf4:	e7e2      	b.n	8005cbc <_strtol_l.constprop.0+0x78>
 8005cf6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005cfa:	f1be 0f19 	cmp.w	lr, #25
 8005cfe:	d804      	bhi.n	8005d0a <_strtol_l.constprop.0+0xc6>
 8005d00:	3c57      	subs	r4, #87	; 0x57
 8005d02:	e7db      	b.n	8005cbc <_strtol_l.constprop.0+0x78>
 8005d04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005d08:	e7e6      	b.n	8005cd8 <_strtol_l.constprop.0+0x94>
 8005d0a:	f1bc 0f00 	cmp.w	ip, #0
 8005d0e:	da05      	bge.n	8005d1c <_strtol_l.constprop.0+0xd8>
 8005d10:	2322      	movs	r3, #34	; 0x22
 8005d12:	6003      	str	r3, [r0, #0]
 8005d14:	4646      	mov	r6, r8
 8005d16:	b942      	cbnz	r2, 8005d2a <_strtol_l.constprop.0+0xe6>
 8005d18:	4630      	mov	r0, r6
 8005d1a:	e79e      	b.n	8005c5a <_strtol_l.constprop.0+0x16>
 8005d1c:	b107      	cbz	r7, 8005d20 <_strtol_l.constprop.0+0xdc>
 8005d1e:	4276      	negs	r6, r6
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	d0f9      	beq.n	8005d18 <_strtol_l.constprop.0+0xd4>
 8005d24:	f1bc 0f00 	cmp.w	ip, #0
 8005d28:	d000      	beq.n	8005d2c <_strtol_l.constprop.0+0xe8>
 8005d2a:	1e69      	subs	r1, r5, #1
 8005d2c:	6011      	str	r1, [r2, #0]
 8005d2e:	e7f3      	b.n	8005d18 <_strtol_l.constprop.0+0xd4>
 8005d30:	2430      	movs	r4, #48	; 0x30
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1b1      	bne.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005d36:	2308      	movs	r3, #8
 8005d38:	e7af      	b.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005d3a:	2c30      	cmp	r4, #48	; 0x30
 8005d3c:	d0a5      	beq.n	8005c8a <_strtol_l.constprop.0+0x46>
 8005d3e:	230a      	movs	r3, #10
 8005d40:	e7ab      	b.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005d42:	bf00      	nop
 8005d44:	080067a3 	.word	0x080067a3

08005d48 <_strtol_r>:
 8005d48:	f7ff bf7c 	b.w	8005c44 <_strtol_l.constprop.0>

08005d4c <_strtoul_l.constprop.0>:
 8005d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d50:	4f36      	ldr	r7, [pc, #216]	; (8005e2c <_strtoul_l.constprop.0+0xe0>)
 8005d52:	4686      	mov	lr, r0
 8005d54:	460d      	mov	r5, r1
 8005d56:	4628      	mov	r0, r5
 8005d58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d5c:	5de6      	ldrb	r6, [r4, r7]
 8005d5e:	f016 0608 	ands.w	r6, r6, #8
 8005d62:	d1f8      	bne.n	8005d56 <_strtoul_l.constprop.0+0xa>
 8005d64:	2c2d      	cmp	r4, #45	; 0x2d
 8005d66:	d12f      	bne.n	8005dc8 <_strtoul_l.constprop.0+0x7c>
 8005d68:	782c      	ldrb	r4, [r5, #0]
 8005d6a:	2601      	movs	r6, #1
 8005d6c:	1c85      	adds	r5, r0, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d057      	beq.n	8005e22 <_strtoul_l.constprop.0+0xd6>
 8005d72:	2b10      	cmp	r3, #16
 8005d74:	d109      	bne.n	8005d8a <_strtoul_l.constprop.0+0x3e>
 8005d76:	2c30      	cmp	r4, #48	; 0x30
 8005d78:	d107      	bne.n	8005d8a <_strtoul_l.constprop.0+0x3e>
 8005d7a:	7828      	ldrb	r0, [r5, #0]
 8005d7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005d80:	2858      	cmp	r0, #88	; 0x58
 8005d82:	d149      	bne.n	8005e18 <_strtoul_l.constprop.0+0xcc>
 8005d84:	786c      	ldrb	r4, [r5, #1]
 8005d86:	2310      	movs	r3, #16
 8005d88:	3502      	adds	r5, #2
 8005d8a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005d8e:	2700      	movs	r7, #0
 8005d90:	fbb8 f8f3 	udiv	r8, r8, r3
 8005d94:	fb03 f908 	mul.w	r9, r3, r8
 8005d98:	ea6f 0909 	mvn.w	r9, r9
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005da2:	f1bc 0f09 	cmp.w	ip, #9
 8005da6:	d814      	bhi.n	8005dd2 <_strtoul_l.constprop.0+0x86>
 8005da8:	4664      	mov	r4, ip
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	dd22      	ble.n	8005df4 <_strtoul_l.constprop.0+0xa8>
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	db1d      	blt.n	8005dee <_strtoul_l.constprop.0+0xa2>
 8005db2:	4580      	cmp	r8, r0
 8005db4:	d31b      	bcc.n	8005dee <_strtoul_l.constprop.0+0xa2>
 8005db6:	d101      	bne.n	8005dbc <_strtoul_l.constprop.0+0x70>
 8005db8:	45a1      	cmp	r9, r4
 8005dba:	db18      	blt.n	8005dee <_strtoul_l.constprop.0+0xa2>
 8005dbc:	fb00 4003 	mla	r0, r0, r3, r4
 8005dc0:	2701      	movs	r7, #1
 8005dc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dc6:	e7ea      	b.n	8005d9e <_strtoul_l.constprop.0+0x52>
 8005dc8:	2c2b      	cmp	r4, #43	; 0x2b
 8005dca:	bf04      	itt	eq
 8005dcc:	782c      	ldrbeq	r4, [r5, #0]
 8005dce:	1c85      	addeq	r5, r0, #2
 8005dd0:	e7cd      	b.n	8005d6e <_strtoul_l.constprop.0+0x22>
 8005dd2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005dd6:	f1bc 0f19 	cmp.w	ip, #25
 8005dda:	d801      	bhi.n	8005de0 <_strtoul_l.constprop.0+0x94>
 8005ddc:	3c37      	subs	r4, #55	; 0x37
 8005dde:	e7e4      	b.n	8005daa <_strtoul_l.constprop.0+0x5e>
 8005de0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005de4:	f1bc 0f19 	cmp.w	ip, #25
 8005de8:	d804      	bhi.n	8005df4 <_strtoul_l.constprop.0+0xa8>
 8005dea:	3c57      	subs	r4, #87	; 0x57
 8005dec:	e7dd      	b.n	8005daa <_strtoul_l.constprop.0+0x5e>
 8005dee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005df2:	e7e6      	b.n	8005dc2 <_strtoul_l.constprop.0+0x76>
 8005df4:	2f00      	cmp	r7, #0
 8005df6:	da07      	bge.n	8005e08 <_strtoul_l.constprop.0+0xbc>
 8005df8:	2322      	movs	r3, #34	; 0x22
 8005dfa:	f8ce 3000 	str.w	r3, [lr]
 8005dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e02:	b932      	cbnz	r2, 8005e12 <_strtoul_l.constprop.0+0xc6>
 8005e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e08:	b106      	cbz	r6, 8005e0c <_strtoul_l.constprop.0+0xc0>
 8005e0a:	4240      	negs	r0, r0
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	d0f9      	beq.n	8005e04 <_strtoul_l.constprop.0+0xb8>
 8005e10:	b107      	cbz	r7, 8005e14 <_strtoul_l.constprop.0+0xc8>
 8005e12:	1e69      	subs	r1, r5, #1
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	e7f5      	b.n	8005e04 <_strtoul_l.constprop.0+0xb8>
 8005e18:	2430      	movs	r4, #48	; 0x30
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1b5      	bne.n	8005d8a <_strtoul_l.constprop.0+0x3e>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	e7b3      	b.n	8005d8a <_strtoul_l.constprop.0+0x3e>
 8005e22:	2c30      	cmp	r4, #48	; 0x30
 8005e24:	d0a9      	beq.n	8005d7a <_strtoul_l.constprop.0+0x2e>
 8005e26:	230a      	movs	r3, #10
 8005e28:	e7af      	b.n	8005d8a <_strtoul_l.constprop.0+0x3e>
 8005e2a:	bf00      	nop
 8005e2c:	080067a3 	.word	0x080067a3

08005e30 <_strtoul_r>:
 8005e30:	f7ff bf8c 	b.w	8005d4c <_strtoul_l.constprop.0>

08005e34 <__submore>:
 8005e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e38:	460c      	mov	r4, r1
 8005e3a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e40:	4299      	cmp	r1, r3
 8005e42:	d11d      	bne.n	8005e80 <__submore+0x4c>
 8005e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e48:	f7fe fec0 	bl	8004bcc <_malloc_r>
 8005e4c:	b918      	cbnz	r0, 8005e56 <__submore+0x22>
 8005e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5a:	63a3      	str	r3, [r4, #56]	; 0x38
 8005e5c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005e60:	6360      	str	r0, [r4, #52]	; 0x34
 8005e62:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005e66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005e6a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005e6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005e72:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005e76:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005e7a:	6020      	str	r0, [r4, #0]
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e7e8      	b.n	8005e52 <__submore+0x1e>
 8005e80:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005e82:	0077      	lsls	r7, r6, #1
 8005e84:	463a      	mov	r2, r7
 8005e86:	f000 fb2b 	bl	80064e0 <_realloc_r>
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d0de      	beq.n	8005e4e <__submore+0x1a>
 8005e90:	eb00 0806 	add.w	r8, r0, r6
 8005e94:	4601      	mov	r1, r0
 8005e96:	4632      	mov	r2, r6
 8005e98:	4640      	mov	r0, r8
 8005e9a:	f000 faed 	bl	8006478 <memcpy>
 8005e9e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005ea2:	f8c4 8000 	str.w	r8, [r4]
 8005ea6:	e7e9      	b.n	8005e7c <__submore+0x48>

08005ea8 <__swbuf_r>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	460e      	mov	r6, r1
 8005eac:	4614      	mov	r4, r2
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b118      	cbz	r0, 8005eba <__swbuf_r+0x12>
 8005eb2:	6983      	ldr	r3, [r0, #24]
 8005eb4:	b90b      	cbnz	r3, 8005eba <__swbuf_r+0x12>
 8005eb6:	f000 f9d9 	bl	800626c <__sinit>
 8005eba:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <__swbuf_r+0x98>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d12b      	bne.n	8005f18 <__swbuf_r+0x70>
 8005ec0:	686c      	ldr	r4, [r5, #4]
 8005ec2:	69a3      	ldr	r3, [r4, #24]
 8005ec4:	60a3      	str	r3, [r4, #8]
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	071a      	lsls	r2, r3, #28
 8005eca:	d52f      	bpl.n	8005f2c <__swbuf_r+0x84>
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	b36b      	cbz	r3, 8005f2c <__swbuf_r+0x84>
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	1ac0      	subs	r0, r0, r3
 8005ed6:	6963      	ldr	r3, [r4, #20]
 8005ed8:	b2f6      	uxtb	r6, r6
 8005eda:	4283      	cmp	r3, r0
 8005edc:	4637      	mov	r7, r6
 8005ede:	dc04      	bgt.n	8005eea <__swbuf_r+0x42>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f000 f92e 	bl	8006144 <_fflush_r>
 8005ee8:	bb30      	cbnz	r0, 8005f38 <__swbuf_r+0x90>
 8005eea:	68a3      	ldr	r3, [r4, #8]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	60a3      	str	r3, [r4, #8]
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	6022      	str	r2, [r4, #0]
 8005ef6:	701e      	strb	r6, [r3, #0]
 8005ef8:	6963      	ldr	r3, [r4, #20]
 8005efa:	3001      	adds	r0, #1
 8005efc:	4283      	cmp	r3, r0
 8005efe:	d004      	beq.n	8005f0a <__swbuf_r+0x62>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	07db      	lsls	r3, r3, #31
 8005f04:	d506      	bpl.n	8005f14 <__swbuf_r+0x6c>
 8005f06:	2e0a      	cmp	r6, #10
 8005f08:	d104      	bne.n	8005f14 <__swbuf_r+0x6c>
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 f919 	bl	8006144 <_fflush_r>
 8005f12:	b988      	cbnz	r0, 8005f38 <__swbuf_r+0x90>
 8005f14:	4638      	mov	r0, r7
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <__swbuf_r+0x9c>)
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	d101      	bne.n	8005f22 <__swbuf_r+0x7a>
 8005f1e:	68ac      	ldr	r4, [r5, #8]
 8005f20:	e7cf      	b.n	8005ec2 <__swbuf_r+0x1a>
 8005f22:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <__swbuf_r+0xa0>)
 8005f24:	429c      	cmp	r4, r3
 8005f26:	bf08      	it	eq
 8005f28:	68ec      	ldreq	r4, [r5, #12]
 8005f2a:	e7ca      	b.n	8005ec2 <__swbuf_r+0x1a>
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f000 f80c 	bl	8005f4c <__swsetup_r>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d0cb      	beq.n	8005ed0 <__swbuf_r+0x28>
 8005f38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005f3c:	e7ea      	b.n	8005f14 <__swbuf_r+0x6c>
 8005f3e:	bf00      	nop
 8005f40:	080068c4 	.word	0x080068c4
 8005f44:	080068e4 	.word	0x080068e4
 8005f48:	080068a4 	.word	0x080068a4

08005f4c <__swsetup_r>:
 8005f4c:	4b32      	ldr	r3, [pc, #200]	; (8006018 <__swsetup_r+0xcc>)
 8005f4e:	b570      	push	{r4, r5, r6, lr}
 8005f50:	681d      	ldr	r5, [r3, #0]
 8005f52:	4606      	mov	r6, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	b125      	cbz	r5, 8005f62 <__swsetup_r+0x16>
 8005f58:	69ab      	ldr	r3, [r5, #24]
 8005f5a:	b913      	cbnz	r3, 8005f62 <__swsetup_r+0x16>
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 f985 	bl	800626c <__sinit>
 8005f62:	4b2e      	ldr	r3, [pc, #184]	; (800601c <__swsetup_r+0xd0>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	d10f      	bne.n	8005f88 <__swsetup_r+0x3c>
 8005f68:	686c      	ldr	r4, [r5, #4]
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f70:	0719      	lsls	r1, r3, #28
 8005f72:	d42c      	bmi.n	8005fce <__swsetup_r+0x82>
 8005f74:	06dd      	lsls	r5, r3, #27
 8005f76:	d411      	bmi.n	8005f9c <__swsetup_r+0x50>
 8005f78:	2309      	movs	r3, #9
 8005f7a:	6033      	str	r3, [r6, #0]
 8005f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f86:	e03e      	b.n	8006006 <__swsetup_r+0xba>
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <__swsetup_r+0xd4>)
 8005f8a:	429c      	cmp	r4, r3
 8005f8c:	d101      	bne.n	8005f92 <__swsetup_r+0x46>
 8005f8e:	68ac      	ldr	r4, [r5, #8]
 8005f90:	e7eb      	b.n	8005f6a <__swsetup_r+0x1e>
 8005f92:	4b24      	ldr	r3, [pc, #144]	; (8006024 <__swsetup_r+0xd8>)
 8005f94:	429c      	cmp	r4, r3
 8005f96:	bf08      	it	eq
 8005f98:	68ec      	ldreq	r4, [r5, #12]
 8005f9a:	e7e6      	b.n	8005f6a <__swsetup_r+0x1e>
 8005f9c:	0758      	lsls	r0, r3, #29
 8005f9e:	d512      	bpl.n	8005fc6 <__swsetup_r+0x7a>
 8005fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fa2:	b141      	cbz	r1, 8005fb6 <__swsetup_r+0x6a>
 8005fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fa8:	4299      	cmp	r1, r3
 8005faa:	d002      	beq.n	8005fb2 <__swsetup_r+0x66>
 8005fac:	4630      	mov	r0, r6
 8005fae:	f7fe fda1 	bl	8004af4 <_free_r>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6063      	str	r3, [r4, #4]
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f043 0308 	orr.w	r3, r3, #8
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	b94b      	cbnz	r3, 8005fe6 <__swsetup_r+0x9a>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fdc:	d003      	beq.n	8005fe6 <__swsetup_r+0x9a>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 fa09 	bl	80063f8 <__smakebuf_r>
 8005fe6:	89a0      	ldrh	r0, [r4, #12]
 8005fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fec:	f010 0301 	ands.w	r3, r0, #1
 8005ff0:	d00a      	beq.n	8006008 <__swsetup_r+0xbc>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60a3      	str	r3, [r4, #8]
 8005ff6:	6963      	ldr	r3, [r4, #20]
 8005ff8:	425b      	negs	r3, r3
 8005ffa:	61a3      	str	r3, [r4, #24]
 8005ffc:	6923      	ldr	r3, [r4, #16]
 8005ffe:	b943      	cbnz	r3, 8006012 <__swsetup_r+0xc6>
 8006000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006004:	d1ba      	bne.n	8005f7c <__swsetup_r+0x30>
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	0781      	lsls	r1, r0, #30
 800600a:	bf58      	it	pl
 800600c:	6963      	ldrpl	r3, [r4, #20]
 800600e:	60a3      	str	r3, [r4, #8]
 8006010:	e7f4      	b.n	8005ffc <__swsetup_r+0xb0>
 8006012:	2000      	movs	r0, #0
 8006014:	e7f7      	b.n	8006006 <__swsetup_r+0xba>
 8006016:	bf00      	nop
 8006018:	2000000c 	.word	0x2000000c
 800601c:	080068c4 	.word	0x080068c4
 8006020:	080068e4 	.word	0x080068e4
 8006024:	080068a4 	.word	0x080068a4

08006028 <abort>:
 8006028:	b508      	push	{r3, lr}
 800602a:	2006      	movs	r0, #6
 800602c:	f000 fab0 	bl	8006590 <raise>
 8006030:	2001      	movs	r0, #1
 8006032:	f7fb fb3f 	bl	80016b4 <_exit>
	...

08006038 <__sflush_r>:
 8006038:	898a      	ldrh	r2, [r1, #12]
 800603a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800603e:	4605      	mov	r5, r0
 8006040:	0710      	lsls	r0, r2, #28
 8006042:	460c      	mov	r4, r1
 8006044:	d458      	bmi.n	80060f8 <__sflush_r+0xc0>
 8006046:	684b      	ldr	r3, [r1, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dc05      	bgt.n	8006058 <__sflush_r+0x20>
 800604c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	dc02      	bgt.n	8006058 <__sflush_r+0x20>
 8006052:	2000      	movs	r0, #0
 8006054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800605a:	2e00      	cmp	r6, #0
 800605c:	d0f9      	beq.n	8006052 <__sflush_r+0x1a>
 800605e:	2300      	movs	r3, #0
 8006060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006064:	682f      	ldr	r7, [r5, #0]
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	d032      	beq.n	80060d0 <__sflush_r+0x98>
 800606a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	075a      	lsls	r2, r3, #29
 8006070:	d505      	bpl.n	800607e <__sflush_r+0x46>
 8006072:	6863      	ldr	r3, [r4, #4]
 8006074:	1ac0      	subs	r0, r0, r3
 8006076:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006078:	b10b      	cbz	r3, 800607e <__sflush_r+0x46>
 800607a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800607c:	1ac0      	subs	r0, r0, r3
 800607e:	2300      	movs	r3, #0
 8006080:	4602      	mov	r2, r0
 8006082:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006084:	6a21      	ldr	r1, [r4, #32]
 8006086:	4628      	mov	r0, r5
 8006088:	47b0      	blx	r6
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	d106      	bne.n	800609e <__sflush_r+0x66>
 8006090:	6829      	ldr	r1, [r5, #0]
 8006092:	291d      	cmp	r1, #29
 8006094:	d82c      	bhi.n	80060f0 <__sflush_r+0xb8>
 8006096:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <__sflush_r+0x108>)
 8006098:	40ca      	lsrs	r2, r1
 800609a:	07d6      	lsls	r6, r2, #31
 800609c:	d528      	bpl.n	80060f0 <__sflush_r+0xb8>
 800609e:	2200      	movs	r2, #0
 80060a0:	6062      	str	r2, [r4, #4]
 80060a2:	04d9      	lsls	r1, r3, #19
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	6022      	str	r2, [r4, #0]
 80060a8:	d504      	bpl.n	80060b4 <__sflush_r+0x7c>
 80060aa:	1c42      	adds	r2, r0, #1
 80060ac:	d101      	bne.n	80060b2 <__sflush_r+0x7a>
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	b903      	cbnz	r3, 80060b4 <__sflush_r+0x7c>
 80060b2:	6560      	str	r0, [r4, #84]	; 0x54
 80060b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b6:	602f      	str	r7, [r5, #0]
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d0ca      	beq.n	8006052 <__sflush_r+0x1a>
 80060bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060c0:	4299      	cmp	r1, r3
 80060c2:	d002      	beq.n	80060ca <__sflush_r+0x92>
 80060c4:	4628      	mov	r0, r5
 80060c6:	f7fe fd15 	bl	8004af4 <_free_r>
 80060ca:	2000      	movs	r0, #0
 80060cc:	6360      	str	r0, [r4, #52]	; 0x34
 80060ce:	e7c1      	b.n	8006054 <__sflush_r+0x1c>
 80060d0:	6a21      	ldr	r1, [r4, #32]
 80060d2:	2301      	movs	r3, #1
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b0      	blx	r6
 80060d8:	1c41      	adds	r1, r0, #1
 80060da:	d1c7      	bne.n	800606c <__sflush_r+0x34>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0c4      	beq.n	800606c <__sflush_r+0x34>
 80060e2:	2b1d      	cmp	r3, #29
 80060e4:	d001      	beq.n	80060ea <__sflush_r+0xb2>
 80060e6:	2b16      	cmp	r3, #22
 80060e8:	d101      	bne.n	80060ee <__sflush_r+0xb6>
 80060ea:	602f      	str	r7, [r5, #0]
 80060ec:	e7b1      	b.n	8006052 <__sflush_r+0x1a>
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	e7ad      	b.n	8006054 <__sflush_r+0x1c>
 80060f8:	690f      	ldr	r7, [r1, #16]
 80060fa:	2f00      	cmp	r7, #0
 80060fc:	d0a9      	beq.n	8006052 <__sflush_r+0x1a>
 80060fe:	0793      	lsls	r3, r2, #30
 8006100:	680e      	ldr	r6, [r1, #0]
 8006102:	bf08      	it	eq
 8006104:	694b      	ldreq	r3, [r1, #20]
 8006106:	600f      	str	r7, [r1, #0]
 8006108:	bf18      	it	ne
 800610a:	2300      	movne	r3, #0
 800610c:	eba6 0807 	sub.w	r8, r6, r7
 8006110:	608b      	str	r3, [r1, #8]
 8006112:	f1b8 0f00 	cmp.w	r8, #0
 8006116:	dd9c      	ble.n	8006052 <__sflush_r+0x1a>
 8006118:	6a21      	ldr	r1, [r4, #32]
 800611a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800611c:	4643      	mov	r3, r8
 800611e:	463a      	mov	r2, r7
 8006120:	4628      	mov	r0, r5
 8006122:	47b0      	blx	r6
 8006124:	2800      	cmp	r0, #0
 8006126:	dc06      	bgt.n	8006136 <__sflush_r+0xfe>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612e:	81a3      	strh	r3, [r4, #12]
 8006130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006134:	e78e      	b.n	8006054 <__sflush_r+0x1c>
 8006136:	4407      	add	r7, r0
 8006138:	eba8 0800 	sub.w	r8, r8, r0
 800613c:	e7e9      	b.n	8006112 <__sflush_r+0xda>
 800613e:	bf00      	nop
 8006140:	20400001 	.word	0x20400001

08006144 <_fflush_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	690b      	ldr	r3, [r1, #16]
 8006148:	4605      	mov	r5, r0
 800614a:	460c      	mov	r4, r1
 800614c:	b913      	cbnz	r3, 8006154 <_fflush_r+0x10>
 800614e:	2500      	movs	r5, #0
 8006150:	4628      	mov	r0, r5
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	b118      	cbz	r0, 800615e <_fflush_r+0x1a>
 8006156:	6983      	ldr	r3, [r0, #24]
 8006158:	b90b      	cbnz	r3, 800615e <_fflush_r+0x1a>
 800615a:	f000 f887 	bl	800626c <__sinit>
 800615e:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <_fflush_r+0x6c>)
 8006160:	429c      	cmp	r4, r3
 8006162:	d11b      	bne.n	800619c <_fflush_r+0x58>
 8006164:	686c      	ldr	r4, [r5, #4]
 8006166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0ef      	beq.n	800614e <_fflush_r+0xa>
 800616e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006170:	07d0      	lsls	r0, r2, #31
 8006172:	d404      	bmi.n	800617e <_fflush_r+0x3a>
 8006174:	0599      	lsls	r1, r3, #22
 8006176:	d402      	bmi.n	800617e <_fflush_r+0x3a>
 8006178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800617a:	f000 f915 	bl	80063a8 <__retarget_lock_acquire_recursive>
 800617e:	4628      	mov	r0, r5
 8006180:	4621      	mov	r1, r4
 8006182:	f7ff ff59 	bl	8006038 <__sflush_r>
 8006186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006188:	07da      	lsls	r2, r3, #31
 800618a:	4605      	mov	r5, r0
 800618c:	d4e0      	bmi.n	8006150 <_fflush_r+0xc>
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	059b      	lsls	r3, r3, #22
 8006192:	d4dd      	bmi.n	8006150 <_fflush_r+0xc>
 8006194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006196:	f000 f908 	bl	80063aa <__retarget_lock_release_recursive>
 800619a:	e7d9      	b.n	8006150 <_fflush_r+0xc>
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <_fflush_r+0x70>)
 800619e:	429c      	cmp	r4, r3
 80061a0:	d101      	bne.n	80061a6 <_fflush_r+0x62>
 80061a2:	68ac      	ldr	r4, [r5, #8]
 80061a4:	e7df      	b.n	8006166 <_fflush_r+0x22>
 80061a6:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <_fflush_r+0x74>)
 80061a8:	429c      	cmp	r4, r3
 80061aa:	bf08      	it	eq
 80061ac:	68ec      	ldreq	r4, [r5, #12]
 80061ae:	e7da      	b.n	8006166 <_fflush_r+0x22>
 80061b0:	080068c4 	.word	0x080068c4
 80061b4:	080068e4 	.word	0x080068e4
 80061b8:	080068a4 	.word	0x080068a4

080061bc <std>:
 80061bc:	2300      	movs	r3, #0
 80061be:	b510      	push	{r4, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	e9c0 3300 	strd	r3, r3, [r0]
 80061c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ca:	6083      	str	r3, [r0, #8]
 80061cc:	8181      	strh	r1, [r0, #12]
 80061ce:	6643      	str	r3, [r0, #100]	; 0x64
 80061d0:	81c2      	strh	r2, [r0, #14]
 80061d2:	6183      	str	r3, [r0, #24]
 80061d4:	4619      	mov	r1, r3
 80061d6:	2208      	movs	r2, #8
 80061d8:	305c      	adds	r0, #92	; 0x5c
 80061da:	f7fe fb29 	bl	8004830 <memset>
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <std+0x38>)
 80061e0:	6263      	str	r3, [r4, #36]	; 0x24
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <std+0x3c>)
 80061e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <std+0x40>)
 80061e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061ea:	4b05      	ldr	r3, [pc, #20]	; (8006200 <std+0x44>)
 80061ec:	6224      	str	r4, [r4, #32]
 80061ee:	6323      	str	r3, [r4, #48]	; 0x30
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	bf00      	nop
 80061f4:	080048d9 	.word	0x080048d9
 80061f8:	080048ff 	.word	0x080048ff
 80061fc:	08004937 	.word	0x08004937
 8006200:	0800495b 	.word	0x0800495b

08006204 <_cleanup_r>:
 8006204:	4901      	ldr	r1, [pc, #4]	; (800620c <_cleanup_r+0x8>)
 8006206:	f000 b8af 	b.w	8006368 <_fwalk_reent>
 800620a:	bf00      	nop
 800620c:	08006145 	.word	0x08006145

08006210 <__sfmoreglue>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	2268      	movs	r2, #104	; 0x68
 8006214:	1e4d      	subs	r5, r1, #1
 8006216:	4355      	muls	r5, r2
 8006218:	460e      	mov	r6, r1
 800621a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800621e:	f7fe fcd5 	bl	8004bcc <_malloc_r>
 8006222:	4604      	mov	r4, r0
 8006224:	b140      	cbz	r0, 8006238 <__sfmoreglue+0x28>
 8006226:	2100      	movs	r1, #0
 8006228:	e9c0 1600 	strd	r1, r6, [r0]
 800622c:	300c      	adds	r0, #12
 800622e:	60a0      	str	r0, [r4, #8]
 8006230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006234:	f7fe fafc 	bl	8004830 <memset>
 8006238:	4620      	mov	r0, r4
 800623a:	bd70      	pop	{r4, r5, r6, pc}

0800623c <__sfp_lock_acquire>:
 800623c:	4801      	ldr	r0, [pc, #4]	; (8006244 <__sfp_lock_acquire+0x8>)
 800623e:	f000 b8b3 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 8006242:	bf00      	nop
 8006244:	2000012d 	.word	0x2000012d

08006248 <__sfp_lock_release>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__sfp_lock_release+0x8>)
 800624a:	f000 b8ae 	b.w	80063aa <__retarget_lock_release_recursive>
 800624e:	bf00      	nop
 8006250:	2000012d 	.word	0x2000012d

08006254 <__sinit_lock_acquire>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__sinit_lock_acquire+0x8>)
 8006256:	f000 b8a7 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 800625a:	bf00      	nop
 800625c:	2000012e 	.word	0x2000012e

08006260 <__sinit_lock_release>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__sinit_lock_release+0x8>)
 8006262:	f000 b8a2 	b.w	80063aa <__retarget_lock_release_recursive>
 8006266:	bf00      	nop
 8006268:	2000012e 	.word	0x2000012e

0800626c <__sinit>:
 800626c:	b510      	push	{r4, lr}
 800626e:	4604      	mov	r4, r0
 8006270:	f7ff fff0 	bl	8006254 <__sinit_lock_acquire>
 8006274:	69a3      	ldr	r3, [r4, #24]
 8006276:	b11b      	cbz	r3, 8006280 <__sinit+0x14>
 8006278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800627c:	f7ff bff0 	b.w	8006260 <__sinit_lock_release>
 8006280:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006284:	6523      	str	r3, [r4, #80]	; 0x50
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <__sinit+0x68>)
 8006288:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <__sinit+0x6c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	62a2      	str	r2, [r4, #40]	; 0x28
 800628e:	42a3      	cmp	r3, r4
 8006290:	bf04      	itt	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	61a3      	streq	r3, [r4, #24]
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f820 	bl	80062dc <__sfp>
 800629c:	6060      	str	r0, [r4, #4]
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 f81c 	bl	80062dc <__sfp>
 80062a4:	60a0      	str	r0, [r4, #8]
 80062a6:	4620      	mov	r0, r4
 80062a8:	f000 f818 	bl	80062dc <__sfp>
 80062ac:	2200      	movs	r2, #0
 80062ae:	60e0      	str	r0, [r4, #12]
 80062b0:	2104      	movs	r1, #4
 80062b2:	6860      	ldr	r0, [r4, #4]
 80062b4:	f7ff ff82 	bl	80061bc <std>
 80062b8:	68a0      	ldr	r0, [r4, #8]
 80062ba:	2201      	movs	r2, #1
 80062bc:	2109      	movs	r1, #9
 80062be:	f7ff ff7d 	bl	80061bc <std>
 80062c2:	68e0      	ldr	r0, [r4, #12]
 80062c4:	2202      	movs	r2, #2
 80062c6:	2112      	movs	r1, #18
 80062c8:	f7ff ff78 	bl	80061bc <std>
 80062cc:	2301      	movs	r3, #1
 80062ce:	61a3      	str	r3, [r4, #24]
 80062d0:	e7d2      	b.n	8006278 <__sinit+0xc>
 80062d2:	bf00      	nop
 80062d4:	080066a0 	.word	0x080066a0
 80062d8:	08006205 	.word	0x08006205

080062dc <__sfp>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	4607      	mov	r7, r0
 80062e0:	f7ff ffac 	bl	800623c <__sfp_lock_acquire>
 80062e4:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <__sfp+0x84>)
 80062e6:	681e      	ldr	r6, [r3, #0]
 80062e8:	69b3      	ldr	r3, [r6, #24]
 80062ea:	b913      	cbnz	r3, 80062f2 <__sfp+0x16>
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7ff ffbd 	bl	800626c <__sinit>
 80062f2:	3648      	adds	r6, #72	; 0x48
 80062f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	d503      	bpl.n	8006304 <__sfp+0x28>
 80062fc:	6833      	ldr	r3, [r6, #0]
 80062fe:	b30b      	cbz	r3, 8006344 <__sfp+0x68>
 8006300:	6836      	ldr	r6, [r6, #0]
 8006302:	e7f7      	b.n	80062f4 <__sfp+0x18>
 8006304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006308:	b9d5      	cbnz	r5, 8006340 <__sfp+0x64>
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <__sfp+0x88>)
 800630c:	60e3      	str	r3, [r4, #12]
 800630e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006312:	6665      	str	r5, [r4, #100]	; 0x64
 8006314:	f000 f847 	bl	80063a6 <__retarget_lock_init_recursive>
 8006318:	f7ff ff96 	bl	8006248 <__sfp_lock_release>
 800631c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006320:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006324:	6025      	str	r5, [r4, #0]
 8006326:	61a5      	str	r5, [r4, #24]
 8006328:	2208      	movs	r2, #8
 800632a:	4629      	mov	r1, r5
 800632c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006330:	f7fe fa7e 	bl	8004830 <memset>
 8006334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800633c:	4620      	mov	r0, r4
 800633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006340:	3468      	adds	r4, #104	; 0x68
 8006342:	e7d9      	b.n	80062f8 <__sfp+0x1c>
 8006344:	2104      	movs	r1, #4
 8006346:	4638      	mov	r0, r7
 8006348:	f7ff ff62 	bl	8006210 <__sfmoreglue>
 800634c:	4604      	mov	r4, r0
 800634e:	6030      	str	r0, [r6, #0]
 8006350:	2800      	cmp	r0, #0
 8006352:	d1d5      	bne.n	8006300 <__sfp+0x24>
 8006354:	f7ff ff78 	bl	8006248 <__sfp_lock_release>
 8006358:	230c      	movs	r3, #12
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	e7ee      	b.n	800633c <__sfp+0x60>
 800635e:	bf00      	nop
 8006360:	080066a0 	.word	0x080066a0
 8006364:	ffff0001 	.word	0xffff0001

08006368 <_fwalk_reent>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	4606      	mov	r6, r0
 800636e:	4688      	mov	r8, r1
 8006370:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006374:	2700      	movs	r7, #0
 8006376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800637a:	f1b9 0901 	subs.w	r9, r9, #1
 800637e:	d505      	bpl.n	800638c <_fwalk_reent+0x24>
 8006380:	6824      	ldr	r4, [r4, #0]
 8006382:	2c00      	cmp	r4, #0
 8006384:	d1f7      	bne.n	8006376 <_fwalk_reent+0xe>
 8006386:	4638      	mov	r0, r7
 8006388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638c:	89ab      	ldrh	r3, [r5, #12]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d907      	bls.n	80063a2 <_fwalk_reent+0x3a>
 8006392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006396:	3301      	adds	r3, #1
 8006398:	d003      	beq.n	80063a2 <_fwalk_reent+0x3a>
 800639a:	4629      	mov	r1, r5
 800639c:	4630      	mov	r0, r6
 800639e:	47c0      	blx	r8
 80063a0:	4307      	orrs	r7, r0
 80063a2:	3568      	adds	r5, #104	; 0x68
 80063a4:	e7e9      	b.n	800637a <_fwalk_reent+0x12>

080063a6 <__retarget_lock_init_recursive>:
 80063a6:	4770      	bx	lr

080063a8 <__retarget_lock_acquire_recursive>:
 80063a8:	4770      	bx	lr

080063aa <__retarget_lock_release_recursive>:
 80063aa:	4770      	bx	lr

080063ac <__swhatbuf_r>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	460e      	mov	r6, r1
 80063b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b4:	2900      	cmp	r1, #0
 80063b6:	b096      	sub	sp, #88	; 0x58
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	da08      	bge.n	80063d0 <__swhatbuf_r+0x24>
 80063be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	061a      	lsls	r2, r3, #24
 80063c8:	d410      	bmi.n	80063ec <__swhatbuf_r+0x40>
 80063ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ce:	e00e      	b.n	80063ee <__swhatbuf_r+0x42>
 80063d0:	466a      	mov	r2, sp
 80063d2:	f000 f8f9 	bl	80065c8 <_fstat_r>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	dbf1      	blt.n	80063be <__swhatbuf_r+0x12>
 80063da:	9a01      	ldr	r2, [sp, #4]
 80063dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063e4:	425a      	negs	r2, r3
 80063e6:	415a      	adcs	r2, r3
 80063e8:	602a      	str	r2, [r5, #0]
 80063ea:	e7ee      	b.n	80063ca <__swhatbuf_r+0x1e>
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	2000      	movs	r0, #0
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	b016      	add	sp, #88	; 0x58
 80063f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080063f8 <__smakebuf_r>:
 80063f8:	898b      	ldrh	r3, [r1, #12]
 80063fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063fc:	079d      	lsls	r5, r3, #30
 80063fe:	4606      	mov	r6, r0
 8006400:	460c      	mov	r4, r1
 8006402:	d507      	bpl.n	8006414 <__smakebuf_r+0x1c>
 8006404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	6123      	str	r3, [r4, #16]
 800640c:	2301      	movs	r3, #1
 800640e:	6163      	str	r3, [r4, #20]
 8006410:	b002      	add	sp, #8
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	ab01      	add	r3, sp, #4
 8006416:	466a      	mov	r2, sp
 8006418:	f7ff ffc8 	bl	80063ac <__swhatbuf_r>
 800641c:	9900      	ldr	r1, [sp, #0]
 800641e:	4605      	mov	r5, r0
 8006420:	4630      	mov	r0, r6
 8006422:	f7fe fbd3 	bl	8004bcc <_malloc_r>
 8006426:	b948      	cbnz	r0, 800643c <__smakebuf_r+0x44>
 8006428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800642c:	059a      	lsls	r2, r3, #22
 800642e:	d4ef      	bmi.n	8006410 <__smakebuf_r+0x18>
 8006430:	f023 0303 	bic.w	r3, r3, #3
 8006434:	f043 0302 	orr.w	r3, r3, #2
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	e7e3      	b.n	8006404 <__smakebuf_r+0xc>
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <__smakebuf_r+0x7c>)
 800643e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	6020      	str	r0, [r4, #0]
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	81a3      	strh	r3, [r4, #12]
 800644a:	9b00      	ldr	r3, [sp, #0]
 800644c:	6163      	str	r3, [r4, #20]
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	6120      	str	r0, [r4, #16]
 8006452:	b15b      	cbz	r3, 800646c <__smakebuf_r+0x74>
 8006454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006458:	4630      	mov	r0, r6
 800645a:	f000 f8c7 	bl	80065ec <_isatty_r>
 800645e:	b128      	cbz	r0, 800646c <__smakebuf_r+0x74>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	89a0      	ldrh	r0, [r4, #12]
 800646e:	4305      	orrs	r5, r0
 8006470:	81a5      	strh	r5, [r4, #12]
 8006472:	e7cd      	b.n	8006410 <__smakebuf_r+0x18>
 8006474:	08006205 	.word	0x08006205

08006478 <memcpy>:
 8006478:	440a      	add	r2, r1
 800647a:	4291      	cmp	r1, r2
 800647c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006480:	d100      	bne.n	8006484 <memcpy+0xc>
 8006482:	4770      	bx	lr
 8006484:	b510      	push	{r4, lr}
 8006486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800648e:	4291      	cmp	r1, r2
 8006490:	d1f9      	bne.n	8006486 <memcpy+0xe>
 8006492:	bd10      	pop	{r4, pc}

08006494 <memmove>:
 8006494:	4288      	cmp	r0, r1
 8006496:	b510      	push	{r4, lr}
 8006498:	eb01 0402 	add.w	r4, r1, r2
 800649c:	d902      	bls.n	80064a4 <memmove+0x10>
 800649e:	4284      	cmp	r4, r0
 80064a0:	4623      	mov	r3, r4
 80064a2:	d807      	bhi.n	80064b4 <memmove+0x20>
 80064a4:	1e43      	subs	r3, r0, #1
 80064a6:	42a1      	cmp	r1, r4
 80064a8:	d008      	beq.n	80064bc <memmove+0x28>
 80064aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064b2:	e7f8      	b.n	80064a6 <memmove+0x12>
 80064b4:	4402      	add	r2, r0
 80064b6:	4601      	mov	r1, r0
 80064b8:	428a      	cmp	r2, r1
 80064ba:	d100      	bne.n	80064be <memmove+0x2a>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064c6:	e7f7      	b.n	80064b8 <memmove+0x24>

080064c8 <__malloc_lock>:
 80064c8:	4801      	ldr	r0, [pc, #4]	; (80064d0 <__malloc_lock+0x8>)
 80064ca:	f7ff bf6d 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 80064ce:	bf00      	nop
 80064d0:	2000012c 	.word	0x2000012c

080064d4 <__malloc_unlock>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__malloc_unlock+0x8>)
 80064d6:	f7ff bf68 	b.w	80063aa <__retarget_lock_release_recursive>
 80064da:	bf00      	nop
 80064dc:	2000012c 	.word	0x2000012c

080064e0 <_realloc_r>:
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	4680      	mov	r8, r0
 80064e6:	4614      	mov	r4, r2
 80064e8:	460e      	mov	r6, r1
 80064ea:	b921      	cbnz	r1, 80064f6 <_realloc_r+0x16>
 80064ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064f0:	4611      	mov	r1, r2
 80064f2:	f7fe bb6b 	b.w	8004bcc <_malloc_r>
 80064f6:	b92a      	cbnz	r2, 8006504 <_realloc_r+0x24>
 80064f8:	f7fe fafc 	bl	8004af4 <_free_r>
 80064fc:	4625      	mov	r5, r4
 80064fe:	4628      	mov	r0, r5
 8006500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006504:	f000 f882 	bl	800660c <_malloc_usable_size_r>
 8006508:	4284      	cmp	r4, r0
 800650a:	4607      	mov	r7, r0
 800650c:	d802      	bhi.n	8006514 <_realloc_r+0x34>
 800650e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006512:	d812      	bhi.n	800653a <_realloc_r+0x5a>
 8006514:	4621      	mov	r1, r4
 8006516:	4640      	mov	r0, r8
 8006518:	f7fe fb58 	bl	8004bcc <_malloc_r>
 800651c:	4605      	mov	r5, r0
 800651e:	2800      	cmp	r0, #0
 8006520:	d0ed      	beq.n	80064fe <_realloc_r+0x1e>
 8006522:	42bc      	cmp	r4, r7
 8006524:	4622      	mov	r2, r4
 8006526:	4631      	mov	r1, r6
 8006528:	bf28      	it	cs
 800652a:	463a      	movcs	r2, r7
 800652c:	f7ff ffa4 	bl	8006478 <memcpy>
 8006530:	4631      	mov	r1, r6
 8006532:	4640      	mov	r0, r8
 8006534:	f7fe fade 	bl	8004af4 <_free_r>
 8006538:	e7e1      	b.n	80064fe <_realloc_r+0x1e>
 800653a:	4635      	mov	r5, r6
 800653c:	e7df      	b.n	80064fe <_realloc_r+0x1e>

0800653e <_raise_r>:
 800653e:	291f      	cmp	r1, #31
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4604      	mov	r4, r0
 8006544:	460d      	mov	r5, r1
 8006546:	d904      	bls.n	8006552 <_raise_r+0x14>
 8006548:	2316      	movs	r3, #22
 800654a:	6003      	str	r3, [r0, #0]
 800654c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006554:	b112      	cbz	r2, 800655c <_raise_r+0x1e>
 8006556:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800655a:	b94b      	cbnz	r3, 8006570 <_raise_r+0x32>
 800655c:	4620      	mov	r0, r4
 800655e:	f000 f831 	bl	80065c4 <_getpid_r>
 8006562:	462a      	mov	r2, r5
 8006564:	4601      	mov	r1, r0
 8006566:	4620      	mov	r0, r4
 8006568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800656c:	f000 b818 	b.w	80065a0 <_kill_r>
 8006570:	2b01      	cmp	r3, #1
 8006572:	d00a      	beq.n	800658a <_raise_r+0x4c>
 8006574:	1c59      	adds	r1, r3, #1
 8006576:	d103      	bne.n	8006580 <_raise_r+0x42>
 8006578:	2316      	movs	r3, #22
 800657a:	6003      	str	r3, [r0, #0]
 800657c:	2001      	movs	r0, #1
 800657e:	e7e7      	b.n	8006550 <_raise_r+0x12>
 8006580:	2400      	movs	r4, #0
 8006582:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006586:	4628      	mov	r0, r5
 8006588:	4798      	blx	r3
 800658a:	2000      	movs	r0, #0
 800658c:	e7e0      	b.n	8006550 <_raise_r+0x12>
	...

08006590 <raise>:
 8006590:	4b02      	ldr	r3, [pc, #8]	; (800659c <raise+0xc>)
 8006592:	4601      	mov	r1, r0
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	f7ff bfd2 	b.w	800653e <_raise_r>
 800659a:	bf00      	nop
 800659c:	2000000c 	.word	0x2000000c

080065a0 <_kill_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d07      	ldr	r5, [pc, #28]	; (80065c0 <_kill_r+0x20>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	4611      	mov	r1, r2
 80065ac:	602b      	str	r3, [r5, #0]
 80065ae:	f7fb f871 	bl	8001694 <_kill>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	d102      	bne.n	80065bc <_kill_r+0x1c>
 80065b6:	682b      	ldr	r3, [r5, #0]
 80065b8:	b103      	cbz	r3, 80065bc <_kill_r+0x1c>
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	bd38      	pop	{r3, r4, r5, pc}
 80065be:	bf00      	nop
 80065c0:	20000128 	.word	0x20000128

080065c4 <_getpid_r>:
 80065c4:	f7fb b85e 	b.w	8001684 <_getpid>

080065c8 <_fstat_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4d07      	ldr	r5, [pc, #28]	; (80065e8 <_fstat_r+0x20>)
 80065cc:	2300      	movs	r3, #0
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	4611      	mov	r1, r2
 80065d4:	602b      	str	r3, [r5, #0]
 80065d6:	f7fb f8bc 	bl	8001752 <_fstat>
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	d102      	bne.n	80065e4 <_fstat_r+0x1c>
 80065de:	682b      	ldr	r3, [r5, #0]
 80065e0:	b103      	cbz	r3, 80065e4 <_fstat_r+0x1c>
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	bd38      	pop	{r3, r4, r5, pc}
 80065e6:	bf00      	nop
 80065e8:	20000128 	.word	0x20000128

080065ec <_isatty_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4d06      	ldr	r5, [pc, #24]	; (8006608 <_isatty_r+0x1c>)
 80065f0:	2300      	movs	r3, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	602b      	str	r3, [r5, #0]
 80065f8:	f7fb f8bb 	bl	8001772 <_isatty>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_isatty_r+0x1a>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_isatty_r+0x1a>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	20000128 	.word	0x20000128

0800660c <_malloc_usable_size_r>:
 800660c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006610:	1f18      	subs	r0, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfbc      	itt	lt
 8006616:	580b      	ldrlt	r3, [r1, r0]
 8006618:	18c0      	addlt	r0, r0, r3
 800661a:	4770      	bx	lr

0800661c <_init>:
 800661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661e:	bf00      	nop
 8006620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006622:	bc08      	pop	{r3}
 8006624:	469e      	mov	lr, r3
 8006626:	4770      	bx	lr

08006628 <_fini>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	bf00      	nop
 800662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662e:	bc08      	pop	{r3}
 8006630:	469e      	mov	lr, r3
 8006632:	4770      	bx	lr
