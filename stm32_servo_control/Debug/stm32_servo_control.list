
stm32_servo_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b14  08004b14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b1c  08004b1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b20  08004b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000def1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5b  00000000  00000000  0002df91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  0002fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c30  00000000  00000000  000309d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b80  00000000  00000000  00031608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4dd  00000000  00000000  00053188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc616  00000000  00000000  00061665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012dc7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d60  00000000  00000000  0012dccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004948 	.word	0x08004948

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004948 	.word	0x08004948

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <moveRobotArmJoint>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_UART4_Init(void);
static void moveRobotArmJoint(uint32_t value, CCR_Register ccr_register) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	70fb      	strb	r3, [r7, #3]
	  switch (ccr_register) {
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d002      	beq.n	80004e4 <moveRobotArmJoint+0x18>
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d009      	beq.n	80004f6 <moveRobotArmJoint+0x2a>
	      htim2.Instance->CCR2 = value;
	      HAL_Delay(600);
	      break;
	    default:
	      // handle error case
	      break;
 80004e2:	e011      	b.n	8000508 <moveRobotArmJoint+0x3c>
	      htim2.Instance->CCR1 = value;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <moveRobotArmJoint+0x44>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	635a      	str	r2, [r3, #52]	; 0x34
	      HAL_Delay(600);
 80004ec:	f44f 7016 	mov.w	r0, #600	; 0x258
 80004f0:	f000 fc76 	bl	8000de0 <HAL_Delay>
	      break;
 80004f4:	e008      	b.n	8000508 <moveRobotArmJoint+0x3c>
	      htim2.Instance->CCR2 = value;
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <moveRobotArmJoint+0x44>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	639a      	str	r2, [r3, #56]	; 0x38
	      HAL_Delay(600);
 80004fe:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000502:	f000 fc6d 	bl	8000de0 <HAL_Delay>
	      break;
 8000506:	bf00      	nop
	  }
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	2000008c 	.word	0x2000008c

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char rx_buffer[RX_BUFFER_SIZE];
	char tx_buffer[RX_BUFFER_SIZE];
	uint8_t rx_data;
	int rx_index = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fbed 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f85d 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f971 	bl	800080c <MX_GPIO_Init>
  MX_TIM2_Init();
 800052a:	f000 f8c3 	bl	80006b4 <MX_TIM2_Init>
  MX_UART4_Init();
 800052e:	f000 f943 	bl	80007b8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
    // BASE 1
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000532:	2100      	movs	r1, #0
 8000534:	4827      	ldr	r0, [pc, #156]	; (80005d4 <main+0xc0>)
 8000536:	f001 fcf7 	bl	8001f28 <HAL_TIM_PWM_Start>
  	// ARM 3
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800053a:	2104      	movs	r1, #4
 800053c:	4825      	ldr	r0, [pc, #148]	; (80005d4 <main+0xc0>)
 800053e:	f001 fcf3 	bl	8001f28 <HAL_TIM_PWM_Start>
	while (1)
  {
	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf ("Waiting for Rx data...\n");
 8000542:	4825      	ldr	r0, [pc, #148]	; (80005d8 <main+0xc4>)
 8000544:	f003 fce4 	bl	8003f10 <puts>
	HAL_UART_Receive(&huart4, &rx_data, 1, HAL_MAX_DELAY);
 8000548:	1df9      	adds	r1, r7, #7
 800054a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800054e:	2201      	movs	r2, #1
 8000550:	4822      	ldr	r0, [pc, #136]	; (80005dc <main+0xc8>)
 8000552:	f002 fc62 	bl	8002e1a <HAL_UART_Receive>
	while(rx_data != '\n' && rx_index < RX_BUFFER_SIZE - 1) {
 8000556:	e010      	b.n	800057a <main+0x66>
		// Add byte to the buffer
		rx_buffer[rx_index] = rx_data;
 8000558:	79f9      	ldrb	r1, [r7, #7]
 800055a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800055e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000560:	4413      	add	r3, r2
 8000562:	460a      	mov	r2, r1
 8000564:	701a      	strb	r2, [r3, #0]
		rx_index++;
 8000566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000568:	3301      	adds	r3, #1
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c

		// Receive next byte
		HAL_UART_Receive(&huart4, &rx_data, 1, HAL_MAX_DELAY);
 800056c:	1df9      	adds	r1, r7, #7
 800056e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000572:	2201      	movs	r2, #1
 8000574:	4819      	ldr	r0, [pc, #100]	; (80005dc <main+0xc8>)
 8000576:	f002 fc50 	bl	8002e1a <HAL_UART_Receive>
	while(rx_data != '\n' && rx_index < RX_BUFFER_SIZE - 1) {
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b0a      	cmp	r3, #10
 800057e:	d002      	beq.n	8000586 <main+0x72>
 8000580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000582:	2b1e      	cmp	r3, #30
 8000584:	dde8      	ble.n	8000558 <main+0x44>
	}
	rx_buffer[rx_index] = '\0';
 8000586:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800058a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800058c:	4413      	add	r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]

	int value = atoi(rx_buffer); // Convert received string to integer
 8000592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fc16 	bl	8003dc8 <atoi>
 800059c:	64b8      	str	r0, [r7, #72]	; 0x48

	  if (value >= 0 && value <= 255) { // Check if the value is within valid range
 800059e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	db0c      	blt.n	80005be <main+0xaa>
 80005a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005a6:	2bff      	cmp	r3, #255	; 0xff
 80005a8:	dc09      	bgt.n	80005be <main+0xaa>
		  moveRobotArmJoint(value, 0); // Call the setCCR2Value() function with the received value
 80005aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff8c 	bl	80004cc <moveRobotArmJoint>
		  moveRobotArmJoint(value, 1);
 80005b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005b6:	2101      	movs	r1, #1
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff87 	bl	80004cc <moveRobotArmJoint>
	  }
	  memset(rx_buffer, 0, sizeof(rx_buffer));
 80005be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c2:	2220      	movs	r2, #32
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fc2c 	bl	8003e24 <memset>
	  rx_index = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  {
 80005d0:	e7b7      	b.n	8000542 <main+0x2e>
 80005d2:	bf00      	nop
 80005d4:	2000008c 	.word	0x2000008c
 80005d8:	0800497c 	.word	0x0800497c
 80005dc:	200000d4 	.word	0x200000d4

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fc18 	bl	8003e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	; (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <SystemClock_Config+0xd0>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000654:	2354      	movs	r3, #84	; 0x54
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f000 ff1f 	bl	80014a8 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 f902 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f980 	bl	8001998 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069e:	f000 f8eb 	bl	8000878 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08e      	sub	sp, #56	; 0x38
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]
 80006e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e4:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <MX_TIM2_Init+0x100>)
 80006e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <MX_TIM2_Init+0x100>)
 80006ee:	f44f 7252 	mov.w	r2, #840	; 0x348
 80006f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <MX_TIM2_Init+0x100>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <MX_TIM2_Init+0x100>)
 80006fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_TIM2_Init+0x100>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <MX_TIM2_Init+0x100>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070e:	4829      	ldr	r0, [pc, #164]	; (80007b4 <MX_TIM2_Init+0x100>)
 8000710:	f001 fb62 	bl	8001dd8 <HAL_TIM_Base_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800071a:	f000 f8ad 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000728:	4619      	mov	r1, r3
 800072a:	4822      	ldr	r0, [pc, #136]	; (80007b4 <MX_TIM2_Init+0x100>)
 800072c:	f001 fe8e 	bl	800244c <HAL_TIM_ConfigClockSource>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000736:	f000 f89f 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800073a:	481e      	ldr	r0, [pc, #120]	; (80007b4 <MX_TIM2_Init+0x100>)
 800073c:	f001 fb9b 	bl	8001e76 <HAL_TIM_PWM_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000746:	f000 f897 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	4619      	mov	r1, r3
 8000758:	4816      	ldr	r0, [pc, #88]	; (80007b4 <MX_TIM2_Init+0x100>)
 800075a:	f002 fa81 	bl	8002c60 <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000764:	f000 f888 	bl	8000878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000768:	2360      	movs	r3, #96	; 0x60
 800076a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_TIM2_Init+0x100>)
 8000780:	f001 fda2 	bl	80022c8 <HAL_TIM_PWM_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800078a:	f000 f875 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2204      	movs	r2, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <MX_TIM2_Init+0x100>)
 8000796:	f001 fd97 	bl	80022c8 <HAL_TIM_PWM_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80007a0:	f000 f86a 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <MX_TIM2_Init+0x100>)
 80007a6:	f000 f8bb 	bl	8000920 <HAL_TIM_MspPostInit>

}
 80007aa:	bf00      	nop
 80007ac:	3738      	adds	r7, #56	; 0x38
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000008c 	.word	0x2000008c

080007b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_UART4_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_UART4_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_UART4_Init+0x4c>)
 80007c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_UART4_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_UART4_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_UART4_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_UART4_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_UART4_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_UART4_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_UART4_Init+0x4c>)
 80007f0:	f002 fac6 	bl	8002d80 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f83d 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000d4 	.word	0x200000d4
 8000808:	40004c00 	.word	0x40004c00

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_GPIO_Init+0x68>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <MX_GPIO_Init+0x68>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_GPIO_Init+0x68>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_GPIO_Init+0x68>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MX_GPIO_Init+0x68>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_GPIO_Init+0x68>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_GPIO_Init+0x68>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <MX_GPIO_Init+0x68>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_GPIO_Init+0x68>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c2:	2007      	movs	r0, #7
 80008c4:	f000 fb80 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e4:	d115      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_TIM_Base_MspInit+0x48>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <HAL_TIM_Base_MspInit+0x48>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_TIM_Base_MspInit+0x48>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	201c      	movs	r0, #28
 8000908:	f000 fb69 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800090c:	201c      	movs	r0, #28
 800090e:	f000 fb82 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000940:	d13c      	bne.n	80009bc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_TIM_MspPostInit+0xa4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <HAL_TIM_MspPostInit+0xa4>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_TIM_MspPostInit+0xa4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_TIM_MspPostInit+0xa4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_TIM_MspPostInit+0xa4>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_TIM_MspPostInit+0xa4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BASE_1_CH1_Pin;
 800097a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BASE_1_CH1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <HAL_TIM_MspPostInit+0xa8>)
 8000998:	f000 fbea 	bl	8001170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARM_3_CH2_Pin;
 800099c:	2308      	movs	r3, #8
 800099e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ac:	2301      	movs	r3, #1
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_3_CH2_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_TIM_MspPostInit+0xac>)
 80009b8:	f000 fbda 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020400 	.word	0x40020400

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <HAL_UART_MspInit+0x94>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d133      	bne.n	8000a5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <HAL_UART_MspInit+0x9c>)
 8000a46:	f000 fb93 	bl	8001170 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2034      	movs	r0, #52	; 0x34
 8000a50:	f000 fac5 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a54:	2034      	movs	r0, #52	; 0x34
 8000a56:	f000 fade 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40004c00 	.word	0x40004c00
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f970 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TIM2_IRQHandler+0x10>)
 8000aca:	f001 faf5 	bl	80020b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000008c 	.word	0x2000008c

08000ad8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <UART4_IRQHandler+0x10>)
 8000ade:	f002 fa3f 	bl	8002f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000d4 	.word	0x200000d4

08000aec <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <ITM_SendChar+0x48>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <ITM_SendChar+0x48>)
 8000afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b00:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <ITM_SendChar+0x4c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <ITM_SendChar+0x4c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b0e:	bf00      	nop
 8000b10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0f8      	beq.n	8000b10 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b1e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	6013      	str	r3, [r2, #0]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000edfc 	.word	0xe000edfc
 8000b38:	e0000e00 	.word	0xe0000e00

08000b3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e00a      	b.n	8000b64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b4e:	f3af 8000 	nop.w
 8000b52:	4601      	mov	r1, r0
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	b2ca      	uxtb	r2, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf0      	blt.n	8000b4e <_read+0x12>
  }

  return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e009      	b.n	8000b9c <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ffab 	bl	8000aec <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf1      	blt.n	8000b88 <_write+0x12>
  }
  return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_close>:

int _close(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_isatty>:

int _isatty(int file)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f003 f8c2 	bl	8003dd0 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000118 	.word	0x20000118
 8000c80:	20000130 	.word	0x20000130

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ffd7 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f003 f881 	bl	8003ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc1b 	bl	8000514 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cec:	08004b24 	.word	0x08004b24
  ldr r2, =_sbss
 8000cf0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf4:	20000130 	.word	0x20000130

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fda8 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f967 	bl	8001032 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d7c:	f000 f92f 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	2000011c 	.word	0x2000011c

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	2000011c 	.word	0x2000011c

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff feb6 	bl	8000dc8 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d008      	beq.n	800107c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e052      	b.n	8001122 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0216 	bic.w	r2, r2, #22
 800108a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800109a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <HAL_DMA_Abort+0x62>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d007      	beq.n	80010bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0208 	bic.w	r2, r2, #8
 80010ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0201 	bic.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010cc:	e013      	b.n	80010f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ce:	f7ff fe7b 	bl	8000dc8 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b05      	cmp	r3, #5
 80010da:	d90c      	bls.n	80010f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2220      	movs	r2, #32
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2203      	movs	r2, #3
 80010e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e015      	b.n	8001122 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1e4      	bne.n	80010ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001108:	223f      	movs	r2, #63	; 0x3f
 800110a:	409a      	lsls	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d004      	beq.n	8001148 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e00c      	b.n	8001162 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2205      	movs	r2, #5
 800114c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e16b      	b.n	8001464 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 815a 	bne.w	800145e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d130      	bne.n	8001224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	69b9      	ldr	r1, [r7, #24]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80b4 	beq.w	800145e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b60      	ldr	r3, [pc, #384]	; (800147c <HAL_GPIO_Init+0x30c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a5f      	ldr	r2, [pc, #380]	; (800147c <HAL_GPIO_Init+0x30c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b5d      	ldr	r3, [pc, #372]	; (800147c <HAL_GPIO_Init+0x30c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001312:	4a5b      	ldr	r2, [pc, #364]	; (8001480 <HAL_GPIO_Init+0x310>)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a52      	ldr	r2, [pc, #328]	; (8001484 <HAL_GPIO_Init+0x314>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d02b      	beq.n	8001396 <HAL_GPIO_Init+0x226>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a51      	ldr	r2, [pc, #324]	; (8001488 <HAL_GPIO_Init+0x318>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d025      	beq.n	8001392 <HAL_GPIO_Init+0x222>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a50      	ldr	r2, [pc, #320]	; (800148c <HAL_GPIO_Init+0x31c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01f      	beq.n	800138e <HAL_GPIO_Init+0x21e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4f      	ldr	r2, [pc, #316]	; (8001490 <HAL_GPIO_Init+0x320>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0x21a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_GPIO_Init+0x324>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0x216>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4d      	ldr	r2, [pc, #308]	; (8001498 <HAL_GPIO_Init+0x328>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d00d      	beq.n	8001382 <HAL_GPIO_Init+0x212>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x32c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d007      	beq.n	800137e <HAL_GPIO_Init+0x20e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <HAL_GPIO_Init+0x330>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_GPIO_Init+0x20a>
 8001376:	2307      	movs	r3, #7
 8001378:	e00e      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800137a:	2308      	movs	r3, #8
 800137c:	e00c      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800137e:	2306      	movs	r3, #6
 8001380:	e00a      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001382:	2305      	movs	r3, #5
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001386:	2304      	movs	r3, #4
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x228>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x228>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	; (8001480 <HAL_GPIO_Init+0x310>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_GPIO_Init+0x334>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a32      	ldr	r2, [pc, #200]	; (80014a4 <HAL_GPIO_Init+0x334>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <HAL_GPIO_Init+0x334>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <HAL_GPIO_Init+0x334>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <HAL_GPIO_Init+0x334>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_GPIO_Init+0x334>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_GPIO_Init+0x334>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001458:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <HAL_GPIO_Init+0x334>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f ae90 	bls.w	800118c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40021400 	.word	0x40021400
 800149c:	40021800 	.word	0x40021800
 80014a0:	40021c00 	.word	0x40021c00
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e267      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d075      	beq.n	80015b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c6:	4b88      	ldr	r3, [pc, #544]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d00c      	beq.n	80014ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d2:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d112      	bne.n	8001504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ea:	d10b      	bne.n	8001504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	4b7e      	ldr	r3, [pc, #504]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d05b      	beq.n	80015b0 <HAL_RCC_OscConfig+0x108>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d157      	bne.n	80015b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e242      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d106      	bne.n	800151c <HAL_RCC_OscConfig+0x74>
 800150e:	4b76      	ldr	r3, [pc, #472]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a75      	ldr	r2, [pc, #468]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e01d      	b.n	8001558 <HAL_RCC_OscConfig+0xb0>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x98>
 8001526:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a6f      	ldr	r2, [pc, #444]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 800152c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b6d      	ldr	r3, [pc, #436]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6c      	ldr	r2, [pc, #432]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0xb0>
 8001540:	4b69      	ldr	r3, [pc, #420]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a68      	ldr	r2, [pc, #416]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fc32 	bl	8000dc8 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fc2e 	bl	8000dc8 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	; 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e207      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0xc0>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fc1e 	bl	8000dc8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fc1a 	bl	8000dc8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1f3      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0xe8>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d063      	beq.n	8001686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ca:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d11c      	bne.n	8001610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d116      	bne.n	8001610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e2:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <HAL_RCC_OscConfig+0x152>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e1c7      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4937      	ldr	r1, [pc, #220]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	e03a      	b.n	8001686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d020      	beq.n	800165a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001618:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_RCC_OscConfig+0x244>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff fbd3 	bl	8000dc8 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fbcf 	bl	8000dc8 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1a8      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4925      	ldr	r1, [pc, #148]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
 8001658:	e015      	b.n	8001686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_OscConfig+0x244>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fbb2 	bl	8000dc8 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff fbae 	bl	8000dc8 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e187      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d036      	beq.n	8001700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d016      	beq.n	80016c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_RCC_OscConfig+0x248>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb92 	bl	8000dc8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff fb8e 	bl	8000dc8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e167      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_OscConfig+0x240>)
 80016bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x200>
 80016c6:	e01b      	b.n	8001700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_OscConfig+0x248>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fb7b 	bl	8000dc8 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	e00e      	b.n	80016f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d6:	f7ff fb77 	bl	8000dc8 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d907      	bls.n	80016f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e150      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
 80016e8:	40023800 	.word	0x40023800
 80016ec:	42470000 	.word	0x42470000
 80016f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	4b88      	ldr	r3, [pc, #544]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80016f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ea      	bne.n	80016d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8097 	beq.w	800183c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001712:	4b81      	ldr	r3, [pc, #516]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b7d      	ldr	r3, [pc, #500]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a7c      	ldr	r2, [pc, #496]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b7a      	ldr	r3, [pc, #488]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173e:	4b77      	ldr	r3, [pc, #476]	; (800191c <HAL_RCC_OscConfig+0x474>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d118      	bne.n	800177c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174a:	4b74      	ldr	r3, [pc, #464]	; (800191c <HAL_RCC_OscConfig+0x474>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a73      	ldr	r2, [pc, #460]	; (800191c <HAL_RCC_OscConfig+0x474>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001756:	f7ff fb37 	bl	8000dc8 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175e:	f7ff fb33 	bl	8000dc8 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e10c      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	4b6a      	ldr	r3, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x474>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x2ea>
 8001784:	4b64      	ldr	r3, [pc, #400]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001788:	4a63      	ldr	r2, [pc, #396]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6713      	str	r3, [r2, #112]	; 0x70
 8001790:	e01c      	b.n	80017cc <HAL_RCC_OscConfig+0x324>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x30c>
 800179a:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	4a5e      	ldr	r2, [pc, #376]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
 80017a6:	4b5c      	ldr	r3, [pc, #368]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a5b      	ldr	r2, [pc, #364]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x324>
 80017b4:	4b58      	ldr	r3, [pc, #352]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	4a57      	ldr	r2, [pc, #348]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6713      	str	r3, [r2, #112]	; 0x70
 80017c0:	4b55      	ldr	r3, [pc, #340]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4a54      	ldr	r2, [pc, #336]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d015      	beq.n	8001800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff faf8 	bl	8000dc8 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff faf4 	bl	8000dc8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e0cb      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	4b49      	ldr	r3, [pc, #292]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0ee      	beq.n	80017dc <HAL_RCC_OscConfig+0x334>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7ff fae2 	bl	8000dc8 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff fade 	bl	8000dc8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0b5      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181e:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ee      	bne.n	8001808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a38      	ldr	r2, [pc, #224]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a1 	beq.w	8001988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b08      	cmp	r3, #8
 8001850:	d05c      	beq.n	800190c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d141      	bne.n	80018de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_RCC_OscConfig+0x478>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fab2 	bl	8000dc8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff faae 	bl	8000dc8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e087      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69da      	ldr	r2, [r3, #28]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	019b      	lsls	r3, r3, #6
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x478>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fa87 	bl	8000dc8 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff fa83 	bl	8000dc8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e05c      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x416>
 80018dc:	e054      	b.n	8001988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_RCC_OscConfig+0x478>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fa70 	bl	8000dc8 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff fa6c 	bl	8000dc8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e045      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_RCC_OscConfig+0x470>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x444>
 800190a:	e03d      	b.n	8001988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d107      	bne.n	8001924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e038      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000
 8001920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x4ec>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d028      	beq.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d121      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d11a      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001954:	4013      	ands	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800195a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800195c:	4293      	cmp	r3, r2
 800195e:	d111      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	3b01      	subs	r3, #1
 800196e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0cc      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d90c      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0b8      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ec:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a52      	ldr	r2, [pc, #328]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a10:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	494d      	ldr	r1, [pc, #308]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d044      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a36:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d119      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e07f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a56:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e06f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e067      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a76:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 0203 	bic.w	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4934      	ldr	r1, [pc, #208]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a88:	f7ff f99e 	bl	8000dc8 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f7ff f99a 	bl	8000dc8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e04f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 020c 	and.w	r2, r3, #12
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1eb      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d20c      	bcs.n	8001ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e032      	b.n	8001b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4916      	ldr	r1, [pc, #88]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	490e      	ldr	r1, [pc, #56]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b1e:	f000 f821 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	490a      	ldr	r1, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	5ccb      	ldrb	r3, [r1, r3]
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f8fe 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08004994 	.word	0x08004994
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b68:	b094      	sub	sp, #80	; 0x50
 8001b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b70:	2300      	movs	r3, #0
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b74:	2300      	movs	r3, #0
 8001b76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b7c:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d00d      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	f200 80e1 	bhi.w	8001d50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x34>
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b96:	e0db      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b98:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b9c:	e0db      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b9e:	4b73      	ldr	r3, [pc, #460]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba2:	e0d8      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba4:	4b6f      	ldr	r3, [pc, #444]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d063      	beq.n	8001c82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bba:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	099b      	lsrs	r3, r3, #6
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	462b      	mov	r3, r5
 8001bda:	f04f 0000 	mov.w	r0, #0
 8001bde:	f04f 0100 	mov.w	r1, #0
 8001be2:	0159      	lsls	r1, r3, #5
 8001be4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be8:	0150      	lsls	r0, r2, #5
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4621      	mov	r1, r4
 8001bf0:	1a51      	subs	r1, r2, r1
 8001bf2:	6139      	str	r1, [r7, #16]
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c08:	4659      	mov	r1, fp
 8001c0a:	018b      	lsls	r3, r1, #6
 8001c0c:	4651      	mov	r1, sl
 8001c0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c12:	4651      	mov	r1, sl
 8001c14:	018a      	lsls	r2, r1, #6
 8001c16:	4651      	mov	r1, sl
 8001c18:	ebb2 0801 	subs.w	r8, r2, r1
 8001c1c:	4659      	mov	r1, fp
 8001c1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c36:	4690      	mov	r8, r2
 8001c38:	4699      	mov	r9, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	eb18 0303 	adds.w	r3, r8, r3
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	462b      	mov	r3, r5
 8001c44:	eb49 0303 	adc.w	r3, r9, r3
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c56:	4629      	mov	r1, r5
 8001c58:	024b      	lsls	r3, r1, #9
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c60:	4621      	mov	r1, r4
 8001c62:	024a      	lsls	r2, r1, #9
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c74:	f7fe faa8 	bl	80001c8 <__aeabi_uldivmod>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c80:	e058      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c92:	623b      	str	r3, [r7, #32]
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
 8001c98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	f04f 0000 	mov.w	r0, #0
 8001ca4:	f04f 0100 	mov.w	r1, #0
 8001ca8:	0159      	lsls	r1, r3, #5
 8001caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cae:	0150      	lsls	r0, r2, #5
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cba:	4649      	mov	r1, r9
 8001cbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ccc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd4:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	00eb      	lsls	r3, r5, #3
 8001ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cea:	00e2      	lsls	r2, r4, #3
 8001cec:	4614      	mov	r4, r2
 8001cee:	461d      	mov	r5, r3
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	18e3      	adds	r3, r4, r3
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	eb45 0303 	adc.w	r3, r5, r3
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	028b      	lsls	r3, r1, #10
 8001d0e:	4621      	mov	r1, r4
 8001d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d14:	4621      	mov	r1, r4
 8001d16:	028a      	lsls	r2, r1, #10
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	61fa      	str	r2, [r7, #28]
 8001d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d28:	f7fe fa4e 	bl	80001c8 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4613      	mov	r3, r2
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4e:	e002      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3750      	adds	r7, #80	; 0x50
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	00f42400 	.word	0x00f42400
 8001d6c:	007a1200 	.word	0x007a1200

08001d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000

08001d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d8c:	f7ff fff0 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0a9b      	lsrs	r3, r3, #10
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4903      	ldr	r1, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	080049a4 	.word	0x080049a4

08001db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001db4:	f7ff ffdc 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	0b5b      	lsrs	r3, r3, #13
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	4903      	ldr	r1, [pc, #12]	; (8001dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc6:	5ccb      	ldrb	r3, [r1, r3]
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	080049a4 	.word	0x080049a4

08001dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e041      	b.n	8001e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fd68 	bl	80008d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3304      	adds	r3, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f000 fc12 	bl	8002640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e041      	b.n	8001f0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d106      	bne.n	8001ea2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f839 	bl	8001f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f000 fbc3 	bl	8002640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_TIM_PWM_Start+0x24>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e022      	b.n	8001f92 <HAL_TIM_PWM_Start+0x6a>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d109      	bne.n	8001f66 <HAL_TIM_PWM_Start+0x3e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	e015      	b.n	8001f92 <HAL_TIM_PWM_Start+0x6a>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d109      	bne.n	8001f80 <HAL_TIM_PWM_Start+0x58>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e008      	b.n	8001f92 <HAL_TIM_PWM_Start+0x6a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07c      	b.n	8002094 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d104      	bne.n	8001faa <HAL_TIM_PWM_Start+0x82>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa8:	e013      	b.n	8001fd2 <HAL_TIM_PWM_Start+0xaa>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d104      	bne.n	8001fba <HAL_TIM_PWM_Start+0x92>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb8:	e00b      	b.n	8001fd2 <HAL_TIM_PWM_Start+0xaa>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d104      	bne.n	8001fca <HAL_TIM_PWM_Start+0xa2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc8:	e003      	b.n	8001fd2 <HAL_TIM_PWM_Start+0xaa>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	6839      	ldr	r1, [r7, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fe1a 	bl	8002c14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2d      	ldr	r2, [pc, #180]	; (800209c <HAL_TIM_PWM_Start+0x174>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_TIM_PWM_Start+0xcc>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2c      	ldr	r2, [pc, #176]	; (80020a0 <HAL_TIM_PWM_Start+0x178>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_TIM_PWM_Start+0xd0>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_TIM_PWM_Start+0xd2>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_TIM_PWM_Start+0x174>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d022      	beq.n	800205e <HAL_TIM_PWM_Start+0x136>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002020:	d01d      	beq.n	800205e <HAL_TIM_PWM_Start+0x136>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_TIM_PWM_Start+0x17c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d018      	beq.n	800205e <HAL_TIM_PWM_Start+0x136>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <HAL_TIM_PWM_Start+0x180>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_TIM_PWM_Start+0x136>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <HAL_TIM_PWM_Start+0x184>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00e      	beq.n	800205e <HAL_TIM_PWM_Start+0x136>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_TIM_PWM_Start+0x178>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d009      	beq.n	800205e <HAL_TIM_PWM_Start+0x136>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <HAL_TIM_PWM_Start+0x188>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_TIM_PWM_Start+0x136>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <HAL_TIM_PWM_Start+0x18c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d111      	bne.n	8002082 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b06      	cmp	r3, #6
 800206e:	d010      	beq.n	8002092 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002080:	e007      	b.n	8002092 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010400 	.word	0x40010400
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800
 80020ac:	40000c00 	.word	0x40000c00
 80020b0:	40014000 	.word	0x40014000
 80020b4:	40001800 	.word	0x40001800

080020b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d122      	bne.n	8002114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d11b      	bne.n	8002114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0202 	mvn.w	r2, #2
 80020e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fa81 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa73 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fa84 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b04      	cmp	r3, #4
 8002120:	d122      	bne.n	8002168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b04      	cmp	r3, #4
 800212e:	d11b      	bne.n	8002168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0204 	mvn.w	r2, #4
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fa57 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa49 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fa5a 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b08      	cmp	r3, #8
 8002174:	d122      	bne.n	80021bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b08      	cmp	r3, #8
 8002182:	d11b      	bne.n	80021bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0208 	mvn.w	r2, #8
 800218c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2204      	movs	r2, #4
 8002192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fa2d 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
 80021a8:	e005      	b.n	80021b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 fa1f 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fa30 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d122      	bne.n	8002210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d11b      	bne.n	8002210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0210 	mvn.w	r2, #16
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2208      	movs	r2, #8
 80021e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa03 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f9f5 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fa06 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10e      	bne.n	800223c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d107      	bne.n	800223c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0201 	mvn.w	r2, #1
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f9cf 	bl	80025da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	2b80      	cmp	r3, #128	; 0x80
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d107      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fd82 	bl	8002d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002272:	2b40      	cmp	r3, #64	; 0x40
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9cb 	bl	800262a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0220 	mvn.w	r2, #32
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fd4c 	bl	8002d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e0ae      	b.n	8002444 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0c      	cmp	r3, #12
 80022f2:	f200 809f 	bhi.w	8002434 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022f6:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fc:	08002331 	.word	0x08002331
 8002300:	08002435 	.word	0x08002435
 8002304:	08002435 	.word	0x08002435
 8002308:	08002435 	.word	0x08002435
 800230c:	08002371 	.word	0x08002371
 8002310:	08002435 	.word	0x08002435
 8002314:	08002435 	.word	0x08002435
 8002318:	08002435 	.word	0x08002435
 800231c:	080023b3 	.word	0x080023b3
 8002320:	08002435 	.word	0x08002435
 8002324:	08002435 	.word	0x08002435
 8002328:	08002435 	.word	0x08002435
 800232c:	080023f3 	.word	0x080023f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fa22 	bl	8002780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0208 	orr.w	r2, r2, #8
 800234a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0204 	bic.w	r2, r2, #4
 800235a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6999      	ldr	r1, [r3, #24]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	619a      	str	r2, [r3, #24]
      break;
 800236e:	e064      	b.n	800243a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fa72 	bl	8002860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6999      	ldr	r1, [r3, #24]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	021a      	lsls	r2, r3, #8
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	619a      	str	r2, [r3, #24]
      break;
 80023b0:	e043      	b.n	800243a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fac7 	bl	800294c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0208 	orr.w	r2, r2, #8
 80023cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0204 	bic.w	r2, r2, #4
 80023dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69d9      	ldr	r1, [r3, #28]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	61da      	str	r2, [r3, #28]
      break;
 80023f0:	e023      	b.n	800243a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fb1b 	bl	8002a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800240c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	021a      	lsls	r2, r3, #8
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	61da      	str	r2, [r3, #28]
      break;
 8002432:	e002      	b.n	800243a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	75fb      	strb	r3, [r7, #23]
      break;
 8002438:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002442:	7dfb      	ldrb	r3, [r7, #23]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_TIM_ConfigClockSource+0x1c>
 8002464:	2302      	movs	r3, #2
 8002466:	e0b4      	b.n	80025d2 <HAL_TIM_ConfigClockSource+0x186>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800248e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a0:	d03e      	beq.n	8002520 <HAL_TIM_ConfigClockSource+0xd4>
 80024a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a6:	f200 8087 	bhi.w	80025b8 <HAL_TIM_ConfigClockSource+0x16c>
 80024aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ae:	f000 8086 	beq.w	80025be <HAL_TIM_ConfigClockSource+0x172>
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	d87f      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b70      	cmp	r3, #112	; 0x70
 80024ba:	d01a      	beq.n	80024f2 <HAL_TIM_ConfigClockSource+0xa6>
 80024bc:	2b70      	cmp	r3, #112	; 0x70
 80024be:	d87b      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b60      	cmp	r3, #96	; 0x60
 80024c2:	d050      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x11a>
 80024c4:	2b60      	cmp	r3, #96	; 0x60
 80024c6:	d877      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b50      	cmp	r3, #80	; 0x50
 80024ca:	d03c      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0xfa>
 80024cc:	2b50      	cmp	r3, #80	; 0x50
 80024ce:	d873      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	d058      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x13a>
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d86f      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b30      	cmp	r3, #48	; 0x30
 80024da:	d064      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x15a>
 80024dc:	2b30      	cmp	r3, #48	; 0x30
 80024de:	d86b      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d060      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x15a>
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d867      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x16c>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d05c      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x15a>
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d05a      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x15a>
 80024f0:	e062      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6899      	ldr	r1, [r3, #8]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f000 fb67 	bl	8002bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	609a      	str	r2, [r3, #8]
      break;
 800251e:	e04f      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6899      	ldr	r1, [r3, #8]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f000 fb50 	bl	8002bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002542:	609a      	str	r2, [r3, #8]
      break;
 8002544:	e03c      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	f000 fac4 	bl	8002ae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2150      	movs	r1, #80	; 0x50
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fb1d 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 8002564:	e02c      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	461a      	mov	r2, r3
 8002574:	f000 fae3 	bl	8002b3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2160      	movs	r1, #96	; 0x60
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fb0d 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 8002584:	e01c      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	461a      	mov	r2, r3
 8002594:	f000 faa4 	bl	8002ae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2140      	movs	r1, #64	; 0x40
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fafd 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 80025a4:	e00c      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f000 faf4 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 80025b6:	e003      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      break;
 80025bc:	e000      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a40      	ldr	r2, [pc, #256]	; (8002754 <TIM_Base_SetConfig+0x114>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d013      	beq.n	8002680 <TIM_Base_SetConfig+0x40>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d00f      	beq.n	8002680 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3d      	ldr	r2, [pc, #244]	; (8002758 <TIM_Base_SetConfig+0x118>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00b      	beq.n	8002680 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3c      	ldr	r2, [pc, #240]	; (800275c <TIM_Base_SetConfig+0x11c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d007      	beq.n	8002680 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <TIM_Base_SetConfig+0x120>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3a      	ldr	r2, [pc, #232]	; (8002764 <TIM_Base_SetConfig+0x124>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d108      	bne.n	8002692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2f      	ldr	r2, [pc, #188]	; (8002754 <TIM_Base_SetConfig+0x114>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02b      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a0:	d027      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2c      	ldr	r2, [pc, #176]	; (8002758 <TIM_Base_SetConfig+0x118>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d023      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2b      	ldr	r2, [pc, #172]	; (800275c <TIM_Base_SetConfig+0x11c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <TIM_Base_SetConfig+0x120>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01b      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a29      	ldr	r2, [pc, #164]	; (8002764 <TIM_Base_SetConfig+0x124>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d017      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a28      	ldr	r2, [pc, #160]	; (8002768 <TIM_Base_SetConfig+0x128>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <TIM_Base_SetConfig+0x12c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00f      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a26      	ldr	r2, [pc, #152]	; (8002770 <TIM_Base_SetConfig+0x130>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00b      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a25      	ldr	r2, [pc, #148]	; (8002774 <TIM_Base_SetConfig+0x134>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a24      	ldr	r2, [pc, #144]	; (8002778 <TIM_Base_SetConfig+0x138>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d003      	beq.n	80026f2 <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a23      	ldr	r2, [pc, #140]	; (800277c <TIM_Base_SetConfig+0x13c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d108      	bne.n	8002704 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <TIM_Base_SetConfig+0x114>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0xf8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <TIM_Base_SetConfig+0x124>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d103      	bne.n	8002740 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	615a      	str	r2, [r3, #20]
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010000 	.word	0x40010000
 8002758:	40000400 	.word	0x40000400
 800275c:	40000800 	.word	0x40000800
 8002760:	40000c00 	.word	0x40000c00
 8002764:	40010400 	.word	0x40010400
 8002768:	40014000 	.word	0x40014000
 800276c:	40014400 	.word	0x40014400
 8002770:	40014800 	.word	0x40014800
 8002774:	40001800 	.word	0x40001800
 8002778:	40001c00 	.word	0x40001c00
 800277c:	40002000 	.word	0x40002000

08002780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	f023 0201 	bic.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0303 	bic.w	r3, r3, #3
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f023 0302 	bic.w	r3, r3, #2
 80027c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a20      	ldr	r2, [pc, #128]	; (8002858 <TIM_OC1_SetConfig+0xd8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d003      	beq.n	80027e4 <TIM_OC1_SetConfig+0x64>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a1f      	ldr	r2, [pc, #124]	; (800285c <TIM_OC1_SetConfig+0xdc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d10c      	bne.n	80027fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f023 0308 	bic.w	r3, r3, #8
 80027ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f023 0304 	bic.w	r3, r3, #4
 80027fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <TIM_OC1_SetConfig+0xd8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d003      	beq.n	800280e <TIM_OC1_SetConfig+0x8e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <TIM_OC1_SetConfig+0xdc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800281c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	621a      	str	r2, [r3, #32]
}
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	40010000 	.word	0x40010000
 800285c:	40010400 	.word	0x40010400

08002860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800288e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0320 	bic.w	r3, r3, #32
 80028aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a22      	ldr	r2, [pc, #136]	; (8002944 <TIM_OC2_SetConfig+0xe4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <TIM_OC2_SetConfig+0x68>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a21      	ldr	r2, [pc, #132]	; (8002948 <TIM_OC2_SetConfig+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10d      	bne.n	80028e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a17      	ldr	r2, [pc, #92]	; (8002944 <TIM_OC2_SetConfig+0xe4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_OC2_SetConfig+0x94>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a16      	ldr	r2, [pc, #88]	; (8002948 <TIM_OC2_SetConfig+0xe8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d113      	bne.n	800291c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	621a      	str	r2, [r3, #32]
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40010000 	.word	0x40010000
 8002948:	40010400 	.word	0x40010400

0800294c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <TIM_OC3_SetConfig+0xe0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d003      	beq.n	80029b2 <TIM_OC3_SetConfig+0x66>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <TIM_OC3_SetConfig+0xe4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10d      	bne.n	80029ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <TIM_OC3_SetConfig+0xe0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d003      	beq.n	80029de <TIM_OC3_SetConfig+0x92>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <TIM_OC3_SetConfig+0xe4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d113      	bne.n	8002a06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	621a      	str	r2, [r3, #32]
}
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40010400 	.word	0x40010400

08002a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	031b      	lsls	r3, r3, #12
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <TIM_OC4_SetConfig+0xa4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_OC4_SetConfig+0x68>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a11      	ldr	r2, [pc, #68]	; (8002adc <TIM_OC4_SetConfig+0xa8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d109      	bne.n	8002ab0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	621a      	str	r2, [r3, #32]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40010400 	.word	0x40010400

08002ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f023 0201 	bic.w	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f023 030a 	bic.w	r3, r3, #10
 8002b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	621a      	str	r2, [r3, #32]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f023 0210 	bic.w	r2, r3, #16
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	031b      	lsls	r3, r3, #12
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f043 0307 	orr.w	r3, r3, #7
 8002bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	021a      	lsls	r2, r3, #8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2201      	movs	r2, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a1a      	ldr	r2, [r3, #32]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1a      	ldr	r2, [r3, #32]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	621a      	str	r2, [r3, #32]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e05a      	b.n	8002d2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d022      	beq.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d01d      	beq.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d018      	beq.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00e      	beq.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10c      	bne.n	8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800
 8002d48:	40000c00 	.word	0x40000c00
 8002d4c:	40010400 	.word	0x40010400
 8002d50:	40014000 	.word	0x40014000
 8002d54:	40001800 	.word	0x40001800

08002d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e03f      	b.n	8002e12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fd fe12 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fd8b 	bl	80038e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b08a      	sub	sp, #40	; 0x28
 8002e1e:	af02      	add	r7, sp, #8
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	f040 808c 	bne.w	8002f54 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_UART_Receive+0x2e>
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e084      	b.n	8002f56 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Receive+0x40>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e07d      	b.n	8002f56 <HAL_UART_Receive+0x13c>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2222      	movs	r2, #34	; 0x22
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e76:	f7fd ffa7 	bl	8000dc8 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d108      	bne.n	8002ea4 <HAL_UART_Receive+0x8a>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e003      	b.n	8002eac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002eb4:	e043      	b.n	8002f3e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2120      	movs	r1, #32
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fb05 	bl	80034d0 <UART_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e042      	b.n	8002f56 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	3302      	adds	r3, #2
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	e01f      	b.n	8002f30 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d007      	beq.n	8002f0a <HAL_UART_Receive+0xf0>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_UART_Receive+0xfe>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e008      	b.n	8002f2a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1b6      	bne.n	8002eb6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0ba      	sub	sp, #232	; 0xe8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
 8002fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fbd3 	bl	800376a <UART_Receive_IT>
      return;
 8002fc4:	e256      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80de 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
 8002fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80d1 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
 8002ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
 800301a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0202 	orr.w	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
 800303e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
 8003062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0208 	orr.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 81ed 	beq.w	800346a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
 800309c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fb5e 	bl	800376a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_UART_IRQHandler+0x17a>
 80030d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04f      	beq.n	800317a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa66 	bl	80035ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d141      	bne.n	8003172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800311a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800311e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d9      	bne.n	80030ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	4a7d      	ldr	r2, [pc, #500]	; (800333c <HAL_UART_IRQHandler+0x3dc>)
 8003148:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd ffeb 	bl	800112a <HAL_DMA_Abort_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003164:	4610      	mov	r0, r2
 8003166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00e      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f99a 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e00a      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f996 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e006      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f992 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003186:	e170      	b.n	800346a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	bf00      	nop
    return;
 800318a:	e16e      	b.n	800346a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 814a 	bne.w	800342a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8143 	beq.w	800342a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 813c 	beq.w	800342a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	f040 80b4 	bne.w	8003340 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8140 	beq.w	800346e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f6:	429a      	cmp	r2, r3
 80031f8:	f080 8139 	bcs.w	800346e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003202:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320e:	f000 8088 	beq.w	8003322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800323e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800324a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1d9      	bne.n	8003212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800326e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800328a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e1      	bne.n	800325e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e3      	bne.n	800329a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f2:	f023 0310 	bic.w	r3, r3, #16
 80032f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003304:	65ba      	str	r2, [r7, #88]	; 0x58
 8003306:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800330a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e3      	bne.n	80032e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd fe94 	bl	800104a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332a:	b29b      	uxth	r3, r3
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	4619      	mov	r1, r3
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8c0 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003338:	e099      	b.n	800346e <HAL_UART_IRQHandler+0x50e>
 800333a:	bf00      	nop
 800333c:	08003673 	.word	0x08003673
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003348:	b29b      	uxth	r3, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 808b 	beq.w	8003472 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800335c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8086 	beq.w	8003472 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800337c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800338a:	647a      	str	r2, [r7, #68]	; 0x44
 800338c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e3      	bne.n	8003366 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3314      	adds	r3, #20
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	623b      	str	r3, [r7, #32]
   return(result);
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3314      	adds	r3, #20
 80033be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033c2:	633a      	str	r2, [r7, #48]	; 0x30
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e3      	bne.n	800339e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	e853 3f00 	ldrex	r3, [r3]
 80033f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0310 	bic.w	r3, r3, #16
 80033fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003408:	61fa      	str	r2, [r7, #28]
 800340a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	69b9      	ldr	r1, [r7, #24]
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	617b      	str	r3, [r7, #20]
   return(result);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e3      	bne.n	80033e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800341c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f848 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003428:	e023      	b.n	8003472 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_UART_IRQHandler+0x4ea>
 8003436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f929 	bl	800369a <UART_Transmit_IT>
    return;
 8003448:	e014      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800344a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00e      	beq.n	8003474 <HAL_UART_IRQHandler+0x514>
 8003456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f969 	bl	800373a <UART_EndTransmit_IT>
    return;
 8003468:	e004      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
    return;
 800346a:	bf00      	nop
 800346c:	e002      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
      return;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
      return;
 8003472:	bf00      	nop
  }
}
 8003474:	37e8      	adds	r7, #232	; 0xe8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop

0800347c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b090      	sub	sp, #64	; 0x40
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e0:	e050      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e8:	d04c      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f0:	f7fd fc6a 	bl	8000dc8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d241      	bcs.n	8003584 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003520:	637a      	str	r2, [r7, #52]	; 0x34
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3314      	adds	r3, #20
 800353a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	613b      	str	r3, [r7, #16]
   return(result);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3314      	adds	r3, #20
 8003552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003554:	623a      	str	r2, [r7, #32]
 8003556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	69f9      	ldr	r1, [r7, #28]
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	61bb      	str	r3, [r7, #24]
   return(result);
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e5      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e00f      	b.n	80035a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d09f      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3740      	adds	r7, #64	; 0x40
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b095      	sub	sp, #84	; 0x54
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035d4:	643a      	str	r2, [r7, #64]	; 0x40
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e5      	bne.n	80035b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3314      	adds	r3, #20
 8003606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800360e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	2b01      	cmp	r3, #1
 8003622:	d119      	bne.n	8003658 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60bb      	str	r3, [r7, #8]
   return(result);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f023 0310 	bic.w	r3, r3, #16
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003644:	61ba      	str	r2, [r7, #24]
 8003646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	613b      	str	r3, [r7, #16]
   return(result);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003666:	bf00      	nop
 8003668:	3754      	adds	r7, #84	; 0x54
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ff09 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b21      	cmp	r3, #33	; 0x21
 80036ac:	d13e      	bne.n	800372c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b6:	d114      	bne.n	80036e2 <UART_Transmit_IT+0x48>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d110      	bne.n	80036e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	1c9a      	adds	r2, r3, #2
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]
 80036e0:	e008      	b.n	80036f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6211      	str	r1, [r2, #32]
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4619      	mov	r1, r3
 8003702:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10f      	bne.n	8003728 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003716:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003726:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003750:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fe8e 	bl	800347c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08c      	sub	sp, #48	; 0x30
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b22      	cmp	r3, #34	; 0x22
 800377c:	f040 80ab 	bne.w	80038d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d117      	bne.n	80037ba <UART_Receive_IT+0x50>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d113      	bne.n	80037ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	1c9a      	adds	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28
 80037b8:	e026      	b.n	8003808 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	d007      	beq.n	80037de <UART_Receive_IT+0x74>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <UART_Receive_IT+0x82>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e008      	b.n	80037fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4619      	mov	r1, r3
 8003816:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003818:	2b00      	cmp	r3, #0
 800381a:	d15a      	bne.n	80038d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0220 	bic.w	r2, r2, #32
 800382a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	2b01      	cmp	r3, #1
 800385a:	d135      	bne.n	80038c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	330c      	adds	r3, #12
 8003868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	613b      	str	r3, [r7, #16]
   return(result);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f023 0310 	bic.w	r3, r3, #16
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	623a      	str	r2, [r7, #32]
 8003884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	69f9      	ldr	r1, [r7, #28]
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e5      	bne.n	8003862 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d10a      	bne.n	80038ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038be:	4619      	mov	r1, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fdf9 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
 80038c6:	e002      	b.n	80038ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fde1 	bl	8003490 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e002      	b.n	80038d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3730      	adds	r7, #48	; 0x30
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e4:	b0c0      	sub	sp, #256	; 0x100
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	ea40 0301 	orr.w	r3, r0, r1
 8003908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	431a      	orrs	r2, r3
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	431a      	orrs	r2, r3
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003938:	f021 010c 	bic.w	r1, r1, #12
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003946:	430b      	orrs	r3, r1
 8003948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395a:	6999      	ldr	r1, [r3, #24]
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	ea40 0301 	orr.w	r3, r0, r1
 8003966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b8f      	ldr	r3, [pc, #572]	; (8003bac <UART_SetConfig+0x2cc>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d005      	beq.n	8003980 <UART_SetConfig+0xa0>
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b8d      	ldr	r3, [pc, #564]	; (8003bb0 <UART_SetConfig+0x2d0>)
 800397c:	429a      	cmp	r2, r3
 800397e:	d104      	bne.n	800398a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003980:	f7fe fa16 	bl	8001db0 <HAL_RCC_GetPCLK2Freq>
 8003984:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003988:	e003      	b.n	8003992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800398a:	f7fe f9fd 	bl	8001d88 <HAL_RCC_GetPCLK1Freq>
 800398e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399c:	f040 810c 	bne.w	8003bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039b2:	4622      	mov	r2, r4
 80039b4:	462b      	mov	r3, r5
 80039b6:	1891      	adds	r1, r2, r2
 80039b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80039ba:	415b      	adcs	r3, r3
 80039bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039c2:	4621      	mov	r1, r4
 80039c4:	eb12 0801 	adds.w	r8, r2, r1
 80039c8:	4629      	mov	r1, r5
 80039ca:	eb43 0901 	adc.w	r9, r3, r1
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e2:	4690      	mov	r8, r2
 80039e4:	4699      	mov	r9, r3
 80039e6:	4623      	mov	r3, r4
 80039e8:	eb18 0303 	adds.w	r3, r8, r3
 80039ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039f0:	462b      	mov	r3, r5
 80039f2:	eb49 0303 	adc.w	r3, r9, r3
 80039f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a0e:	460b      	mov	r3, r1
 8003a10:	18db      	adds	r3, r3, r3
 8003a12:	653b      	str	r3, [r7, #80]	; 0x50
 8003a14:	4613      	mov	r3, r2
 8003a16:	eb42 0303 	adc.w	r3, r2, r3
 8003a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a24:	f7fc fbd0 	bl	80001c8 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4b61      	ldr	r3, [pc, #388]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	011c      	lsls	r4, r3, #4
 8003a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	1891      	adds	r1, r2, r2
 8003a4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a50:	415b      	adcs	r3, r3
 8003a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a58:	4641      	mov	r1, r8
 8003a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a5e:	4649      	mov	r1, r9
 8003a60:	eb43 0b01 	adc.w	fp, r3, r1
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a78:	4692      	mov	sl, r2
 8003a7a:	469b      	mov	fp, r3
 8003a7c:	4643      	mov	r3, r8
 8003a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a86:	464b      	mov	r3, r9
 8003a88:	eb4b 0303 	adc.w	r3, fp, r3
 8003a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	18db      	adds	r3, r3, r3
 8003aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8003aaa:	4613      	mov	r3, r2
 8003aac:	eb42 0303 	adc.w	r3, r2, r3
 8003ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aba:	f7fc fb85 	bl	80001c8 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2264      	movs	r2, #100	; 0x64
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	1acb      	subs	r3, r1, r3
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ada:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003adc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae8:	441c      	add	r4, r3
 8003aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b04:	415b      	adcs	r3, r3
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	1851      	adds	r1, r2, r1
 8003b10:	6339      	str	r1, [r7, #48]	; 0x30
 8003b12:	4649      	mov	r1, r9
 8003b14:	414b      	adcs	r3, r1
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b24:	4659      	mov	r1, fp
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4651      	mov	r1, sl
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b40:	464b      	mov	r3, r9
 8003b42:	460a      	mov	r2, r1
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b60:	460b      	mov	r3, r1
 8003b62:	18db      	adds	r3, r3, r3
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b66:	4613      	mov	r3, r2
 8003b68:	eb42 0303 	adc.w	r3, r2, r3
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b76:	f7fc fb27 	bl	80001c8 <__aeabi_uldivmod>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003b80:	fba3 1302 	umull	r1, r3, r3, r2
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	2164      	movs	r1, #100	; 0x64
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	3332      	adds	r3, #50	; 0x32
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <UART_SetConfig+0x2d4>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	f003 0207 	and.w	r2, r3, #7
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4422      	add	r2, r4
 8003ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ba8:	e105      	b.n	8003db6 <UART_SetConfig+0x4d6>
 8003baa:	bf00      	nop
 8003bac:	40011000 	.word	0x40011000
 8003bb0:	40011400 	.word	0x40011400
 8003bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bca:	4642      	mov	r2, r8
 8003bcc:	464b      	mov	r3, r9
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	6239      	str	r1, [r7, #32]
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bda:	4641      	mov	r1, r8
 8003bdc:	1854      	adds	r4, r2, r1
 8003bde:	4649      	mov	r1, r9
 8003be0:	eb43 0501 	adc.w	r5, r3, r1
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	00eb      	lsls	r3, r5, #3
 8003bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf2:	00e2      	lsls	r2, r4, #3
 8003bf4:	4614      	mov	r4, r2
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	18e3      	adds	r3, r4, r3
 8003bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c00:	464b      	mov	r3, r9
 8003c02:	eb45 0303 	adc.w	r3, r5, r3
 8003c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c26:	4629      	mov	r1, r5
 8003c28:	008b      	lsls	r3, r1, #2
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c30:	4621      	mov	r1, r4
 8003c32:	008a      	lsls	r2, r1, #2
 8003c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c38:	f7fc fac6 	bl	80001c8 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4b60      	ldr	r3, [pc, #384]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003c42:	fba3 2302 	umull	r2, r3, r3, r2
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	011c      	lsls	r4, r3, #4
 8003c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	1891      	adds	r1, r2, r2
 8003c62:	61b9      	str	r1, [r7, #24]
 8003c64:	415b      	adcs	r3, r3
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	1851      	adds	r1, r2, r1
 8003c70:	6139      	str	r1, [r7, #16]
 8003c72:	4649      	mov	r1, r9
 8003c74:	414b      	adcs	r3, r1
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c84:	4659      	mov	r1, fp
 8003c86:	00cb      	lsls	r3, r1, #3
 8003c88:	4651      	mov	r1, sl
 8003c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8e:	4651      	mov	r1, sl
 8003c90:	00ca      	lsls	r2, r1, #3
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	4642      	mov	r2, r8
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	eb42 0303 	adc.w	r3, r2, r3
 8003ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	008b      	lsls	r3, r1, #2
 8003cc8:	4641      	mov	r1, r8
 8003cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cce:	4641      	mov	r1, r8
 8003cd0:	008a      	lsls	r2, r1, #2
 8003cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cd6:	f7fc fa77 	bl	80001c8 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	2164      	movs	r1, #100	; 0x64
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	3332      	adds	r3, #50	; 0x32
 8003cf2:	4a34      	ldr	r2, [pc, #208]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfe:	441c      	add	r4, r3
 8003d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d04:	2200      	movs	r2, #0
 8003d06:	673b      	str	r3, [r7, #112]	; 0x70
 8003d08:	677a      	str	r2, [r7, #116]	; 0x74
 8003d0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d0e:	4642      	mov	r2, r8
 8003d10:	464b      	mov	r3, r9
 8003d12:	1891      	adds	r1, r2, r2
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	415b      	adcs	r3, r3
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d1e:	4641      	mov	r1, r8
 8003d20:	1851      	adds	r1, r2, r1
 8003d22:	6039      	str	r1, [r7, #0]
 8003d24:	4649      	mov	r1, r9
 8003d26:	414b      	adcs	r3, r1
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d36:	4659      	mov	r1, fp
 8003d38:	00cb      	lsls	r3, r1, #3
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d40:	4651      	mov	r1, sl
 8003d42:	00ca      	lsls	r2, r1, #3
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	189b      	adds	r3, r3, r2
 8003d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d50:	464b      	mov	r3, r9
 8003d52:	460a      	mov	r2, r1
 8003d54:	eb42 0303 	adc.w	r3, r2, r3
 8003d58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	663b      	str	r3, [r7, #96]	; 0x60
 8003d64:	667a      	str	r2, [r7, #100]	; 0x64
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d72:	4649      	mov	r1, r9
 8003d74:	008b      	lsls	r3, r1, #2
 8003d76:	4641      	mov	r1, r8
 8003d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	008a      	lsls	r2, r1, #2
 8003d80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d84:	f7fc fa20 	bl	80001c8 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2164      	movs	r1, #100	; 0x64
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	3332      	adds	r3, #50	; 0x32
 8003da0:	4a08      	ldr	r2, [pc, #32]	; (8003dc4 <UART_SetConfig+0x4e4>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4422      	add	r2, r4
 8003db4:	609a      	str	r2, [r3, #8]
}
 8003db6:	bf00      	nop
 8003db8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc2:	bf00      	nop
 8003dc4:	51eb851f 	.word	0x51eb851f

08003dc8 <atoi>:
 8003dc8:	220a      	movs	r2, #10
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f000 b92a 	b.w	8004024 <strtol>

08003dd0 <__errno>:
 8003dd0:	4b01      	ldr	r3, [pc, #4]	; (8003dd8 <__errno+0x8>)
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	2000000c 	.word	0x2000000c

08003ddc <__libc_init_array>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	4d0d      	ldr	r5, [pc, #52]	; (8003e14 <__libc_init_array+0x38>)
 8003de0:	4c0d      	ldr	r4, [pc, #52]	; (8003e18 <__libc_init_array+0x3c>)
 8003de2:	1b64      	subs	r4, r4, r5
 8003de4:	10a4      	asrs	r4, r4, #2
 8003de6:	2600      	movs	r6, #0
 8003de8:	42a6      	cmp	r6, r4
 8003dea:	d109      	bne.n	8003e00 <__libc_init_array+0x24>
 8003dec:	4d0b      	ldr	r5, [pc, #44]	; (8003e1c <__libc_init_array+0x40>)
 8003dee:	4c0c      	ldr	r4, [pc, #48]	; (8003e20 <__libc_init_array+0x44>)
 8003df0:	f000 fdaa 	bl	8004948 <_init>
 8003df4:	1b64      	subs	r4, r4, r5
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	2600      	movs	r6, #0
 8003dfa:	42a6      	cmp	r6, r4
 8003dfc:	d105      	bne.n	8003e0a <__libc_init_array+0x2e>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e04:	4798      	blx	r3
 8003e06:	3601      	adds	r6, #1
 8003e08:	e7ee      	b.n	8003de8 <__libc_init_array+0xc>
 8003e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0e:	4798      	blx	r3
 8003e10:	3601      	adds	r6, #1
 8003e12:	e7f2      	b.n	8003dfa <__libc_init_array+0x1e>
 8003e14:	08004b1c 	.word	0x08004b1c
 8003e18:	08004b1c 	.word	0x08004b1c
 8003e1c:	08004b1c 	.word	0x08004b1c
 8003e20:	08004b20 	.word	0x08004b20

08003e24 <memset>:
 8003e24:	4402      	add	r2, r0
 8003e26:	4603      	mov	r3, r0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <memset+0xa>
 8003e2c:	4770      	bx	lr
 8003e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e32:	e7f9      	b.n	8003e28 <memset+0x4>

08003e34 <_puts_r>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	460e      	mov	r6, r1
 8003e38:	4605      	mov	r5, r0
 8003e3a:	b118      	cbz	r0, 8003e44 <_puts_r+0x10>
 8003e3c:	6983      	ldr	r3, [r0, #24]
 8003e3e:	b90b      	cbnz	r3, 8003e44 <_puts_r+0x10>
 8003e40:	f000 fad4 	bl	80043ec <__sinit>
 8003e44:	69ab      	ldr	r3, [r5, #24]
 8003e46:	68ac      	ldr	r4, [r5, #8]
 8003e48:	b913      	cbnz	r3, 8003e50 <_puts_r+0x1c>
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f000 face 	bl	80043ec <__sinit>
 8003e50:	4b2c      	ldr	r3, [pc, #176]	; (8003f04 <_puts_r+0xd0>)
 8003e52:	429c      	cmp	r4, r3
 8003e54:	d120      	bne.n	8003e98 <_puts_r+0x64>
 8003e56:	686c      	ldr	r4, [r5, #4]
 8003e58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e5a:	07db      	lsls	r3, r3, #31
 8003e5c:	d405      	bmi.n	8003e6a <_puts_r+0x36>
 8003e5e:	89a3      	ldrh	r3, [r4, #12]
 8003e60:	0598      	lsls	r0, r3, #22
 8003e62:	d402      	bmi.n	8003e6a <_puts_r+0x36>
 8003e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e66:	f000 fb5f 	bl	8004528 <__retarget_lock_acquire_recursive>
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	0719      	lsls	r1, r3, #28
 8003e6e:	d51d      	bpl.n	8003eac <_puts_r+0x78>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	b1db      	cbz	r3, 8003eac <_puts_r+0x78>
 8003e74:	3e01      	subs	r6, #1
 8003e76:	68a3      	ldr	r3, [r4, #8]
 8003e78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	60a3      	str	r3, [r4, #8]
 8003e80:	bb39      	cbnz	r1, 8003ed2 <_puts_r+0x9e>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	da38      	bge.n	8003ef8 <_puts_r+0xc4>
 8003e86:	4622      	mov	r2, r4
 8003e88:	210a      	movs	r1, #10
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f8d4 	bl	8004038 <__swbuf_r>
 8003e90:	3001      	adds	r0, #1
 8003e92:	d011      	beq.n	8003eb8 <_puts_r+0x84>
 8003e94:	250a      	movs	r5, #10
 8003e96:	e011      	b.n	8003ebc <_puts_r+0x88>
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <_puts_r+0xd4>)
 8003e9a:	429c      	cmp	r4, r3
 8003e9c:	d101      	bne.n	8003ea2 <_puts_r+0x6e>
 8003e9e:	68ac      	ldr	r4, [r5, #8]
 8003ea0:	e7da      	b.n	8003e58 <_puts_r+0x24>
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <_puts_r+0xd8>)
 8003ea4:	429c      	cmp	r4, r3
 8003ea6:	bf08      	it	eq
 8003ea8:	68ec      	ldreq	r4, [r5, #12]
 8003eaa:	e7d5      	b.n	8003e58 <_puts_r+0x24>
 8003eac:	4621      	mov	r1, r4
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f000 f914 	bl	80040dc <__swsetup_r>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d0dd      	beq.n	8003e74 <_puts_r+0x40>
 8003eb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003ebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ebe:	07da      	lsls	r2, r3, #31
 8003ec0:	d405      	bmi.n	8003ece <_puts_r+0x9a>
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	059b      	lsls	r3, r3, #22
 8003ec6:	d402      	bmi.n	8003ece <_puts_r+0x9a>
 8003ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eca:	f000 fb2e 	bl	800452a <__retarget_lock_release_recursive>
 8003ece:	4628      	mov	r0, r5
 8003ed0:	bd70      	pop	{r4, r5, r6, pc}
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	da04      	bge.n	8003ee0 <_puts_r+0xac>
 8003ed6:	69a2      	ldr	r2, [r4, #24]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	dc06      	bgt.n	8003eea <_puts_r+0xb6>
 8003edc:	290a      	cmp	r1, #10
 8003ede:	d004      	beq.n	8003eea <_puts_r+0xb6>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	6022      	str	r2, [r4, #0]
 8003ee6:	7019      	strb	r1, [r3, #0]
 8003ee8:	e7c5      	b.n	8003e76 <_puts_r+0x42>
 8003eea:	4622      	mov	r2, r4
 8003eec:	4628      	mov	r0, r5
 8003eee:	f000 f8a3 	bl	8004038 <__swbuf_r>
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d1bf      	bne.n	8003e76 <_puts_r+0x42>
 8003ef6:	e7df      	b.n	8003eb8 <_puts_r+0x84>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	250a      	movs	r5, #10
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	6022      	str	r2, [r4, #0]
 8003f00:	701d      	strb	r5, [r3, #0]
 8003f02:	e7db      	b.n	8003ebc <_puts_r+0x88>
 8003f04:	08004ad4 	.word	0x08004ad4
 8003f08:	08004af4 	.word	0x08004af4
 8003f0c:	08004ab4 	.word	0x08004ab4

08003f10 <puts>:
 8003f10:	4b02      	ldr	r3, [pc, #8]	; (8003f1c <puts+0xc>)
 8003f12:	4601      	mov	r1, r0
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	f7ff bf8d 	b.w	8003e34 <_puts_r>
 8003f1a:	bf00      	nop
 8003f1c:	2000000c 	.word	0x2000000c

08003f20 <_strtol_l.constprop.0>:
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f26:	d001      	beq.n	8003f2c <_strtol_l.constprop.0+0xc>
 8003f28:	2b24      	cmp	r3, #36	; 0x24
 8003f2a:	d906      	bls.n	8003f3a <_strtol_l.constprop.0+0x1a>
 8003f2c:	f7ff ff50 	bl	8003dd0 <__errno>
 8003f30:	2316      	movs	r3, #22
 8003f32:	6003      	str	r3, [r0, #0]
 8003f34:	2000      	movs	r0, #0
 8003f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004020 <_strtol_l.constprop.0+0x100>
 8003f3e:	460d      	mov	r5, r1
 8003f40:	462e      	mov	r6, r5
 8003f42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f46:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003f4a:	f017 0708 	ands.w	r7, r7, #8
 8003f4e:	d1f7      	bne.n	8003f40 <_strtol_l.constprop.0+0x20>
 8003f50:	2c2d      	cmp	r4, #45	; 0x2d
 8003f52:	d132      	bne.n	8003fba <_strtol_l.constprop.0+0x9a>
 8003f54:	782c      	ldrb	r4, [r5, #0]
 8003f56:	2701      	movs	r7, #1
 8003f58:	1cb5      	adds	r5, r6, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d05b      	beq.n	8004016 <_strtol_l.constprop.0+0xf6>
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d109      	bne.n	8003f76 <_strtol_l.constprop.0+0x56>
 8003f62:	2c30      	cmp	r4, #48	; 0x30
 8003f64:	d107      	bne.n	8003f76 <_strtol_l.constprop.0+0x56>
 8003f66:	782c      	ldrb	r4, [r5, #0]
 8003f68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003f6c:	2c58      	cmp	r4, #88	; 0x58
 8003f6e:	d14d      	bne.n	800400c <_strtol_l.constprop.0+0xec>
 8003f70:	786c      	ldrb	r4, [r5, #1]
 8003f72:	2310      	movs	r3, #16
 8003f74:	3502      	adds	r5, #2
 8003f76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003f7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003f7e:	f04f 0c00 	mov.w	ip, #0
 8003f82:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f86:	4666      	mov	r6, ip
 8003f88:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003f90:	f1be 0f09 	cmp.w	lr, #9
 8003f94:	d816      	bhi.n	8003fc4 <_strtol_l.constprop.0+0xa4>
 8003f96:	4674      	mov	r4, lr
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	dd24      	ble.n	8003fe6 <_strtol_l.constprop.0+0xc6>
 8003f9c:	f1bc 0f00 	cmp.w	ip, #0
 8003fa0:	db1e      	blt.n	8003fe0 <_strtol_l.constprop.0+0xc0>
 8003fa2:	45b1      	cmp	r9, r6
 8003fa4:	d31c      	bcc.n	8003fe0 <_strtol_l.constprop.0+0xc0>
 8003fa6:	d101      	bne.n	8003fac <_strtol_l.constprop.0+0x8c>
 8003fa8:	45a2      	cmp	sl, r4
 8003faa:	db19      	blt.n	8003fe0 <_strtol_l.constprop.0+0xc0>
 8003fac:	fb06 4603 	mla	r6, r6, r3, r4
 8003fb0:	f04f 0c01 	mov.w	ip, #1
 8003fb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003fb8:	e7e8      	b.n	8003f8c <_strtol_l.constprop.0+0x6c>
 8003fba:	2c2b      	cmp	r4, #43	; 0x2b
 8003fbc:	bf04      	itt	eq
 8003fbe:	782c      	ldrbeq	r4, [r5, #0]
 8003fc0:	1cb5      	addeq	r5, r6, #2
 8003fc2:	e7ca      	b.n	8003f5a <_strtol_l.constprop.0+0x3a>
 8003fc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003fc8:	f1be 0f19 	cmp.w	lr, #25
 8003fcc:	d801      	bhi.n	8003fd2 <_strtol_l.constprop.0+0xb2>
 8003fce:	3c37      	subs	r4, #55	; 0x37
 8003fd0:	e7e2      	b.n	8003f98 <_strtol_l.constprop.0+0x78>
 8003fd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003fd6:	f1be 0f19 	cmp.w	lr, #25
 8003fda:	d804      	bhi.n	8003fe6 <_strtol_l.constprop.0+0xc6>
 8003fdc:	3c57      	subs	r4, #87	; 0x57
 8003fde:	e7db      	b.n	8003f98 <_strtol_l.constprop.0+0x78>
 8003fe0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003fe4:	e7e6      	b.n	8003fb4 <_strtol_l.constprop.0+0x94>
 8003fe6:	f1bc 0f00 	cmp.w	ip, #0
 8003fea:	da05      	bge.n	8003ff8 <_strtol_l.constprop.0+0xd8>
 8003fec:	2322      	movs	r3, #34	; 0x22
 8003fee:	6003      	str	r3, [r0, #0]
 8003ff0:	4646      	mov	r6, r8
 8003ff2:	b942      	cbnz	r2, 8004006 <_strtol_l.constprop.0+0xe6>
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	e79e      	b.n	8003f36 <_strtol_l.constprop.0+0x16>
 8003ff8:	b107      	cbz	r7, 8003ffc <_strtol_l.constprop.0+0xdc>
 8003ffa:	4276      	negs	r6, r6
 8003ffc:	2a00      	cmp	r2, #0
 8003ffe:	d0f9      	beq.n	8003ff4 <_strtol_l.constprop.0+0xd4>
 8004000:	f1bc 0f00 	cmp.w	ip, #0
 8004004:	d000      	beq.n	8004008 <_strtol_l.constprop.0+0xe8>
 8004006:	1e69      	subs	r1, r5, #1
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	e7f3      	b.n	8003ff4 <_strtol_l.constprop.0+0xd4>
 800400c:	2430      	movs	r4, #48	; 0x30
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1b1      	bne.n	8003f76 <_strtol_l.constprop.0+0x56>
 8004012:	2308      	movs	r3, #8
 8004014:	e7af      	b.n	8003f76 <_strtol_l.constprop.0+0x56>
 8004016:	2c30      	cmp	r4, #48	; 0x30
 8004018:	d0a5      	beq.n	8003f66 <_strtol_l.constprop.0+0x46>
 800401a:	230a      	movs	r3, #10
 800401c:	e7ab      	b.n	8003f76 <_strtol_l.constprop.0+0x56>
 800401e:	bf00      	nop
 8004020:	080049b1 	.word	0x080049b1

08004024 <strtol>:
 8004024:	4613      	mov	r3, r2
 8004026:	460a      	mov	r2, r1
 8004028:	4601      	mov	r1, r0
 800402a:	4802      	ldr	r0, [pc, #8]	; (8004034 <strtol+0x10>)
 800402c:	6800      	ldr	r0, [r0, #0]
 800402e:	f7ff bf77 	b.w	8003f20 <_strtol_l.constprop.0>
 8004032:	bf00      	nop
 8004034:	2000000c 	.word	0x2000000c

08004038 <__swbuf_r>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	460e      	mov	r6, r1
 800403c:	4614      	mov	r4, r2
 800403e:	4605      	mov	r5, r0
 8004040:	b118      	cbz	r0, 800404a <__swbuf_r+0x12>
 8004042:	6983      	ldr	r3, [r0, #24]
 8004044:	b90b      	cbnz	r3, 800404a <__swbuf_r+0x12>
 8004046:	f000 f9d1 	bl	80043ec <__sinit>
 800404a:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <__swbuf_r+0x98>)
 800404c:	429c      	cmp	r4, r3
 800404e:	d12b      	bne.n	80040a8 <__swbuf_r+0x70>
 8004050:	686c      	ldr	r4, [r5, #4]
 8004052:	69a3      	ldr	r3, [r4, #24]
 8004054:	60a3      	str	r3, [r4, #8]
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	071a      	lsls	r2, r3, #28
 800405a:	d52f      	bpl.n	80040bc <__swbuf_r+0x84>
 800405c:	6923      	ldr	r3, [r4, #16]
 800405e:	b36b      	cbz	r3, 80040bc <__swbuf_r+0x84>
 8004060:	6923      	ldr	r3, [r4, #16]
 8004062:	6820      	ldr	r0, [r4, #0]
 8004064:	1ac0      	subs	r0, r0, r3
 8004066:	6963      	ldr	r3, [r4, #20]
 8004068:	b2f6      	uxtb	r6, r6
 800406a:	4283      	cmp	r3, r0
 800406c:	4637      	mov	r7, r6
 800406e:	dc04      	bgt.n	800407a <__swbuf_r+0x42>
 8004070:	4621      	mov	r1, r4
 8004072:	4628      	mov	r0, r5
 8004074:	f000 f926 	bl	80042c4 <_fflush_r>
 8004078:	bb30      	cbnz	r0, 80040c8 <__swbuf_r+0x90>
 800407a:	68a3      	ldr	r3, [r4, #8]
 800407c:	3b01      	subs	r3, #1
 800407e:	60a3      	str	r3, [r4, #8]
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	6022      	str	r2, [r4, #0]
 8004086:	701e      	strb	r6, [r3, #0]
 8004088:	6963      	ldr	r3, [r4, #20]
 800408a:	3001      	adds	r0, #1
 800408c:	4283      	cmp	r3, r0
 800408e:	d004      	beq.n	800409a <__swbuf_r+0x62>
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	07db      	lsls	r3, r3, #31
 8004094:	d506      	bpl.n	80040a4 <__swbuf_r+0x6c>
 8004096:	2e0a      	cmp	r6, #10
 8004098:	d104      	bne.n	80040a4 <__swbuf_r+0x6c>
 800409a:	4621      	mov	r1, r4
 800409c:	4628      	mov	r0, r5
 800409e:	f000 f911 	bl	80042c4 <_fflush_r>
 80040a2:	b988      	cbnz	r0, 80040c8 <__swbuf_r+0x90>
 80040a4:	4638      	mov	r0, r7
 80040a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <__swbuf_r+0x9c>)
 80040aa:	429c      	cmp	r4, r3
 80040ac:	d101      	bne.n	80040b2 <__swbuf_r+0x7a>
 80040ae:	68ac      	ldr	r4, [r5, #8]
 80040b0:	e7cf      	b.n	8004052 <__swbuf_r+0x1a>
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <__swbuf_r+0xa0>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	bf08      	it	eq
 80040b8:	68ec      	ldreq	r4, [r5, #12]
 80040ba:	e7ca      	b.n	8004052 <__swbuf_r+0x1a>
 80040bc:	4621      	mov	r1, r4
 80040be:	4628      	mov	r0, r5
 80040c0:	f000 f80c 	bl	80040dc <__swsetup_r>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d0cb      	beq.n	8004060 <__swbuf_r+0x28>
 80040c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80040cc:	e7ea      	b.n	80040a4 <__swbuf_r+0x6c>
 80040ce:	bf00      	nop
 80040d0:	08004ad4 	.word	0x08004ad4
 80040d4:	08004af4 	.word	0x08004af4
 80040d8:	08004ab4 	.word	0x08004ab4

080040dc <__swsetup_r>:
 80040dc:	4b32      	ldr	r3, [pc, #200]	; (80041a8 <__swsetup_r+0xcc>)
 80040de:	b570      	push	{r4, r5, r6, lr}
 80040e0:	681d      	ldr	r5, [r3, #0]
 80040e2:	4606      	mov	r6, r0
 80040e4:	460c      	mov	r4, r1
 80040e6:	b125      	cbz	r5, 80040f2 <__swsetup_r+0x16>
 80040e8:	69ab      	ldr	r3, [r5, #24]
 80040ea:	b913      	cbnz	r3, 80040f2 <__swsetup_r+0x16>
 80040ec:	4628      	mov	r0, r5
 80040ee:	f000 f97d 	bl	80043ec <__sinit>
 80040f2:	4b2e      	ldr	r3, [pc, #184]	; (80041ac <__swsetup_r+0xd0>)
 80040f4:	429c      	cmp	r4, r3
 80040f6:	d10f      	bne.n	8004118 <__swsetup_r+0x3c>
 80040f8:	686c      	ldr	r4, [r5, #4]
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004100:	0719      	lsls	r1, r3, #28
 8004102:	d42c      	bmi.n	800415e <__swsetup_r+0x82>
 8004104:	06dd      	lsls	r5, r3, #27
 8004106:	d411      	bmi.n	800412c <__swsetup_r+0x50>
 8004108:	2309      	movs	r3, #9
 800410a:	6033      	str	r3, [r6, #0]
 800410c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004116:	e03e      	b.n	8004196 <__swsetup_r+0xba>
 8004118:	4b25      	ldr	r3, [pc, #148]	; (80041b0 <__swsetup_r+0xd4>)
 800411a:	429c      	cmp	r4, r3
 800411c:	d101      	bne.n	8004122 <__swsetup_r+0x46>
 800411e:	68ac      	ldr	r4, [r5, #8]
 8004120:	e7eb      	b.n	80040fa <__swsetup_r+0x1e>
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <__swsetup_r+0xd8>)
 8004124:	429c      	cmp	r4, r3
 8004126:	bf08      	it	eq
 8004128:	68ec      	ldreq	r4, [r5, #12]
 800412a:	e7e6      	b.n	80040fa <__swsetup_r+0x1e>
 800412c:	0758      	lsls	r0, r3, #29
 800412e:	d512      	bpl.n	8004156 <__swsetup_r+0x7a>
 8004130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004132:	b141      	cbz	r1, 8004146 <__swsetup_r+0x6a>
 8004134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004138:	4299      	cmp	r1, r3
 800413a:	d002      	beq.n	8004142 <__swsetup_r+0x66>
 800413c:	4630      	mov	r0, r6
 800413e:	f000 fa5b 	bl	80045f8 <_free_r>
 8004142:	2300      	movs	r3, #0
 8004144:	6363      	str	r3, [r4, #52]	; 0x34
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800414c:	81a3      	strh	r3, [r4, #12]
 800414e:	2300      	movs	r3, #0
 8004150:	6063      	str	r3, [r4, #4]
 8004152:	6923      	ldr	r3, [r4, #16]
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	f043 0308 	orr.w	r3, r3, #8
 800415c:	81a3      	strh	r3, [r4, #12]
 800415e:	6923      	ldr	r3, [r4, #16]
 8004160:	b94b      	cbnz	r3, 8004176 <__swsetup_r+0x9a>
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800416c:	d003      	beq.n	8004176 <__swsetup_r+0x9a>
 800416e:	4621      	mov	r1, r4
 8004170:	4630      	mov	r0, r6
 8004172:	f000 fa01 	bl	8004578 <__smakebuf_r>
 8004176:	89a0      	ldrh	r0, [r4, #12]
 8004178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800417c:	f010 0301 	ands.w	r3, r0, #1
 8004180:	d00a      	beq.n	8004198 <__swsetup_r+0xbc>
 8004182:	2300      	movs	r3, #0
 8004184:	60a3      	str	r3, [r4, #8]
 8004186:	6963      	ldr	r3, [r4, #20]
 8004188:	425b      	negs	r3, r3
 800418a:	61a3      	str	r3, [r4, #24]
 800418c:	6923      	ldr	r3, [r4, #16]
 800418e:	b943      	cbnz	r3, 80041a2 <__swsetup_r+0xc6>
 8004190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004194:	d1ba      	bne.n	800410c <__swsetup_r+0x30>
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	0781      	lsls	r1, r0, #30
 800419a:	bf58      	it	pl
 800419c:	6963      	ldrpl	r3, [r4, #20]
 800419e:	60a3      	str	r3, [r4, #8]
 80041a0:	e7f4      	b.n	800418c <__swsetup_r+0xb0>
 80041a2:	2000      	movs	r0, #0
 80041a4:	e7f7      	b.n	8004196 <__swsetup_r+0xba>
 80041a6:	bf00      	nop
 80041a8:	2000000c 	.word	0x2000000c
 80041ac:	08004ad4 	.word	0x08004ad4
 80041b0:	08004af4 	.word	0x08004af4
 80041b4:	08004ab4 	.word	0x08004ab4

080041b8 <__sflush_r>:
 80041b8:	898a      	ldrh	r2, [r1, #12]
 80041ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041be:	4605      	mov	r5, r0
 80041c0:	0710      	lsls	r0, r2, #28
 80041c2:	460c      	mov	r4, r1
 80041c4:	d458      	bmi.n	8004278 <__sflush_r+0xc0>
 80041c6:	684b      	ldr	r3, [r1, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	dc05      	bgt.n	80041d8 <__sflush_r+0x20>
 80041cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dc02      	bgt.n	80041d8 <__sflush_r+0x20>
 80041d2:	2000      	movs	r0, #0
 80041d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041da:	2e00      	cmp	r6, #0
 80041dc:	d0f9      	beq.n	80041d2 <__sflush_r+0x1a>
 80041de:	2300      	movs	r3, #0
 80041e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041e4:	682f      	ldr	r7, [r5, #0]
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	d032      	beq.n	8004250 <__sflush_r+0x98>
 80041ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	075a      	lsls	r2, r3, #29
 80041f0:	d505      	bpl.n	80041fe <__sflush_r+0x46>
 80041f2:	6863      	ldr	r3, [r4, #4]
 80041f4:	1ac0      	subs	r0, r0, r3
 80041f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041f8:	b10b      	cbz	r3, 80041fe <__sflush_r+0x46>
 80041fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041fc:	1ac0      	subs	r0, r0, r3
 80041fe:	2300      	movs	r3, #0
 8004200:	4602      	mov	r2, r0
 8004202:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004204:	6a21      	ldr	r1, [r4, #32]
 8004206:	4628      	mov	r0, r5
 8004208:	47b0      	blx	r6
 800420a:	1c43      	adds	r3, r0, #1
 800420c:	89a3      	ldrh	r3, [r4, #12]
 800420e:	d106      	bne.n	800421e <__sflush_r+0x66>
 8004210:	6829      	ldr	r1, [r5, #0]
 8004212:	291d      	cmp	r1, #29
 8004214:	d82c      	bhi.n	8004270 <__sflush_r+0xb8>
 8004216:	4a2a      	ldr	r2, [pc, #168]	; (80042c0 <__sflush_r+0x108>)
 8004218:	40ca      	lsrs	r2, r1
 800421a:	07d6      	lsls	r6, r2, #31
 800421c:	d528      	bpl.n	8004270 <__sflush_r+0xb8>
 800421e:	2200      	movs	r2, #0
 8004220:	6062      	str	r2, [r4, #4]
 8004222:	04d9      	lsls	r1, r3, #19
 8004224:	6922      	ldr	r2, [r4, #16]
 8004226:	6022      	str	r2, [r4, #0]
 8004228:	d504      	bpl.n	8004234 <__sflush_r+0x7c>
 800422a:	1c42      	adds	r2, r0, #1
 800422c:	d101      	bne.n	8004232 <__sflush_r+0x7a>
 800422e:	682b      	ldr	r3, [r5, #0]
 8004230:	b903      	cbnz	r3, 8004234 <__sflush_r+0x7c>
 8004232:	6560      	str	r0, [r4, #84]	; 0x54
 8004234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004236:	602f      	str	r7, [r5, #0]
 8004238:	2900      	cmp	r1, #0
 800423a:	d0ca      	beq.n	80041d2 <__sflush_r+0x1a>
 800423c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004240:	4299      	cmp	r1, r3
 8004242:	d002      	beq.n	800424a <__sflush_r+0x92>
 8004244:	4628      	mov	r0, r5
 8004246:	f000 f9d7 	bl	80045f8 <_free_r>
 800424a:	2000      	movs	r0, #0
 800424c:	6360      	str	r0, [r4, #52]	; 0x34
 800424e:	e7c1      	b.n	80041d4 <__sflush_r+0x1c>
 8004250:	6a21      	ldr	r1, [r4, #32]
 8004252:	2301      	movs	r3, #1
 8004254:	4628      	mov	r0, r5
 8004256:	47b0      	blx	r6
 8004258:	1c41      	adds	r1, r0, #1
 800425a:	d1c7      	bne.n	80041ec <__sflush_r+0x34>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0c4      	beq.n	80041ec <__sflush_r+0x34>
 8004262:	2b1d      	cmp	r3, #29
 8004264:	d001      	beq.n	800426a <__sflush_r+0xb2>
 8004266:	2b16      	cmp	r3, #22
 8004268:	d101      	bne.n	800426e <__sflush_r+0xb6>
 800426a:	602f      	str	r7, [r5, #0]
 800426c:	e7b1      	b.n	80041d2 <__sflush_r+0x1a>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	e7ad      	b.n	80041d4 <__sflush_r+0x1c>
 8004278:	690f      	ldr	r7, [r1, #16]
 800427a:	2f00      	cmp	r7, #0
 800427c:	d0a9      	beq.n	80041d2 <__sflush_r+0x1a>
 800427e:	0793      	lsls	r3, r2, #30
 8004280:	680e      	ldr	r6, [r1, #0]
 8004282:	bf08      	it	eq
 8004284:	694b      	ldreq	r3, [r1, #20]
 8004286:	600f      	str	r7, [r1, #0]
 8004288:	bf18      	it	ne
 800428a:	2300      	movne	r3, #0
 800428c:	eba6 0807 	sub.w	r8, r6, r7
 8004290:	608b      	str	r3, [r1, #8]
 8004292:	f1b8 0f00 	cmp.w	r8, #0
 8004296:	dd9c      	ble.n	80041d2 <__sflush_r+0x1a>
 8004298:	6a21      	ldr	r1, [r4, #32]
 800429a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800429c:	4643      	mov	r3, r8
 800429e:	463a      	mov	r2, r7
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b0      	blx	r6
 80042a4:	2800      	cmp	r0, #0
 80042a6:	dc06      	bgt.n	80042b6 <__sflush_r+0xfe>
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042b4:	e78e      	b.n	80041d4 <__sflush_r+0x1c>
 80042b6:	4407      	add	r7, r0
 80042b8:	eba8 0800 	sub.w	r8, r8, r0
 80042bc:	e7e9      	b.n	8004292 <__sflush_r+0xda>
 80042be:	bf00      	nop
 80042c0:	20400001 	.word	0x20400001

080042c4 <_fflush_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	690b      	ldr	r3, [r1, #16]
 80042c8:	4605      	mov	r5, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	b913      	cbnz	r3, 80042d4 <_fflush_r+0x10>
 80042ce:	2500      	movs	r5, #0
 80042d0:	4628      	mov	r0, r5
 80042d2:	bd38      	pop	{r3, r4, r5, pc}
 80042d4:	b118      	cbz	r0, 80042de <_fflush_r+0x1a>
 80042d6:	6983      	ldr	r3, [r0, #24]
 80042d8:	b90b      	cbnz	r3, 80042de <_fflush_r+0x1a>
 80042da:	f000 f887 	bl	80043ec <__sinit>
 80042de:	4b14      	ldr	r3, [pc, #80]	; (8004330 <_fflush_r+0x6c>)
 80042e0:	429c      	cmp	r4, r3
 80042e2:	d11b      	bne.n	800431c <_fflush_r+0x58>
 80042e4:	686c      	ldr	r4, [r5, #4]
 80042e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ef      	beq.n	80042ce <_fflush_r+0xa>
 80042ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042f0:	07d0      	lsls	r0, r2, #31
 80042f2:	d404      	bmi.n	80042fe <_fflush_r+0x3a>
 80042f4:	0599      	lsls	r1, r3, #22
 80042f6:	d402      	bmi.n	80042fe <_fflush_r+0x3a>
 80042f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042fa:	f000 f915 	bl	8004528 <__retarget_lock_acquire_recursive>
 80042fe:	4628      	mov	r0, r5
 8004300:	4621      	mov	r1, r4
 8004302:	f7ff ff59 	bl	80041b8 <__sflush_r>
 8004306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004308:	07da      	lsls	r2, r3, #31
 800430a:	4605      	mov	r5, r0
 800430c:	d4e0      	bmi.n	80042d0 <_fflush_r+0xc>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	059b      	lsls	r3, r3, #22
 8004312:	d4dd      	bmi.n	80042d0 <_fflush_r+0xc>
 8004314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004316:	f000 f908 	bl	800452a <__retarget_lock_release_recursive>
 800431a:	e7d9      	b.n	80042d0 <_fflush_r+0xc>
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <_fflush_r+0x70>)
 800431e:	429c      	cmp	r4, r3
 8004320:	d101      	bne.n	8004326 <_fflush_r+0x62>
 8004322:	68ac      	ldr	r4, [r5, #8]
 8004324:	e7df      	b.n	80042e6 <_fflush_r+0x22>
 8004326:	4b04      	ldr	r3, [pc, #16]	; (8004338 <_fflush_r+0x74>)
 8004328:	429c      	cmp	r4, r3
 800432a:	bf08      	it	eq
 800432c:	68ec      	ldreq	r4, [r5, #12]
 800432e:	e7da      	b.n	80042e6 <_fflush_r+0x22>
 8004330:	08004ad4 	.word	0x08004ad4
 8004334:	08004af4 	.word	0x08004af4
 8004338:	08004ab4 	.word	0x08004ab4

0800433c <std>:
 800433c:	2300      	movs	r3, #0
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
 8004342:	e9c0 3300 	strd	r3, r3, [r0]
 8004346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800434a:	6083      	str	r3, [r0, #8]
 800434c:	8181      	strh	r1, [r0, #12]
 800434e:	6643      	str	r3, [r0, #100]	; 0x64
 8004350:	81c2      	strh	r2, [r0, #14]
 8004352:	6183      	str	r3, [r0, #24]
 8004354:	4619      	mov	r1, r3
 8004356:	2208      	movs	r2, #8
 8004358:	305c      	adds	r0, #92	; 0x5c
 800435a:	f7ff fd63 	bl	8003e24 <memset>
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <std+0x38>)
 8004360:	6263      	str	r3, [r4, #36]	; 0x24
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <std+0x3c>)
 8004364:	62a3      	str	r3, [r4, #40]	; 0x28
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <std+0x40>)
 8004368:	62e3      	str	r3, [r4, #44]	; 0x2c
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <std+0x44>)
 800436c:	6224      	str	r4, [r4, #32]
 800436e:	6323      	str	r3, [r4, #48]	; 0x30
 8004370:	bd10      	pop	{r4, pc}
 8004372:	bf00      	nop
 8004374:	080047d9 	.word	0x080047d9
 8004378:	080047fb 	.word	0x080047fb
 800437c:	08004833 	.word	0x08004833
 8004380:	08004857 	.word	0x08004857

08004384 <_cleanup_r>:
 8004384:	4901      	ldr	r1, [pc, #4]	; (800438c <_cleanup_r+0x8>)
 8004386:	f000 b8af 	b.w	80044e8 <_fwalk_reent>
 800438a:	bf00      	nop
 800438c:	080042c5 	.word	0x080042c5

08004390 <__sfmoreglue>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	2268      	movs	r2, #104	; 0x68
 8004394:	1e4d      	subs	r5, r1, #1
 8004396:	4355      	muls	r5, r2
 8004398:	460e      	mov	r6, r1
 800439a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800439e:	f000 f997 	bl	80046d0 <_malloc_r>
 80043a2:	4604      	mov	r4, r0
 80043a4:	b140      	cbz	r0, 80043b8 <__sfmoreglue+0x28>
 80043a6:	2100      	movs	r1, #0
 80043a8:	e9c0 1600 	strd	r1, r6, [r0]
 80043ac:	300c      	adds	r0, #12
 80043ae:	60a0      	str	r0, [r4, #8]
 80043b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043b4:	f7ff fd36 	bl	8003e24 <memset>
 80043b8:	4620      	mov	r0, r4
 80043ba:	bd70      	pop	{r4, r5, r6, pc}

080043bc <__sfp_lock_acquire>:
 80043bc:	4801      	ldr	r0, [pc, #4]	; (80043c4 <__sfp_lock_acquire+0x8>)
 80043be:	f000 b8b3 	b.w	8004528 <__retarget_lock_acquire_recursive>
 80043c2:	bf00      	nop
 80043c4:	20000121 	.word	0x20000121

080043c8 <__sfp_lock_release>:
 80043c8:	4801      	ldr	r0, [pc, #4]	; (80043d0 <__sfp_lock_release+0x8>)
 80043ca:	f000 b8ae 	b.w	800452a <__retarget_lock_release_recursive>
 80043ce:	bf00      	nop
 80043d0:	20000121 	.word	0x20000121

080043d4 <__sinit_lock_acquire>:
 80043d4:	4801      	ldr	r0, [pc, #4]	; (80043dc <__sinit_lock_acquire+0x8>)
 80043d6:	f000 b8a7 	b.w	8004528 <__retarget_lock_acquire_recursive>
 80043da:	bf00      	nop
 80043dc:	20000122 	.word	0x20000122

080043e0 <__sinit_lock_release>:
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <__sinit_lock_release+0x8>)
 80043e2:	f000 b8a2 	b.w	800452a <__retarget_lock_release_recursive>
 80043e6:	bf00      	nop
 80043e8:	20000122 	.word	0x20000122

080043ec <__sinit>:
 80043ec:	b510      	push	{r4, lr}
 80043ee:	4604      	mov	r4, r0
 80043f0:	f7ff fff0 	bl	80043d4 <__sinit_lock_acquire>
 80043f4:	69a3      	ldr	r3, [r4, #24]
 80043f6:	b11b      	cbz	r3, 8004400 <__sinit+0x14>
 80043f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043fc:	f7ff bff0 	b.w	80043e0 <__sinit_lock_release>
 8004400:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004404:	6523      	str	r3, [r4, #80]	; 0x50
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <__sinit+0x68>)
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <__sinit+0x6c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	62a2      	str	r2, [r4, #40]	; 0x28
 800440e:	42a3      	cmp	r3, r4
 8004410:	bf04      	itt	eq
 8004412:	2301      	moveq	r3, #1
 8004414:	61a3      	streq	r3, [r4, #24]
 8004416:	4620      	mov	r0, r4
 8004418:	f000 f820 	bl	800445c <__sfp>
 800441c:	6060      	str	r0, [r4, #4]
 800441e:	4620      	mov	r0, r4
 8004420:	f000 f81c 	bl	800445c <__sfp>
 8004424:	60a0      	str	r0, [r4, #8]
 8004426:	4620      	mov	r0, r4
 8004428:	f000 f818 	bl	800445c <__sfp>
 800442c:	2200      	movs	r2, #0
 800442e:	60e0      	str	r0, [r4, #12]
 8004430:	2104      	movs	r1, #4
 8004432:	6860      	ldr	r0, [r4, #4]
 8004434:	f7ff ff82 	bl	800433c <std>
 8004438:	68a0      	ldr	r0, [r4, #8]
 800443a:	2201      	movs	r2, #1
 800443c:	2109      	movs	r1, #9
 800443e:	f7ff ff7d 	bl	800433c <std>
 8004442:	68e0      	ldr	r0, [r4, #12]
 8004444:	2202      	movs	r2, #2
 8004446:	2112      	movs	r1, #18
 8004448:	f7ff ff78 	bl	800433c <std>
 800444c:	2301      	movs	r3, #1
 800444e:	61a3      	str	r3, [r4, #24]
 8004450:	e7d2      	b.n	80043f8 <__sinit+0xc>
 8004452:	bf00      	nop
 8004454:	080049ac 	.word	0x080049ac
 8004458:	08004385 	.word	0x08004385

0800445c <__sfp>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	4607      	mov	r7, r0
 8004460:	f7ff ffac 	bl	80043bc <__sfp_lock_acquire>
 8004464:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <__sfp+0x84>)
 8004466:	681e      	ldr	r6, [r3, #0]
 8004468:	69b3      	ldr	r3, [r6, #24]
 800446a:	b913      	cbnz	r3, 8004472 <__sfp+0x16>
 800446c:	4630      	mov	r0, r6
 800446e:	f7ff ffbd 	bl	80043ec <__sinit>
 8004472:	3648      	adds	r6, #72	; 0x48
 8004474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004478:	3b01      	subs	r3, #1
 800447a:	d503      	bpl.n	8004484 <__sfp+0x28>
 800447c:	6833      	ldr	r3, [r6, #0]
 800447e:	b30b      	cbz	r3, 80044c4 <__sfp+0x68>
 8004480:	6836      	ldr	r6, [r6, #0]
 8004482:	e7f7      	b.n	8004474 <__sfp+0x18>
 8004484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004488:	b9d5      	cbnz	r5, 80044c0 <__sfp+0x64>
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <__sfp+0x88>)
 800448c:	60e3      	str	r3, [r4, #12]
 800448e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004492:	6665      	str	r5, [r4, #100]	; 0x64
 8004494:	f000 f847 	bl	8004526 <__retarget_lock_init_recursive>
 8004498:	f7ff ff96 	bl	80043c8 <__sfp_lock_release>
 800449c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044a4:	6025      	str	r5, [r4, #0]
 80044a6:	61a5      	str	r5, [r4, #24]
 80044a8:	2208      	movs	r2, #8
 80044aa:	4629      	mov	r1, r5
 80044ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044b0:	f7ff fcb8 	bl	8003e24 <memset>
 80044b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044bc:	4620      	mov	r0, r4
 80044be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c0:	3468      	adds	r4, #104	; 0x68
 80044c2:	e7d9      	b.n	8004478 <__sfp+0x1c>
 80044c4:	2104      	movs	r1, #4
 80044c6:	4638      	mov	r0, r7
 80044c8:	f7ff ff62 	bl	8004390 <__sfmoreglue>
 80044cc:	4604      	mov	r4, r0
 80044ce:	6030      	str	r0, [r6, #0]
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d1d5      	bne.n	8004480 <__sfp+0x24>
 80044d4:	f7ff ff78 	bl	80043c8 <__sfp_lock_release>
 80044d8:	230c      	movs	r3, #12
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	e7ee      	b.n	80044bc <__sfp+0x60>
 80044de:	bf00      	nop
 80044e0:	080049ac 	.word	0x080049ac
 80044e4:	ffff0001 	.word	0xffff0001

080044e8 <_fwalk_reent>:
 80044e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044ec:	4606      	mov	r6, r0
 80044ee:	4688      	mov	r8, r1
 80044f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044f4:	2700      	movs	r7, #0
 80044f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044fa:	f1b9 0901 	subs.w	r9, r9, #1
 80044fe:	d505      	bpl.n	800450c <_fwalk_reent+0x24>
 8004500:	6824      	ldr	r4, [r4, #0]
 8004502:	2c00      	cmp	r4, #0
 8004504:	d1f7      	bne.n	80044f6 <_fwalk_reent+0xe>
 8004506:	4638      	mov	r0, r7
 8004508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800450c:	89ab      	ldrh	r3, [r5, #12]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d907      	bls.n	8004522 <_fwalk_reent+0x3a>
 8004512:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004516:	3301      	adds	r3, #1
 8004518:	d003      	beq.n	8004522 <_fwalk_reent+0x3a>
 800451a:	4629      	mov	r1, r5
 800451c:	4630      	mov	r0, r6
 800451e:	47c0      	blx	r8
 8004520:	4307      	orrs	r7, r0
 8004522:	3568      	adds	r5, #104	; 0x68
 8004524:	e7e9      	b.n	80044fa <_fwalk_reent+0x12>

08004526 <__retarget_lock_init_recursive>:
 8004526:	4770      	bx	lr

08004528 <__retarget_lock_acquire_recursive>:
 8004528:	4770      	bx	lr

0800452a <__retarget_lock_release_recursive>:
 800452a:	4770      	bx	lr

0800452c <__swhatbuf_r>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	460e      	mov	r6, r1
 8004530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004534:	2900      	cmp	r1, #0
 8004536:	b096      	sub	sp, #88	; 0x58
 8004538:	4614      	mov	r4, r2
 800453a:	461d      	mov	r5, r3
 800453c:	da08      	bge.n	8004550 <__swhatbuf_r+0x24>
 800453e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	602a      	str	r2, [r5, #0]
 8004546:	061a      	lsls	r2, r3, #24
 8004548:	d410      	bmi.n	800456c <__swhatbuf_r+0x40>
 800454a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800454e:	e00e      	b.n	800456e <__swhatbuf_r+0x42>
 8004550:	466a      	mov	r2, sp
 8004552:	f000 f9a7 	bl	80048a4 <_fstat_r>
 8004556:	2800      	cmp	r0, #0
 8004558:	dbf1      	blt.n	800453e <__swhatbuf_r+0x12>
 800455a:	9a01      	ldr	r2, [sp, #4]
 800455c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004560:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004564:	425a      	negs	r2, r3
 8004566:	415a      	adcs	r2, r3
 8004568:	602a      	str	r2, [r5, #0]
 800456a:	e7ee      	b.n	800454a <__swhatbuf_r+0x1e>
 800456c:	2340      	movs	r3, #64	; 0x40
 800456e:	2000      	movs	r0, #0
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	b016      	add	sp, #88	; 0x58
 8004574:	bd70      	pop	{r4, r5, r6, pc}
	...

08004578 <__smakebuf_r>:
 8004578:	898b      	ldrh	r3, [r1, #12]
 800457a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800457c:	079d      	lsls	r5, r3, #30
 800457e:	4606      	mov	r6, r0
 8004580:	460c      	mov	r4, r1
 8004582:	d507      	bpl.n	8004594 <__smakebuf_r+0x1c>
 8004584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	6123      	str	r3, [r4, #16]
 800458c:	2301      	movs	r3, #1
 800458e:	6163      	str	r3, [r4, #20]
 8004590:	b002      	add	sp, #8
 8004592:	bd70      	pop	{r4, r5, r6, pc}
 8004594:	ab01      	add	r3, sp, #4
 8004596:	466a      	mov	r2, sp
 8004598:	f7ff ffc8 	bl	800452c <__swhatbuf_r>
 800459c:	9900      	ldr	r1, [sp, #0]
 800459e:	4605      	mov	r5, r0
 80045a0:	4630      	mov	r0, r6
 80045a2:	f000 f895 	bl	80046d0 <_malloc_r>
 80045a6:	b948      	cbnz	r0, 80045bc <__smakebuf_r+0x44>
 80045a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ac:	059a      	lsls	r2, r3, #22
 80045ae:	d4ef      	bmi.n	8004590 <__smakebuf_r+0x18>
 80045b0:	f023 0303 	bic.w	r3, r3, #3
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	81a3      	strh	r3, [r4, #12]
 80045ba:	e7e3      	b.n	8004584 <__smakebuf_r+0xc>
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <__smakebuf_r+0x7c>)
 80045be:	62b3      	str	r3, [r6, #40]	; 0x28
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	6020      	str	r0, [r4, #0]
 80045c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	9b00      	ldr	r3, [sp, #0]
 80045cc:	6163      	str	r3, [r4, #20]
 80045ce:	9b01      	ldr	r3, [sp, #4]
 80045d0:	6120      	str	r0, [r4, #16]
 80045d2:	b15b      	cbz	r3, 80045ec <__smakebuf_r+0x74>
 80045d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045d8:	4630      	mov	r0, r6
 80045da:	f000 f975 	bl	80048c8 <_isatty_r>
 80045de:	b128      	cbz	r0, 80045ec <__smakebuf_r+0x74>
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	81a3      	strh	r3, [r4, #12]
 80045ec:	89a0      	ldrh	r0, [r4, #12]
 80045ee:	4305      	orrs	r5, r0
 80045f0:	81a5      	strh	r5, [r4, #12]
 80045f2:	e7cd      	b.n	8004590 <__smakebuf_r+0x18>
 80045f4:	08004385 	.word	0x08004385

080045f8 <_free_r>:
 80045f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045fa:	2900      	cmp	r1, #0
 80045fc:	d044      	beq.n	8004688 <_free_r+0x90>
 80045fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004602:	9001      	str	r0, [sp, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f1a1 0404 	sub.w	r4, r1, #4
 800460a:	bfb8      	it	lt
 800460c:	18e4      	addlt	r4, r4, r3
 800460e:	f000 f97d 	bl	800490c <__malloc_lock>
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <_free_r+0x94>)
 8004614:	9801      	ldr	r0, [sp, #4]
 8004616:	6813      	ldr	r3, [r2, #0]
 8004618:	b933      	cbnz	r3, 8004628 <_free_r+0x30>
 800461a:	6063      	str	r3, [r4, #4]
 800461c:	6014      	str	r4, [r2, #0]
 800461e:	b003      	add	sp, #12
 8004620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004624:	f000 b978 	b.w	8004918 <__malloc_unlock>
 8004628:	42a3      	cmp	r3, r4
 800462a:	d908      	bls.n	800463e <_free_r+0x46>
 800462c:	6825      	ldr	r5, [r4, #0]
 800462e:	1961      	adds	r1, r4, r5
 8004630:	428b      	cmp	r3, r1
 8004632:	bf01      	itttt	eq
 8004634:	6819      	ldreq	r1, [r3, #0]
 8004636:	685b      	ldreq	r3, [r3, #4]
 8004638:	1949      	addeq	r1, r1, r5
 800463a:	6021      	streq	r1, [r4, #0]
 800463c:	e7ed      	b.n	800461a <_free_r+0x22>
 800463e:	461a      	mov	r2, r3
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	b10b      	cbz	r3, 8004648 <_free_r+0x50>
 8004644:	42a3      	cmp	r3, r4
 8004646:	d9fa      	bls.n	800463e <_free_r+0x46>
 8004648:	6811      	ldr	r1, [r2, #0]
 800464a:	1855      	adds	r5, r2, r1
 800464c:	42a5      	cmp	r5, r4
 800464e:	d10b      	bne.n	8004668 <_free_r+0x70>
 8004650:	6824      	ldr	r4, [r4, #0]
 8004652:	4421      	add	r1, r4
 8004654:	1854      	adds	r4, r2, r1
 8004656:	42a3      	cmp	r3, r4
 8004658:	6011      	str	r1, [r2, #0]
 800465a:	d1e0      	bne.n	800461e <_free_r+0x26>
 800465c:	681c      	ldr	r4, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	6053      	str	r3, [r2, #4]
 8004662:	4421      	add	r1, r4
 8004664:	6011      	str	r1, [r2, #0]
 8004666:	e7da      	b.n	800461e <_free_r+0x26>
 8004668:	d902      	bls.n	8004670 <_free_r+0x78>
 800466a:	230c      	movs	r3, #12
 800466c:	6003      	str	r3, [r0, #0]
 800466e:	e7d6      	b.n	800461e <_free_r+0x26>
 8004670:	6825      	ldr	r5, [r4, #0]
 8004672:	1961      	adds	r1, r4, r5
 8004674:	428b      	cmp	r3, r1
 8004676:	bf04      	itt	eq
 8004678:	6819      	ldreq	r1, [r3, #0]
 800467a:	685b      	ldreq	r3, [r3, #4]
 800467c:	6063      	str	r3, [r4, #4]
 800467e:	bf04      	itt	eq
 8004680:	1949      	addeq	r1, r1, r5
 8004682:	6021      	streq	r1, [r4, #0]
 8004684:	6054      	str	r4, [r2, #4]
 8004686:	e7ca      	b.n	800461e <_free_r+0x26>
 8004688:	b003      	add	sp, #12
 800468a:	bd30      	pop	{r4, r5, pc}
 800468c:	20000124 	.word	0x20000124

08004690 <sbrk_aligned>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	4e0e      	ldr	r6, [pc, #56]	; (80046cc <sbrk_aligned+0x3c>)
 8004694:	460c      	mov	r4, r1
 8004696:	6831      	ldr	r1, [r6, #0]
 8004698:	4605      	mov	r5, r0
 800469a:	b911      	cbnz	r1, 80046a2 <sbrk_aligned+0x12>
 800469c:	f000 f88c 	bl	80047b8 <_sbrk_r>
 80046a0:	6030      	str	r0, [r6, #0]
 80046a2:	4621      	mov	r1, r4
 80046a4:	4628      	mov	r0, r5
 80046a6:	f000 f887 	bl	80047b8 <_sbrk_r>
 80046aa:	1c43      	adds	r3, r0, #1
 80046ac:	d00a      	beq.n	80046c4 <sbrk_aligned+0x34>
 80046ae:	1cc4      	adds	r4, r0, #3
 80046b0:	f024 0403 	bic.w	r4, r4, #3
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d007      	beq.n	80046c8 <sbrk_aligned+0x38>
 80046b8:	1a21      	subs	r1, r4, r0
 80046ba:	4628      	mov	r0, r5
 80046bc:	f000 f87c 	bl	80047b8 <_sbrk_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d101      	bne.n	80046c8 <sbrk_aligned+0x38>
 80046c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046c8:	4620      	mov	r0, r4
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	20000128 	.word	0x20000128

080046d0 <_malloc_r>:
 80046d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d4:	1ccd      	adds	r5, r1, #3
 80046d6:	f025 0503 	bic.w	r5, r5, #3
 80046da:	3508      	adds	r5, #8
 80046dc:	2d0c      	cmp	r5, #12
 80046de:	bf38      	it	cc
 80046e0:	250c      	movcc	r5, #12
 80046e2:	2d00      	cmp	r5, #0
 80046e4:	4607      	mov	r7, r0
 80046e6:	db01      	blt.n	80046ec <_malloc_r+0x1c>
 80046e8:	42a9      	cmp	r1, r5
 80046ea:	d905      	bls.n	80046f8 <_malloc_r+0x28>
 80046ec:	230c      	movs	r3, #12
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	2600      	movs	r6, #0
 80046f2:	4630      	mov	r0, r6
 80046f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f8:	4e2e      	ldr	r6, [pc, #184]	; (80047b4 <_malloc_r+0xe4>)
 80046fa:	f000 f907 	bl	800490c <__malloc_lock>
 80046fe:	6833      	ldr	r3, [r6, #0]
 8004700:	461c      	mov	r4, r3
 8004702:	bb34      	cbnz	r4, 8004752 <_malloc_r+0x82>
 8004704:	4629      	mov	r1, r5
 8004706:	4638      	mov	r0, r7
 8004708:	f7ff ffc2 	bl	8004690 <sbrk_aligned>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	4604      	mov	r4, r0
 8004710:	d14d      	bne.n	80047ae <_malloc_r+0xde>
 8004712:	6834      	ldr	r4, [r6, #0]
 8004714:	4626      	mov	r6, r4
 8004716:	2e00      	cmp	r6, #0
 8004718:	d140      	bne.n	800479c <_malloc_r+0xcc>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	4631      	mov	r1, r6
 800471e:	4638      	mov	r0, r7
 8004720:	eb04 0803 	add.w	r8, r4, r3
 8004724:	f000 f848 	bl	80047b8 <_sbrk_r>
 8004728:	4580      	cmp	r8, r0
 800472a:	d13a      	bne.n	80047a2 <_malloc_r+0xd2>
 800472c:	6821      	ldr	r1, [r4, #0]
 800472e:	3503      	adds	r5, #3
 8004730:	1a6d      	subs	r5, r5, r1
 8004732:	f025 0503 	bic.w	r5, r5, #3
 8004736:	3508      	adds	r5, #8
 8004738:	2d0c      	cmp	r5, #12
 800473a:	bf38      	it	cc
 800473c:	250c      	movcc	r5, #12
 800473e:	4629      	mov	r1, r5
 8004740:	4638      	mov	r0, r7
 8004742:	f7ff ffa5 	bl	8004690 <sbrk_aligned>
 8004746:	3001      	adds	r0, #1
 8004748:	d02b      	beq.n	80047a2 <_malloc_r+0xd2>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	442b      	add	r3, r5
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	e00e      	b.n	8004770 <_malloc_r+0xa0>
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	1b52      	subs	r2, r2, r5
 8004756:	d41e      	bmi.n	8004796 <_malloc_r+0xc6>
 8004758:	2a0b      	cmp	r2, #11
 800475a:	d916      	bls.n	800478a <_malloc_r+0xba>
 800475c:	1961      	adds	r1, r4, r5
 800475e:	42a3      	cmp	r3, r4
 8004760:	6025      	str	r5, [r4, #0]
 8004762:	bf18      	it	ne
 8004764:	6059      	strne	r1, [r3, #4]
 8004766:	6863      	ldr	r3, [r4, #4]
 8004768:	bf08      	it	eq
 800476a:	6031      	streq	r1, [r6, #0]
 800476c:	5162      	str	r2, [r4, r5]
 800476e:	604b      	str	r3, [r1, #4]
 8004770:	4638      	mov	r0, r7
 8004772:	f104 060b 	add.w	r6, r4, #11
 8004776:	f000 f8cf 	bl	8004918 <__malloc_unlock>
 800477a:	f026 0607 	bic.w	r6, r6, #7
 800477e:	1d23      	adds	r3, r4, #4
 8004780:	1af2      	subs	r2, r6, r3
 8004782:	d0b6      	beq.n	80046f2 <_malloc_r+0x22>
 8004784:	1b9b      	subs	r3, r3, r6
 8004786:	50a3      	str	r3, [r4, r2]
 8004788:	e7b3      	b.n	80046f2 <_malloc_r+0x22>
 800478a:	6862      	ldr	r2, [r4, #4]
 800478c:	42a3      	cmp	r3, r4
 800478e:	bf0c      	ite	eq
 8004790:	6032      	streq	r2, [r6, #0]
 8004792:	605a      	strne	r2, [r3, #4]
 8004794:	e7ec      	b.n	8004770 <_malloc_r+0xa0>
 8004796:	4623      	mov	r3, r4
 8004798:	6864      	ldr	r4, [r4, #4]
 800479a:	e7b2      	b.n	8004702 <_malloc_r+0x32>
 800479c:	4634      	mov	r4, r6
 800479e:	6876      	ldr	r6, [r6, #4]
 80047a0:	e7b9      	b.n	8004716 <_malloc_r+0x46>
 80047a2:	230c      	movs	r3, #12
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	4638      	mov	r0, r7
 80047a8:	f000 f8b6 	bl	8004918 <__malloc_unlock>
 80047ac:	e7a1      	b.n	80046f2 <_malloc_r+0x22>
 80047ae:	6025      	str	r5, [r4, #0]
 80047b0:	e7de      	b.n	8004770 <_malloc_r+0xa0>
 80047b2:	bf00      	nop
 80047b4:	20000124 	.word	0x20000124

080047b8 <_sbrk_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4d06      	ldr	r5, [pc, #24]	; (80047d4 <_sbrk_r+0x1c>)
 80047bc:	2300      	movs	r3, #0
 80047be:	4604      	mov	r4, r0
 80047c0:	4608      	mov	r0, r1
 80047c2:	602b      	str	r3, [r5, #0]
 80047c4:	f7fc fa28 	bl	8000c18 <_sbrk>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_sbrk_r+0x1a>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_sbrk_r+0x1a>
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	2000012c 	.word	0x2000012c

080047d8 <__sread>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	460c      	mov	r4, r1
 80047dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e0:	f000 f8a0 	bl	8004924 <_read_r>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	bfab      	itete	ge
 80047e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047ea:	89a3      	ldrhlt	r3, [r4, #12]
 80047ec:	181b      	addge	r3, r3, r0
 80047ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047f2:	bfac      	ite	ge
 80047f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80047f6:	81a3      	strhlt	r3, [r4, #12]
 80047f8:	bd10      	pop	{r4, pc}

080047fa <__swrite>:
 80047fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fe:	461f      	mov	r7, r3
 8004800:	898b      	ldrh	r3, [r1, #12]
 8004802:	05db      	lsls	r3, r3, #23
 8004804:	4605      	mov	r5, r0
 8004806:	460c      	mov	r4, r1
 8004808:	4616      	mov	r6, r2
 800480a:	d505      	bpl.n	8004818 <__swrite+0x1e>
 800480c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004810:	2302      	movs	r3, #2
 8004812:	2200      	movs	r2, #0
 8004814:	f000 f868 	bl	80048e8 <_lseek_r>
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800481e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004822:	81a3      	strh	r3, [r4, #12]
 8004824:	4632      	mov	r2, r6
 8004826:	463b      	mov	r3, r7
 8004828:	4628      	mov	r0, r5
 800482a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800482e:	f000 b817 	b.w	8004860 <_write_r>

08004832 <__sseek>:
 8004832:	b510      	push	{r4, lr}
 8004834:	460c      	mov	r4, r1
 8004836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483a:	f000 f855 	bl	80048e8 <_lseek_r>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	bf15      	itete	ne
 8004844:	6560      	strne	r0, [r4, #84]	; 0x54
 8004846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800484a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800484e:	81a3      	strheq	r3, [r4, #12]
 8004850:	bf18      	it	ne
 8004852:	81a3      	strhne	r3, [r4, #12]
 8004854:	bd10      	pop	{r4, pc}

08004856 <__sclose>:
 8004856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485a:	f000 b813 	b.w	8004884 <_close_r>
	...

08004860 <_write_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d07      	ldr	r5, [pc, #28]	; (8004880 <_write_r+0x20>)
 8004864:	4604      	mov	r4, r0
 8004866:	4608      	mov	r0, r1
 8004868:	4611      	mov	r1, r2
 800486a:	2200      	movs	r2, #0
 800486c:	602a      	str	r2, [r5, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	f7fc f981 	bl	8000b76 <_write>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_write_r+0x1e>
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	b103      	cbz	r3, 800487e <_write_r+0x1e>
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	2000012c 	.word	0x2000012c

08004884 <_close_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4d06      	ldr	r5, [pc, #24]	; (80048a0 <_close_r+0x1c>)
 8004888:	2300      	movs	r3, #0
 800488a:	4604      	mov	r4, r0
 800488c:	4608      	mov	r0, r1
 800488e:	602b      	str	r3, [r5, #0]
 8004890:	f7fc f98d 	bl	8000bae <_close>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d102      	bne.n	800489e <_close_r+0x1a>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	b103      	cbz	r3, 800489e <_close_r+0x1a>
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	2000012c 	.word	0x2000012c

080048a4 <_fstat_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d07      	ldr	r5, [pc, #28]	; (80048c4 <_fstat_r+0x20>)
 80048a8:	2300      	movs	r3, #0
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	4611      	mov	r1, r2
 80048b0:	602b      	str	r3, [r5, #0]
 80048b2:	f7fc f988 	bl	8000bc6 <_fstat>
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	d102      	bne.n	80048c0 <_fstat_r+0x1c>
 80048ba:	682b      	ldr	r3, [r5, #0]
 80048bc:	b103      	cbz	r3, 80048c0 <_fstat_r+0x1c>
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	bd38      	pop	{r3, r4, r5, pc}
 80048c2:	bf00      	nop
 80048c4:	2000012c 	.word	0x2000012c

080048c8 <_isatty_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d06      	ldr	r5, [pc, #24]	; (80048e4 <_isatty_r+0x1c>)
 80048cc:	2300      	movs	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	f7fc f987 	bl	8000be6 <_isatty>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_isatty_r+0x1a>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_isatty_r+0x1a>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	2000012c 	.word	0x2000012c

080048e8 <_lseek_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4d07      	ldr	r5, [pc, #28]	; (8004908 <_lseek_r+0x20>)
 80048ec:	4604      	mov	r4, r0
 80048ee:	4608      	mov	r0, r1
 80048f0:	4611      	mov	r1, r2
 80048f2:	2200      	movs	r2, #0
 80048f4:	602a      	str	r2, [r5, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f7fc f980 	bl	8000bfc <_lseek>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_lseek_r+0x1e>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_lseek_r+0x1e>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	2000012c 	.word	0x2000012c

0800490c <__malloc_lock>:
 800490c:	4801      	ldr	r0, [pc, #4]	; (8004914 <__malloc_lock+0x8>)
 800490e:	f7ff be0b 	b.w	8004528 <__retarget_lock_acquire_recursive>
 8004912:	bf00      	nop
 8004914:	20000120 	.word	0x20000120

08004918 <__malloc_unlock>:
 8004918:	4801      	ldr	r0, [pc, #4]	; (8004920 <__malloc_unlock+0x8>)
 800491a:	f7ff be06 	b.w	800452a <__retarget_lock_release_recursive>
 800491e:	bf00      	nop
 8004920:	20000120 	.word	0x20000120

08004924 <_read_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4d07      	ldr	r5, [pc, #28]	; (8004944 <_read_r+0x20>)
 8004928:	4604      	mov	r4, r0
 800492a:	4608      	mov	r0, r1
 800492c:	4611      	mov	r1, r2
 800492e:	2200      	movs	r2, #0
 8004930:	602a      	str	r2, [r5, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	f7fc f902 	bl	8000b3c <_read>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_read_r+0x1e>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_read_r+0x1e>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	2000012c 	.word	0x2000012c

08004948 <_init>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr

08004954 <_fini>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr
