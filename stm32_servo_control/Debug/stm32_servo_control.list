
stm32_servo_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003994  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c38  08003c38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c40  08003c40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dde5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d22  00000000  00000000  0002de85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  0002fba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c18  00000000  00000000  00030878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b80  00000000  00000000  00031490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e467  00000000  00000000  00053010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5bc  00000000  00000000  00061477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012da33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fb4  00000000  00000000  0012da84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b0c 	.word	0x08003b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003b0c 	.word	0x08003b0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char rx_buffer[RX_BUFFER_SIZE];
	char tx_buffer[RX_BUFFER_SIZE];
	uint8_t rx_data;
	int rx_index = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800057e:	f000 fa93 	bl	8000aa8 <HAL_Init>
	printf("Initilizing the main function.\n");
 8000582:	4830      	ldr	r0, [pc, #192]	; (8000644 <main+0xd0>)
 8000584:	f002 f956 	bl	8002834 <puts>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000588:	f000 f894 	bl	80006b4 <MX_GPIO_Init>
//	MX_TIM2_Init();
	MX_UART4_Init();
 800058c:	f000 f868 	bl	8000660 <MX_UART4_Init>
////	  htim2.Instance->CCR2 = 255;// duty cycle is 2.5 ms
//	  HAL_Delay(1500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf ("Waiting for Rx data...\n");
 8000590:	482d      	ldr	r0, [pc, #180]	; (8000648 <main+0xd4>)
 8000592:	f002 f94f 	bl	8002834 <puts>
	HAL_UART_Receive(&huart4, &rx_data, 1, HAL_MAX_DELAY);
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800059c:	2201      	movs	r2, #1
 800059e:	482b      	ldr	r0, [pc, #172]	; (800064c <main+0xd8>)
 80005a0:	f001 f8b9 	bl	8001716 <HAL_UART_Receive>
	while(rx_data != '\n' && rx_index < RX_BUFFER_SIZE - 1) {
 80005a4:	e010      	b.n	80005c8 <main+0x54>
		// Add byte to the buffer
		rx_buffer[rx_index] = rx_data;
 80005a6:	79f9      	ldrb	r1, [r7, #7]
 80005a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80005ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ae:	4413      	add	r3, r2
 80005b0:	460a      	mov	r2, r1
 80005b2:	701a      	strb	r2, [r3, #0]
		rx_index++;
 80005b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005b6:	3301      	adds	r3, #1
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		// Receive next byte
		HAL_UART_Receive(&huart4, &rx_data, 1, HAL_MAX_DELAY);
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c0:	2201      	movs	r2, #1
 80005c2:	4822      	ldr	r0, [pc, #136]	; (800064c <main+0xd8>)
 80005c4:	f001 f8a7 	bl	8001716 <HAL_UART_Receive>
	while(rx_data != '\n' && rx_index < RX_BUFFER_SIZE - 1) {
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b0a      	cmp	r3, #10
 80005cc:	d002      	beq.n	80005d4 <main+0x60>
 80005ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005d0:	2b1e      	cmp	r3, #30
 80005d2:	dde8      	ble.n	80005a6 <main+0x32>
	}
	rx_buffer[rx_index] = '\0';
 80005d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80005d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005da:	4413      	add	r3, r2
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
	printf ("Rx data: %u \n", rx_data);
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	4619      	mov	r1, r3
 80005e4:	481a      	ldr	r0, [pc, #104]	; (8000650 <main+0xdc>)
 80005e6:	f002 f89f 	bl	8002728 <iprintf>
	printf("Rx buffer: %s\n", rx_buffer);
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	4619      	mov	r1, r3
 80005f0:	4818      	ldr	r0, [pc, #96]	; (8000654 <main+0xe0>)
 80005f2:	f002 f899 	bl	8002728 <iprintf>
	sprintf(tx_buffer, "Echo from STM32: %s\n", rx_buffer);
 80005f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	4916      	ldr	r1, [pc, #88]	; (8000658 <main+0xe4>)
 8000600:	4618      	mov	r0, r3
 8000602:	f002 f91f 	bl	8002844 <siprintf>
	int length = strcspn(tx_buffer, "\n");
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	4914      	ldr	r1, [pc, #80]	; (800065c <main+0xe8>)
 800060c:	4618      	mov	r0, r3
 800060e:	f002 f939 	bl	8002884 <strcspn>
 8000612:	4603      	mov	r3, r0
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
	HAL_Delay(500);
 8000616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061a:	f000 fab7 	bl	8000b8c <HAL_Delay>
	HAL_UART_Transmit(&huart4, tx_buffer, length, HAL_MAX_DELAY);
 800061e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000620:	b29a      	uxth	r2, r3
 8000622:	f107 0108 	add.w	r1, r7, #8
 8000626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062a:	4808      	ldr	r0, [pc, #32]	; (800064c <main+0xd8>)
 800062c:	f000 ffe1 	bl	80015f2 <HAL_UART_Transmit>
	memset(rx_buffer, 0, sizeof(rx_buffer));
 8000630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000634:	2220      	movs	r2, #32
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 f86d 	bl	8002718 <memset>
	rx_index = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  {
 8000642:	e7a5      	b.n	8000590 <main+0x1c>
 8000644:	08003b24 	.word	0x08003b24
 8000648:	08003b44 	.word	0x08003b44
 800064c:	200000d4 	.word	0x200000d4
 8000650:	08003b5c 	.word	0x08003b5c
 8000654:	08003b6c 	.word	0x08003b6c
 8000658:	08003b7c 	.word	0x08003b7c
 800065c:	08003b94 	.word	0x08003b94

08000660 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_UART4_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_UART4_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_UART4_Init+0x4c>)
 800066c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000670:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_UART4_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_UART4_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_UART4_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_UART4_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_UART4_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_UART4_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_UART4_Init+0x4c>)
 8000698:	f000 ff5e 	bl	8001558 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 f83d 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000d4 	.word	0x200000d4
 80006b0:	40004c00 	.word	0x40004c00

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_GPIO_Init+0x68>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <MX_GPIO_Init+0x68>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_GPIO_Init+0x68>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_GPIO_Init+0x68>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <MX_GPIO_Init+0x68>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_GPIO_Init+0x68>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_GPIO_Init+0x68>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <MX_GPIO_Init+0x68>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_GPIO_Init+0x68>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <HAL_MspInit+0x4c>)
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6453      	str	r3, [r2, #68]	; 0x44
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_MspInit+0x4c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800076a:	2007      	movs	r0, #7
 800076c:	f000 fb02 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <HAL_UART_MspInit+0x94>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d133      	bne.n	8000806 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <HAL_UART_MspInit+0x98>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <HAL_UART_MspInit+0x98>)
 80007a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <HAL_UART_MspInit+0x98>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_UART_MspInit+0x98>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <HAL_UART_MspInit+0x98>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_UART_MspInit+0x98>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007d6:	2303      	movs	r3, #3
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80007e6:	2308      	movs	r3, #8
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_UART_MspInit+0x9c>)
 80007f2:	f000 fb93 	bl	8000f1c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2034      	movs	r0, #52	; 0x34
 80007fc:	f000 fac5 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000800:	2034      	movs	r0, #52	; 0x34
 8000802:	f000 fade 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40004c00 	.word	0x40004c00
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f970 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <TIM2_IRQHandler+0x10>)
 8000876:	f000 fd21 	bl	80012bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000008c 	.word	0x2000008c

08000884 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <UART4_IRQHandler+0x10>)
 800088a:	f000 ffe7 	bl	800185c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000d4 	.word	0x200000d4

08000898 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <ITM_SendChar+0x48>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <ITM_SendChar+0x48>)
 80008a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <ITM_SendChar+0x4c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <ITM_SendChar+0x4c>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008ba:	bf00      	nop
 80008bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f8      	beq.n	80008bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	6013      	str	r3, [r2, #0]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000edfc 	.word	0xe000edfc
 80008e4:	e0000e00 	.word	0xe0000e00

080008e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e00a      	b.n	8000910 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008fa:	f3af 8000 	nop.w
 80008fe:	4601      	mov	r1, r0
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	60ba      	str	r2, [r7, #8]
 8000906:	b2ca      	uxtb	r2, r1
 8000908:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf0      	blt.n	80008fa <_read+0x12>
  }

  return len;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e009      	b.n	8000948 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ffab 	bl	8000898 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf1      	blt.n	8000934 <_write+0x12>
  }
  return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <_close>:

int _close(int file)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000982:	605a      	str	r2, [r3, #4]
  return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <_isatty>:

int _isatty(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <_sbrk+0x5c>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <_sbrk+0x60>)
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_sbrk+0x64>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <_sbrk+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d207      	bcs.n	8000a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f4:	f001 fe66 	bl	80026c4 <__errno>
 80009f8:	4603      	mov	r3, r0
 80009fa:	220c      	movs	r2, #12
 80009fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a02:	e009      	b.n	8000a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <_sbrk+0x64>)
 8000a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20020000 	.word	0x20020000
 8000a24:	00000400 	.word	0x00000400
 8000a28:	20000118 	.word	0x20000118
 8000a2c:	20000130 	.word	0x20000130

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a7e:	f7ff ffd7 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f001 fe25 	bl	80026d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fd75 	bl	8000574 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a98:	08003c48 	.word	0x08003c48
  ldr r2, =_sbss
 8000a9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa0:	20000130 	.word	0x20000130

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f94f 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fe26 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f967 	bl	8000dde <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 f92f 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	2000011c 	.word	0x2000011c

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000011c 	.word	0x2000011c

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff feb6 	bl	8000b74 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d008      	beq.n	8000e28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e052      	b.n	8000ece <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0216 	bic.w	r2, r2, #22
 8000e36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d103      	bne.n	8000e58 <HAL_DMA_Abort+0x62>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d007      	beq.n	8000e68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0208 	bic.w	r2, r2, #8
 8000e66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0201 	bic.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e78:	e013      	b.n	8000ea2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e7a:	f7ff fe7b 	bl	8000b74 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	d90c      	bls.n	8000ea2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2203      	movs	r2, #3
 8000e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e015      	b.n	8000ece <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e4      	bne.n	8000e7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb4:	223f      	movs	r2, #63	; 0x3f
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d004      	beq.n	8000ef4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e00c      	b.n	8000f0e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2205      	movs	r2, #5
 8000ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e16b      	b.n	8001210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 815a 	bne.w	800120a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80b4 	beq.w	800120a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a5f      	ldr	r2, [pc, #380]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <HAL_GPIO_Init+0x30c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a5b      	ldr	r2, [pc, #364]	; (800122c <HAL_GPIO_Init+0x310>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	; (8001230 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	; (8001234 <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	; (8001238 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	; (8001240 <HAL_GPIO_Init+0x324>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	; (8001244 <HAL_GPIO_Init+0x328>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	; (8001248 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <HAL_GPIO_Init+0x330>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x20a>
 8001122:	2307      	movs	r3, #7
 8001124:	e00e      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001126:	2308      	movs	r3, #8
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112a:	2306      	movs	r3, #6
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001142:	2300      	movs	r3, #0
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	4935      	ldr	r1, [pc, #212]	; (800122c <HAL_GPIO_Init+0x310>)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001186:	4a32      	ldr	r2, [pc, #200]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_GPIO_Init+0x334>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_GPIO_Init+0x334>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f67f ae90 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40021400 	.word	0x40021400
 8001248:	40021800 	.word	0x40021800
 800124c:	40021c00 	.word	0x40021c00
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_RCC_GetHCLKFreq+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000000 	.word	0x20000000

0800126c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001270:	f7ff fff0 	bl	8001254 <HAL_RCC_GetHCLKFreq>
 8001274:	4602      	mov	r2, r0
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	0a9b      	lsrs	r3, r3, #10
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	4903      	ldr	r1, [pc, #12]	; (8001290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001282:	5ccb      	ldrb	r3, [r1, r3]
 8001284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	08003b98 	.word	0x08003b98

08001294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001298:	f7ff ffdc 	bl	8001254 <HAL_RCC_GetHCLKFreq>
 800129c:	4602      	mov	r2, r0
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	0b5b      	lsrs	r3, r3, #13
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	4903      	ldr	r1, [pc, #12]	; (80012b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012aa:	5ccb      	ldrb	r3, [r1, r3]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	08003b98 	.word	0x08003b98

080012bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d122      	bne.n	8001318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d11b      	bne.n	8001318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f06f 0202 	mvn.w	r2, #2
 80012e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f8f8 	bl	80014f4 <HAL_TIM_IC_CaptureCallback>
 8001304:	e005      	b.n	8001312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f8ea 	bl	80014e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f8fb 	bl	8001508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	2b04      	cmp	r3, #4
 8001324:	d122      	bne.n	800136c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b04      	cmp	r3, #4
 8001332:	d11b      	bne.n	800136c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f06f 0204 	mvn.w	r2, #4
 800133c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2202      	movs	r2, #2
 8001342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f8ce 	bl	80014f4 <HAL_TIM_IC_CaptureCallback>
 8001358:	e005      	b.n	8001366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f8c0 	bl	80014e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f8d1 	bl	8001508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b08      	cmp	r3, #8
 8001378:	d122      	bne.n	80013c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b08      	cmp	r3, #8
 8001386:	d11b      	bne.n	80013c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0208 	mvn.w	r2, #8
 8001390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2204      	movs	r2, #4
 8001396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f8a4 	bl	80014f4 <HAL_TIM_IC_CaptureCallback>
 80013ac:	e005      	b.n	80013ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f896 	bl	80014e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f8a7 	bl	8001508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d122      	bne.n	8001414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d11b      	bne.n	8001414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f06f 0210 	mvn.w	r2, #16
 80013e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2208      	movs	r2, #8
 80013ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f87a 	bl	80014f4 <HAL_TIM_IC_CaptureCallback>
 8001400:	e005      	b.n	800140e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f86c 	bl	80014e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f87d 	bl	8001508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10e      	bne.n	8001440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f06f 0201 	mvn.w	r2, #1
 8001438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f846 	bl	80014cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	2b80      	cmp	r3, #128	; 0x80
 800144c:	d10e      	bne.n	800146c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001458:	2b80      	cmp	r3, #128	; 0x80
 800145a:	d107      	bne.n	800146c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f86c 	bl	8001544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001476:	2b40      	cmp	r3, #64	; 0x40
 8001478:	d10e      	bne.n	8001498 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001484:	2b40      	cmp	r3, #64	; 0x40
 8001486:	d107      	bne.n	8001498 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f842 	bl	800151c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	d10e      	bne.n	80014c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f003 0320 	and.w	r3, r3, #32
 80014b0:	2b20      	cmp	r3, #32
 80014b2:	d107      	bne.n	80014c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f06f 0220 	mvn.w	r2, #32
 80014bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f836 	bl	8001530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e03f      	b.n	80015ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff f8fc 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2224      	movs	r2, #36	; 0x24
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800159a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fe1d 	bl	80021dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2220      	movs	r2, #32
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2220      	movs	r2, #32
 80015e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b08a      	sub	sp, #40	; 0x28
 80015f6:	af02      	add	r7, sp, #8
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4613      	mov	r3, r2
 8001600:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b20      	cmp	r3, #32
 8001610:	d17c      	bne.n	800170c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_UART_Transmit+0x2c>
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e075      	b.n	800170e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_UART_Transmit+0x3e>
 800162c:	2302      	movs	r3, #2
 800162e:	e06e      	b.n	800170e <HAL_UART_Transmit+0x11c>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2221      	movs	r2, #33	; 0x21
 8001642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001646:	f7ff fa95 	bl	8000b74 <HAL_GetTick>
 800164a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	88fa      	ldrh	r2, [r7, #6]
 8001656:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001660:	d108      	bne.n	8001674 <HAL_UART_Transmit+0x82>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d104      	bne.n	8001674 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	e003      	b.n	800167c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001684:	e02a      	b.n	80016dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2200      	movs	r2, #0
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 fb9b 	bl	8001dcc <UART_WaitOnFlagUntilTimeout>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e036      	b.n	800170e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10b      	bne.n	80016be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	3302      	adds	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	e007      	b.n	80016ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	3301      	adds	r3, #1
 80016cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1cf      	bne.n	8001686 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2200      	movs	r2, #0
 80016ee:	2140      	movs	r1, #64	; 0x40
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 fb6b 	bl	8001dcc <UART_WaitOnFlagUntilTimeout>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e006      	b.n	800170e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2220      	movs	r2, #32
 8001704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	e000      	b.n	800170e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800170c:	2302      	movs	r3, #2
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b08a      	sub	sp, #40	; 0x28
 800171a:	af02      	add	r7, sp, #8
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4613      	mov	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b20      	cmp	r3, #32
 8001734:	f040 808c 	bne.w	8001850 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_UART_Receive+0x2e>
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e084      	b.n	8001852 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_UART_Receive+0x40>
 8001752:	2302      	movs	r3, #2
 8001754:	e07d      	b.n	8001852 <HAL_UART_Receive+0x13c>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2222      	movs	r2, #34	; 0x22
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001772:	f7ff f9ff 	bl	8000b74 <HAL_GetTick>
 8001776:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	88fa      	ldrh	r2, [r7, #6]
 8001782:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800178c:	d108      	bne.n	80017a0 <HAL_UART_Receive+0x8a>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d104      	bne.n	80017a0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	e003      	b.n	80017a8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80017b0:	e043      	b.n	800183a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2200      	movs	r2, #0
 80017ba:	2120      	movs	r1, #32
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fb05 	bl	8001dcc <UART_WaitOnFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e042      	b.n	8001852 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10c      	bne.n	80017ec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017de:	b29a      	uxth	r2, r3
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	3302      	adds	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
 80017ea:	e01f      	b.n	800182c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017f4:	d007      	beq.n	8001806 <HAL_UART_Receive+0xf0>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10a      	bne.n	8001814 <HAL_UART_Receive+0xfe>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e008      	b.n	8001826 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001820:	b2da      	uxtb	r2, r3
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001830:	b29b      	uxth	r3, r3
 8001832:	3b01      	subs	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800183e:	b29b      	uxth	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1b6      	bne.n	80017b2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2220      	movs	r2, #32
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	e000      	b.n	8001852 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001850:	2302      	movs	r3, #2
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0ba      	sub	sp, #232	; 0xe8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800188e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800189a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_UART_IRQHandler+0x66>
 80018ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fbd3 	bl	8002066 <UART_Receive_IT>
      return;
 80018c0:	e256      	b.n	8001d70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80018c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80de 	beq.w	8001a88 <HAL_UART_IRQHandler+0x22c>
 80018cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d106      	bne.n	80018e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80018d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80d1 	beq.w	8001a88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00b      	beq.n	800190a <HAL_UART_IRQHandler+0xae>
 80018f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f043 0201 	orr.w	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800190a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <HAL_UART_IRQHandler+0xd2>
 8001916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800192e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_UART_IRQHandler+0xf6>
 800193a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f043 0204 	orr.w	r2, r3, #4
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d011      	beq.n	8001982 <HAL_UART_IRQHandler+0x126>
 800195e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	2b00      	cmp	r3, #0
 8001968:	d105      	bne.n	8001976 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800196a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f043 0208 	orr.w	r2, r3, #8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 81ed 	beq.w	8001d66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800198c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_UART_IRQHandler+0x14e>
 8001998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fb5e 	bl	8002066 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d103      	bne.n	80019d6 <HAL_UART_IRQHandler+0x17a>
 80019ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04f      	beq.n	8001a76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fa66 	bl	8001ea8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	2b40      	cmp	r3, #64	; 0x40
 80019e8:	d141      	bne.n	8001a6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3314      	adds	r3, #20
 80019f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f8:	e853 3f00 	ldrex	r3, [r3]
 80019fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3314      	adds	r3, #20
 8001a12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001a16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001a22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001a26:	e841 2300 	strex	r3, r2, [r1]
 8001a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1d9      	bne.n	80019ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d013      	beq.n	8001a66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a42:	4a7d      	ldr	r2, [pc, #500]	; (8001c38 <HAL_UART_IRQHandler+0x3dc>)
 8001a44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fa43 	bl	8000ed6 <HAL_DMA_Abort_IT>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a60:	4610      	mov	r0, r2
 8001a62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a64:	e00e      	b.n	8001a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f99a 	bl	8001da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a6c:	e00a      	b.n	8001a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f996 	bl	8001da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a74:	e006      	b.n	8001a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f992 	bl	8001da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001a82:	e170      	b.n	8001d66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a84:	bf00      	nop
    return;
 8001a86:	e16e      	b.n	8001d66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	f040 814a 	bne.w	8001d26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8143 	beq.w	8001d26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 813c 	beq.w	8001d26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ace:	2b40      	cmp	r3, #64	; 0x40
 8001ad0:	f040 80b4 	bne.w	8001c3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001ae0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8140 	beq.w	8001d6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001af2:	429a      	cmp	r2, r3
 8001af4:	f080 8139 	bcs.w	8001d6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001afe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b0a:	f000 8088 	beq.w	8001c1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	330c      	adds	r3, #12
 8001b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b1c:	e853 3f00 	ldrex	r3, [r3]
 8001b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	330c      	adds	r3, #12
 8001b36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001b3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001b46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b4a:	e841 2300 	strex	r3, r2, [r1]
 8001b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1d9      	bne.n	8001b0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3314      	adds	r3, #20
 8001b60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b64:	e853 3f00 	ldrex	r3, [r3]
 8001b68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3314      	adds	r3, #20
 8001b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001b82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001b86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001b8a:	e841 2300 	strex	r3, r2, [r1]
 8001b8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1e1      	bne.n	8001b5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3314      	adds	r3, #20
 8001b9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ba0:	e853 3f00 	ldrex	r3, [r3]
 8001ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3314      	adds	r3, #20
 8001bb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001bba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001bc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001bc2:	e841 2300 	strex	r3, r2, [r1]
 8001bc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1e3      	bne.n	8001b96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	330c      	adds	r3, #12
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be6:	e853 3f00 	ldrex	r3, [r3]
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bee:	f023 0310 	bic.w	r3, r3, #16
 8001bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	330c      	adds	r3, #12
 8001bfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001c00:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c08:	e841 2300 	strex	r3, r2, [r1]
 8001c0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e3      	bne.n	8001bdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f8ec 	bl	8000df6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8c0 	bl	8001db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c34:	e099      	b.n	8001d6a <HAL_UART_IRQHandler+0x50e>
 8001c36:	bf00      	nop
 8001c38:	08001f6f 	.word	0x08001f6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 808b 	beq.w	8001d6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8086 	beq.w	8001d6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	330c      	adds	r3, #12
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6c:	e853 3f00 	ldrex	r3, [r3]
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	330c      	adds	r3, #12
 8001c82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001c86:	647a      	str	r2, [r7, #68]	; 0x44
 8001c88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c8e:	e841 2300 	strex	r3, r2, [r1]
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1e3      	bne.n	8001c62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3314      	adds	r3, #20
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	e853 3f00 	ldrex	r3, [r3]
 8001ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3314      	adds	r3, #20
 8001cba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001cbe:	633a      	str	r2, [r7, #48]	; 0x30
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc6:	e841 2300 	strex	r3, r2, [r1]
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1e3      	bne.n	8001c9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	e853 3f00 	ldrex	r3, [r3]
 8001cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 0310 	bic.w	r3, r3, #16
 8001cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	330c      	adds	r3, #12
 8001d00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001d04:	61fa      	str	r2, [r7, #28]
 8001d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d08:	69b9      	ldr	r1, [r7, #24]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	e841 2300 	strex	r3, r2, [r1]
 8001d10:	617b      	str	r3, [r7, #20]
   return(result);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e3      	bne.n	8001ce0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f848 	bl	8001db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d24:	e023      	b.n	8001d6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_UART_IRQHandler+0x4ea>
 8001d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f929 	bl	8001f96 <UART_Transmit_IT>
    return;
 8001d44:	e014      	b.n	8001d70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00e      	beq.n	8001d70 <HAL_UART_IRQHandler+0x514>
 8001d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f969 	bl	8002036 <UART_EndTransmit_IT>
    return;
 8001d64:	e004      	b.n	8001d70 <HAL_UART_IRQHandler+0x514>
    return;
 8001d66:	bf00      	nop
 8001d68:	e002      	b.n	8001d70 <HAL_UART_IRQHandler+0x514>
      return;
 8001d6a:	bf00      	nop
 8001d6c:	e000      	b.n	8001d70 <HAL_UART_IRQHandler+0x514>
      return;
 8001d6e:	bf00      	nop
  }
}
 8001d70:	37e8      	adds	r7, #232	; 0xe8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop

08001d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b090      	sub	sp, #64	; 0x40
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ddc:	e050      	b.n	8001e80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de4:	d04c      	beq.n	8001e80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8001dec:	f7fe fec2 	bl	8000b74 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d241      	bcs.n	8001e80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	330c      	adds	r3, #12
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e06:	e853 3f00 	ldrex	r3, [r3]
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e1c:	637a      	str	r2, [r7, #52]	; 0x34
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e24:	e841 2300 	strex	r3, r2, [r1]
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e5      	bne.n	8001dfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3314      	adds	r3, #20
 8001e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	e853 3f00 	ldrex	r3, [r3]
 8001e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3314      	adds	r3, #20
 8001e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e50:	623a      	str	r2, [r7, #32]
 8001e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e54:	69f9      	ldr	r1, [r7, #28]
 8001e56:	6a3a      	ldr	r2, [r7, #32]
 8001e58:	e841 2300 	strex	r3, r2, [r1]
 8001e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e5      	bne.n	8001e30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e00f      	b.n	8001ea0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d09f      	beq.n	8001dde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3740      	adds	r7, #64	; 0x40
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b095      	sub	sp, #84	; 0x54
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	330c      	adds	r3, #12
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eba:	e853 3f00 	ldrex	r3, [r3]
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	330c      	adds	r3, #12
 8001ece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ed0:	643a      	str	r2, [r7, #64]	; 0x40
 8001ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ed8:	e841 2300 	strex	r3, r2, [r1]
 8001edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1e5      	bne.n	8001eb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3314      	adds	r3, #20
 8001eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	e853 3f00 	ldrex	r3, [r3]
 8001ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3314      	adds	r3, #20
 8001f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f0c:	e841 2300 	strex	r3, r2, [r1]
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e5      	bne.n	8001ee4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d119      	bne.n	8001f54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	330c      	adds	r3, #12
 8001f26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	e853 3f00 	ldrex	r3, [r3]
 8001f2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f023 0310 	bic.w	r3, r3, #16
 8001f36:	647b      	str	r3, [r7, #68]	; 0x44
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	330c      	adds	r3, #12
 8001f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f40:	61ba      	str	r2, [r7, #24]
 8001f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f44:	6979      	ldr	r1, [r7, #20]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	e841 2300 	strex	r3, r2, [r1]
 8001f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e5      	bne.n	8001f20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f62:	bf00      	nop
 8001f64:	3754      	adds	r7, #84	; 0x54
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f7ff ff09 	bl	8001da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b21      	cmp	r3, #33	; 0x21
 8001fa8:	d13e      	bne.n	8002028 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb2:	d114      	bne.n	8001fde <UART_Transmit_IT+0x48>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d110      	bne.n	8001fde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	1c9a      	adds	r2, r3, #2
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	621a      	str	r2, [r3, #32]
 8001fdc:	e008      	b.n	8001ff0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	1c59      	adds	r1, r3, #1
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6211      	str	r1, [r2, #32]
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10f      	bne.n	8002024 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002012:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002022:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800204c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fe8e 	bl	8001d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b08c      	sub	sp, #48	; 0x30
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b22      	cmp	r3, #34	; 0x22
 8002078:	f040 80ab 	bne.w	80021d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002084:	d117      	bne.n	80020b6 <UART_Receive_IT+0x50>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d113      	bne.n	80020b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	1c9a      	adds	r2, r3, #2
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
 80020b4:	e026      	b.n	8002104 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c8:	d007      	beq.n	80020da <UART_Receive_IT+0x74>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10a      	bne.n	80020e8 <UART_Receive_IT+0x82>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e008      	b.n	80020fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29b      	uxth	r3, r3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4619      	mov	r1, r3
 8002112:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002114:	2b00      	cmp	r3, #0
 8002116:	d15a      	bne.n	80021ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0220 	bic.w	r2, r2, #32
 8002126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	2b01      	cmp	r3, #1
 8002156:	d135      	bne.n	80021c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	330c      	adds	r3, #12
 8002164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	e853 3f00 	ldrex	r3, [r3]
 800216c:	613b      	str	r3, [r7, #16]
   return(result);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f023 0310 	bic.w	r3, r3, #16
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	330c      	adds	r3, #12
 800217c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217e:	623a      	str	r2, [r7, #32]
 8002180:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	69f9      	ldr	r1, [r7, #28]
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	e841 2300 	strex	r3, r2, [r1]
 800218a:	61bb      	str	r3, [r7, #24]
   return(result);
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e5      	bne.n	800215e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b10      	cmp	r3, #16
 800219e:	d10a      	bne.n	80021b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021ba:	4619      	mov	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fdf9 	bl	8001db4 <HAL_UARTEx_RxEventCallback>
 80021c2:	e002      	b.n	80021ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fde1 	bl	8001d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e002      	b.n	80021d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
  }
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3730      	adds	r7, #48	; 0x30
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e0:	b0c0      	sub	sp, #256	; 0x100
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f8:	68d9      	ldr	r1, [r3, #12]
 80021fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	ea40 0301 	orr.w	r3, r0, r1
 8002204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	431a      	orrs	r2, r3
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	431a      	orrs	r2, r3
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002234:	f021 010c 	bic.w	r1, r1, #12
 8002238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002242:	430b      	orrs	r3, r1
 8002244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002256:	6999      	ldr	r1, [r3, #24]
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	ea40 0301 	orr.w	r3, r0, r1
 8002262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b8f      	ldr	r3, [pc, #572]	; (80024a8 <UART_SetConfig+0x2cc>)
 800226c:	429a      	cmp	r2, r3
 800226e:	d005      	beq.n	800227c <UART_SetConfig+0xa0>
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <UART_SetConfig+0x2d0>)
 8002278:	429a      	cmp	r2, r3
 800227a:	d104      	bne.n	8002286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800227c:	f7ff f80a 	bl	8001294 <HAL_RCC_GetPCLK2Freq>
 8002280:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002284:	e003      	b.n	800228e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002286:	f7fe fff1 	bl	800126c <HAL_RCC_GetPCLK1Freq>
 800228a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800228e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002298:	f040 810c 	bne.w	80024b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800229c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a0:	2200      	movs	r2, #0
 80022a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022ae:	4622      	mov	r2, r4
 80022b0:	462b      	mov	r3, r5
 80022b2:	1891      	adds	r1, r2, r2
 80022b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80022b6:	415b      	adcs	r3, r3
 80022b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022be:	4621      	mov	r1, r4
 80022c0:	eb12 0801 	adds.w	r8, r2, r1
 80022c4:	4629      	mov	r1, r5
 80022c6:	eb43 0901 	adc.w	r9, r3, r1
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022de:	4690      	mov	r8, r2
 80022e0:	4699      	mov	r9, r3
 80022e2:	4623      	mov	r3, r4
 80022e4:	eb18 0303 	adds.w	r3, r8, r3
 80022e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022ec:	462b      	mov	r3, r5
 80022ee:	eb49 0303 	adc.w	r3, r9, r3
 80022f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002302:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800230a:	460b      	mov	r3, r1
 800230c:	18db      	adds	r3, r3, r3
 800230e:	653b      	str	r3, [r7, #80]	; 0x50
 8002310:	4613      	mov	r3, r2
 8002312:	eb42 0303 	adc.w	r3, r2, r3
 8002316:	657b      	str	r3, [r7, #84]	; 0x54
 8002318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800231c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002320:	f7fd ffa6 	bl	8000270 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <UART_SetConfig+0x2d4>)
 800232a:	fba3 2302 	umull	r2, r3, r3, r2
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	011c      	lsls	r4, r3, #4
 8002332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002336:	2200      	movs	r2, #0
 8002338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800233c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002344:	4642      	mov	r2, r8
 8002346:	464b      	mov	r3, r9
 8002348:	1891      	adds	r1, r2, r2
 800234a:	64b9      	str	r1, [r7, #72]	; 0x48
 800234c:	415b      	adcs	r3, r3
 800234e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002354:	4641      	mov	r1, r8
 8002356:	eb12 0a01 	adds.w	sl, r2, r1
 800235a:	4649      	mov	r1, r9
 800235c:	eb43 0b01 	adc.w	fp, r3, r1
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800236c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002374:	4692      	mov	sl, r2
 8002376:	469b      	mov	fp, r3
 8002378:	4643      	mov	r3, r8
 800237a:	eb1a 0303 	adds.w	r3, sl, r3
 800237e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002382:	464b      	mov	r3, r9
 8002384:	eb4b 0303 	adc.w	r3, fp, r3
 8002388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002398:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800239c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023a0:	460b      	mov	r3, r1
 80023a2:	18db      	adds	r3, r3, r3
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
 80023a6:	4613      	mov	r3, r2
 80023a8:	eb42 0303 	adc.w	r3, r2, r3
 80023ac:	647b      	str	r3, [r7, #68]	; 0x44
 80023ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023b6:	f7fd ff5b 	bl	8000270 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <UART_SetConfig+0x2d4>)
 80023c2:	fba3 2301 	umull	r2, r3, r3, r1
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2264      	movs	r2, #100	; 0x64
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	1acb      	subs	r3, r1, r3
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <UART_SetConfig+0x2d4>)
 80023d8:	fba3 2302 	umull	r2, r3, r3, r2
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023e4:	441c      	add	r4, r3
 80023e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80023f8:	4642      	mov	r2, r8
 80023fa:	464b      	mov	r3, r9
 80023fc:	1891      	adds	r1, r2, r2
 80023fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002400:	415b      	adcs	r3, r3
 8002402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002408:	4641      	mov	r1, r8
 800240a:	1851      	adds	r1, r2, r1
 800240c:	6339      	str	r1, [r7, #48]	; 0x30
 800240e:	4649      	mov	r1, r9
 8002410:	414b      	adcs	r3, r1
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002420:	4659      	mov	r1, fp
 8002422:	00cb      	lsls	r3, r1, #3
 8002424:	4651      	mov	r1, sl
 8002426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800242a:	4651      	mov	r1, sl
 800242c:	00ca      	lsls	r2, r1, #3
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	4603      	mov	r3, r0
 8002434:	4642      	mov	r2, r8
 8002436:	189b      	adds	r3, r3, r2
 8002438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800243c:	464b      	mov	r3, r9
 800243e:	460a      	mov	r2, r1
 8002440:	eb42 0303 	adc.w	r3, r2, r3
 8002444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002454:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800245c:	460b      	mov	r3, r1
 800245e:	18db      	adds	r3, r3, r3
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
 8002462:	4613      	mov	r3, r2
 8002464:	eb42 0303 	adc.w	r3, r2, r3
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800246a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800246e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002472:	f7fd fefd 	bl	8000270 <__aeabi_uldivmod>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <UART_SetConfig+0x2d4>)
 800247c:	fba3 1302 	umull	r1, r3, r3, r2
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	3332      	adds	r3, #50	; 0x32
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <UART_SetConfig+0x2d4>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	f003 0207 	and.w	r2, r3, #7
 800249a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4422      	add	r2, r4
 80024a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024a4:	e105      	b.n	80026b2 <UART_SetConfig+0x4d6>
 80024a6:	bf00      	nop
 80024a8:	40011000 	.word	0x40011000
 80024ac:	40011400 	.word	0x40011400
 80024b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b8:	2200      	movs	r2, #0
 80024ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024c6:	4642      	mov	r2, r8
 80024c8:	464b      	mov	r3, r9
 80024ca:	1891      	adds	r1, r2, r2
 80024cc:	6239      	str	r1, [r7, #32]
 80024ce:	415b      	adcs	r3, r3
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024d6:	4641      	mov	r1, r8
 80024d8:	1854      	adds	r4, r2, r1
 80024da:	4649      	mov	r1, r9
 80024dc:	eb43 0501 	adc.w	r5, r3, r1
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	00eb      	lsls	r3, r5, #3
 80024ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ee:	00e2      	lsls	r2, r4, #3
 80024f0:	4614      	mov	r4, r2
 80024f2:	461d      	mov	r5, r3
 80024f4:	4643      	mov	r3, r8
 80024f6:	18e3      	adds	r3, r4, r3
 80024f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024fc:	464b      	mov	r3, r9
 80024fe:	eb45 0303 	adc.w	r3, r5, r3
 8002502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002522:	4629      	mov	r1, r5
 8002524:	008b      	lsls	r3, r1, #2
 8002526:	4621      	mov	r1, r4
 8002528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800252c:	4621      	mov	r1, r4
 800252e:	008a      	lsls	r2, r1, #2
 8002530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002534:	f7fd fe9c 	bl	8000270 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4b60      	ldr	r3, [pc, #384]	; (80026c0 <UART_SetConfig+0x4e4>)
 800253e:	fba3 2302 	umull	r2, r3, r3, r2
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	011c      	lsls	r4, r3, #4
 8002546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254a:	2200      	movs	r2, #0
 800254c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002550:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002558:	4642      	mov	r2, r8
 800255a:	464b      	mov	r3, r9
 800255c:	1891      	adds	r1, r2, r2
 800255e:	61b9      	str	r1, [r7, #24]
 8002560:	415b      	adcs	r3, r3
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002568:	4641      	mov	r1, r8
 800256a:	1851      	adds	r1, r2, r1
 800256c:	6139      	str	r1, [r7, #16]
 800256e:	4649      	mov	r1, r9
 8002570:	414b      	adcs	r3, r1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002580:	4659      	mov	r1, fp
 8002582:	00cb      	lsls	r3, r1, #3
 8002584:	4651      	mov	r1, sl
 8002586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800258a:	4651      	mov	r1, sl
 800258c:	00ca      	lsls	r2, r1, #3
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	4603      	mov	r3, r0
 8002594:	4642      	mov	r2, r8
 8002596:	189b      	adds	r3, r3, r2
 8002598:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800259c:	464b      	mov	r3, r9
 800259e:	460a      	mov	r2, r1
 80025a0:	eb42 0303 	adc.w	r3, r2, r3
 80025a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80025b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025c0:	4649      	mov	r1, r9
 80025c2:	008b      	lsls	r3, r1, #2
 80025c4:	4641      	mov	r1, r8
 80025c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025ca:	4641      	mov	r1, r8
 80025cc:	008a      	lsls	r2, r1, #2
 80025ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80025d2:	f7fd fe4d 	bl	8000270 <__aeabi_uldivmod>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <UART_SetConfig+0x4e4>)
 80025dc:	fba3 1302 	umull	r1, r3, r3, r2
 80025e0:	095b      	lsrs	r3, r3, #5
 80025e2:	2164      	movs	r1, #100	; 0x64
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	3332      	adds	r3, #50	; 0x32
 80025ee:	4a34      	ldr	r2, [pc, #208]	; (80026c0 <UART_SetConfig+0x4e4>)
 80025f0:	fba2 2303 	umull	r2, r3, r2, r3
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025fa:	441c      	add	r4, r3
 80025fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002600:	2200      	movs	r2, #0
 8002602:	673b      	str	r3, [r7, #112]	; 0x70
 8002604:	677a      	str	r2, [r7, #116]	; 0x74
 8002606:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800260a:	4642      	mov	r2, r8
 800260c:	464b      	mov	r3, r9
 800260e:	1891      	adds	r1, r2, r2
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	415b      	adcs	r3, r3
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800261a:	4641      	mov	r1, r8
 800261c:	1851      	adds	r1, r2, r1
 800261e:	6039      	str	r1, [r7, #0]
 8002620:	4649      	mov	r1, r9
 8002622:	414b      	adcs	r3, r1
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002632:	4659      	mov	r1, fp
 8002634:	00cb      	lsls	r3, r1, #3
 8002636:	4651      	mov	r1, sl
 8002638:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800263c:	4651      	mov	r1, sl
 800263e:	00ca      	lsls	r2, r1, #3
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	4603      	mov	r3, r0
 8002646:	4642      	mov	r2, r8
 8002648:	189b      	adds	r3, r3, r2
 800264a:	66bb      	str	r3, [r7, #104]	; 0x68
 800264c:	464b      	mov	r3, r9
 800264e:	460a      	mov	r2, r1
 8002650:	eb42 0303 	adc.w	r3, r2, r3
 8002654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	663b      	str	r3, [r7, #96]	; 0x60
 8002660:	667a      	str	r2, [r7, #100]	; 0x64
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800266e:	4649      	mov	r1, r9
 8002670:	008b      	lsls	r3, r1, #2
 8002672:	4641      	mov	r1, r8
 8002674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002678:	4641      	mov	r1, r8
 800267a:	008a      	lsls	r2, r1, #2
 800267c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002680:	f7fd fdf6 	bl	8000270 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <UART_SetConfig+0x4e4>)
 800268a:	fba3 1302 	umull	r1, r3, r3, r2
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2164      	movs	r1, #100	; 0x64
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	3332      	adds	r3, #50	; 0x32
 800269c:	4a08      	ldr	r2, [pc, #32]	; (80026c0 <UART_SetConfig+0x4e4>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	f003 020f 	and.w	r2, r3, #15
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4422      	add	r2, r4
 80026b0:	609a      	str	r2, [r3, #8]
}
 80026b2:	bf00      	nop
 80026b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026be:	bf00      	nop
 80026c0:	51eb851f 	.word	0x51eb851f

080026c4 <__errno>:
 80026c4:	4b01      	ldr	r3, [pc, #4]	; (80026cc <__errno+0x8>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <__libc_init_array>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	4d0d      	ldr	r5, [pc, #52]	; (8002708 <__libc_init_array+0x38>)
 80026d4:	4c0d      	ldr	r4, [pc, #52]	; (800270c <__libc_init_array+0x3c>)
 80026d6:	1b64      	subs	r4, r4, r5
 80026d8:	10a4      	asrs	r4, r4, #2
 80026da:	2600      	movs	r6, #0
 80026dc:	42a6      	cmp	r6, r4
 80026de:	d109      	bne.n	80026f4 <__libc_init_array+0x24>
 80026e0:	4d0b      	ldr	r5, [pc, #44]	; (8002710 <__libc_init_array+0x40>)
 80026e2:	4c0c      	ldr	r4, [pc, #48]	; (8002714 <__libc_init_array+0x44>)
 80026e4:	f001 fa12 	bl	8003b0c <_init>
 80026e8:	1b64      	subs	r4, r4, r5
 80026ea:	10a4      	asrs	r4, r4, #2
 80026ec:	2600      	movs	r6, #0
 80026ee:	42a6      	cmp	r6, r4
 80026f0:	d105      	bne.n	80026fe <__libc_init_array+0x2e>
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
 80026f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f8:	4798      	blx	r3
 80026fa:	3601      	adds	r6, #1
 80026fc:	e7ee      	b.n	80026dc <__libc_init_array+0xc>
 80026fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002702:	4798      	blx	r3
 8002704:	3601      	adds	r6, #1
 8002706:	e7f2      	b.n	80026ee <__libc_init_array+0x1e>
 8002708:	08003c40 	.word	0x08003c40
 800270c:	08003c40 	.word	0x08003c40
 8002710:	08003c40 	.word	0x08003c40
 8002714:	08003c44 	.word	0x08003c44

08002718 <memset>:
 8002718:	4402      	add	r2, r0
 800271a:	4603      	mov	r3, r0
 800271c:	4293      	cmp	r3, r2
 800271e:	d100      	bne.n	8002722 <memset+0xa>
 8002720:	4770      	bx	lr
 8002722:	f803 1b01 	strb.w	r1, [r3], #1
 8002726:	e7f9      	b.n	800271c <memset+0x4>

08002728 <iprintf>:
 8002728:	b40f      	push	{r0, r1, r2, r3}
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <iprintf+0x2c>)
 800272c:	b513      	push	{r0, r1, r4, lr}
 800272e:	681c      	ldr	r4, [r3, #0]
 8002730:	b124      	cbz	r4, 800273c <iprintf+0x14>
 8002732:	69a3      	ldr	r3, [r4, #24]
 8002734:	b913      	cbnz	r3, 800273c <iprintf+0x14>
 8002736:	4620      	mov	r0, r4
 8002738:	f000 fa90 	bl	8002c5c <__sinit>
 800273c:	ab05      	add	r3, sp, #20
 800273e:	9a04      	ldr	r2, [sp, #16]
 8002740:	68a1      	ldr	r1, [r4, #8]
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	4620      	mov	r0, r4
 8002746:	f000 fdf5 	bl	8003334 <_vfiprintf_r>
 800274a:	b002      	add	sp, #8
 800274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002750:	b004      	add	sp, #16
 8002752:	4770      	bx	lr
 8002754:	2000000c 	.word	0x2000000c

08002758 <_puts_r>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	460e      	mov	r6, r1
 800275c:	4605      	mov	r5, r0
 800275e:	b118      	cbz	r0, 8002768 <_puts_r+0x10>
 8002760:	6983      	ldr	r3, [r0, #24]
 8002762:	b90b      	cbnz	r3, 8002768 <_puts_r+0x10>
 8002764:	f000 fa7a 	bl	8002c5c <__sinit>
 8002768:	69ab      	ldr	r3, [r5, #24]
 800276a:	68ac      	ldr	r4, [r5, #8]
 800276c:	b913      	cbnz	r3, 8002774 <_puts_r+0x1c>
 800276e:	4628      	mov	r0, r5
 8002770:	f000 fa74 	bl	8002c5c <__sinit>
 8002774:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <_puts_r+0xd0>)
 8002776:	429c      	cmp	r4, r3
 8002778:	d120      	bne.n	80027bc <_puts_r+0x64>
 800277a:	686c      	ldr	r4, [r5, #4]
 800277c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800277e:	07db      	lsls	r3, r3, #31
 8002780:	d405      	bmi.n	800278e <_puts_r+0x36>
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	0598      	lsls	r0, r3, #22
 8002786:	d402      	bmi.n	800278e <_puts_r+0x36>
 8002788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800278a:	f000 fb05 	bl	8002d98 <__retarget_lock_acquire_recursive>
 800278e:	89a3      	ldrh	r3, [r4, #12]
 8002790:	0719      	lsls	r1, r3, #28
 8002792:	d51d      	bpl.n	80027d0 <_puts_r+0x78>
 8002794:	6923      	ldr	r3, [r4, #16]
 8002796:	b1db      	cbz	r3, 80027d0 <_puts_r+0x78>
 8002798:	3e01      	subs	r6, #1
 800279a:	68a3      	ldr	r3, [r4, #8]
 800279c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60a3      	str	r3, [r4, #8]
 80027a4:	bb39      	cbnz	r1, 80027f6 <_puts_r+0x9e>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	da38      	bge.n	800281c <_puts_r+0xc4>
 80027aa:	4622      	mov	r2, r4
 80027ac:	210a      	movs	r1, #10
 80027ae:	4628      	mov	r0, r5
 80027b0:	f000 f87a 	bl	80028a8 <__swbuf_r>
 80027b4:	3001      	adds	r0, #1
 80027b6:	d011      	beq.n	80027dc <_puts_r+0x84>
 80027b8:	250a      	movs	r5, #10
 80027ba:	e011      	b.n	80027e0 <_puts_r+0x88>
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <_puts_r+0xd4>)
 80027be:	429c      	cmp	r4, r3
 80027c0:	d101      	bne.n	80027c6 <_puts_r+0x6e>
 80027c2:	68ac      	ldr	r4, [r5, #8]
 80027c4:	e7da      	b.n	800277c <_puts_r+0x24>
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <_puts_r+0xd8>)
 80027c8:	429c      	cmp	r4, r3
 80027ca:	bf08      	it	eq
 80027cc:	68ec      	ldreq	r4, [r5, #12]
 80027ce:	e7d5      	b.n	800277c <_puts_r+0x24>
 80027d0:	4621      	mov	r1, r4
 80027d2:	4628      	mov	r0, r5
 80027d4:	f000 f8ba 	bl	800294c <__swsetup_r>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d0dd      	beq.n	8002798 <_puts_r+0x40>
 80027dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80027e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027e2:	07da      	lsls	r2, r3, #31
 80027e4:	d405      	bmi.n	80027f2 <_puts_r+0x9a>
 80027e6:	89a3      	ldrh	r3, [r4, #12]
 80027e8:	059b      	lsls	r3, r3, #22
 80027ea:	d402      	bmi.n	80027f2 <_puts_r+0x9a>
 80027ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027ee:	f000 fad4 	bl	8002d9a <__retarget_lock_release_recursive>
 80027f2:	4628      	mov	r0, r5
 80027f4:	bd70      	pop	{r4, r5, r6, pc}
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da04      	bge.n	8002804 <_puts_r+0xac>
 80027fa:	69a2      	ldr	r2, [r4, #24]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dc06      	bgt.n	800280e <_puts_r+0xb6>
 8002800:	290a      	cmp	r1, #10
 8002802:	d004      	beq.n	800280e <_puts_r+0xb6>
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	6022      	str	r2, [r4, #0]
 800280a:	7019      	strb	r1, [r3, #0]
 800280c:	e7c5      	b.n	800279a <_puts_r+0x42>
 800280e:	4622      	mov	r2, r4
 8002810:	4628      	mov	r0, r5
 8002812:	f000 f849 	bl	80028a8 <__swbuf_r>
 8002816:	3001      	adds	r0, #1
 8002818:	d1bf      	bne.n	800279a <_puts_r+0x42>
 800281a:	e7df      	b.n	80027dc <_puts_r+0x84>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	250a      	movs	r5, #10
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	6022      	str	r2, [r4, #0]
 8002824:	701d      	strb	r5, [r3, #0]
 8002826:	e7db      	b.n	80027e0 <_puts_r+0x88>
 8002828:	08003bc4 	.word	0x08003bc4
 800282c:	08003be4 	.word	0x08003be4
 8002830:	08003ba4 	.word	0x08003ba4

08002834 <puts>:
 8002834:	4b02      	ldr	r3, [pc, #8]	; (8002840 <puts+0xc>)
 8002836:	4601      	mov	r1, r0
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	f7ff bf8d 	b.w	8002758 <_puts_r>
 800283e:	bf00      	nop
 8002840:	2000000c 	.word	0x2000000c

08002844 <siprintf>:
 8002844:	b40e      	push	{r1, r2, r3}
 8002846:	b500      	push	{lr}
 8002848:	b09c      	sub	sp, #112	; 0x70
 800284a:	ab1d      	add	r3, sp, #116	; 0x74
 800284c:	9002      	str	r0, [sp, #8]
 800284e:	9006      	str	r0, [sp, #24]
 8002850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002854:	4809      	ldr	r0, [pc, #36]	; (800287c <siprintf+0x38>)
 8002856:	9107      	str	r1, [sp, #28]
 8002858:	9104      	str	r1, [sp, #16]
 800285a:	4909      	ldr	r1, [pc, #36]	; (8002880 <siprintf+0x3c>)
 800285c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002860:	9105      	str	r1, [sp, #20]
 8002862:	6800      	ldr	r0, [r0, #0]
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	a902      	add	r1, sp, #8
 8002868:	f000 fc3a 	bl	80030e0 <_svfiprintf_r>
 800286c:	9b02      	ldr	r3, [sp, #8]
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	b01c      	add	sp, #112	; 0x70
 8002874:	f85d eb04 	ldr.w	lr, [sp], #4
 8002878:	b003      	add	sp, #12
 800287a:	4770      	bx	lr
 800287c:	2000000c 	.word	0x2000000c
 8002880:	ffff0208 	.word	0xffff0208

08002884 <strcspn>:
 8002884:	b570      	push	{r4, r5, r6, lr}
 8002886:	4603      	mov	r3, r0
 8002888:	461e      	mov	r6, r3
 800288a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800288e:	b144      	cbz	r4, 80028a2 <strcspn+0x1e>
 8002890:	1e4a      	subs	r2, r1, #1
 8002892:	e001      	b.n	8002898 <strcspn+0x14>
 8002894:	42a5      	cmp	r5, r4
 8002896:	d004      	beq.n	80028a2 <strcspn+0x1e>
 8002898:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800289c:	2d00      	cmp	r5, #0
 800289e:	d1f9      	bne.n	8002894 <strcspn+0x10>
 80028a0:	e7f2      	b.n	8002888 <strcspn+0x4>
 80028a2:	1a30      	subs	r0, r6, r0
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080028a8 <__swbuf_r>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	460e      	mov	r6, r1
 80028ac:	4614      	mov	r4, r2
 80028ae:	4605      	mov	r5, r0
 80028b0:	b118      	cbz	r0, 80028ba <__swbuf_r+0x12>
 80028b2:	6983      	ldr	r3, [r0, #24]
 80028b4:	b90b      	cbnz	r3, 80028ba <__swbuf_r+0x12>
 80028b6:	f000 f9d1 	bl	8002c5c <__sinit>
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <__swbuf_r+0x98>)
 80028bc:	429c      	cmp	r4, r3
 80028be:	d12b      	bne.n	8002918 <__swbuf_r+0x70>
 80028c0:	686c      	ldr	r4, [r5, #4]
 80028c2:	69a3      	ldr	r3, [r4, #24]
 80028c4:	60a3      	str	r3, [r4, #8]
 80028c6:	89a3      	ldrh	r3, [r4, #12]
 80028c8:	071a      	lsls	r2, r3, #28
 80028ca:	d52f      	bpl.n	800292c <__swbuf_r+0x84>
 80028cc:	6923      	ldr	r3, [r4, #16]
 80028ce:	b36b      	cbz	r3, 800292c <__swbuf_r+0x84>
 80028d0:	6923      	ldr	r3, [r4, #16]
 80028d2:	6820      	ldr	r0, [r4, #0]
 80028d4:	1ac0      	subs	r0, r0, r3
 80028d6:	6963      	ldr	r3, [r4, #20]
 80028d8:	b2f6      	uxtb	r6, r6
 80028da:	4283      	cmp	r3, r0
 80028dc:	4637      	mov	r7, r6
 80028de:	dc04      	bgt.n	80028ea <__swbuf_r+0x42>
 80028e0:	4621      	mov	r1, r4
 80028e2:	4628      	mov	r0, r5
 80028e4:	f000 f926 	bl	8002b34 <_fflush_r>
 80028e8:	bb30      	cbnz	r0, 8002938 <__swbuf_r+0x90>
 80028ea:	68a3      	ldr	r3, [r4, #8]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60a3      	str	r3, [r4, #8]
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	6022      	str	r2, [r4, #0]
 80028f6:	701e      	strb	r6, [r3, #0]
 80028f8:	6963      	ldr	r3, [r4, #20]
 80028fa:	3001      	adds	r0, #1
 80028fc:	4283      	cmp	r3, r0
 80028fe:	d004      	beq.n	800290a <__swbuf_r+0x62>
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	07db      	lsls	r3, r3, #31
 8002904:	d506      	bpl.n	8002914 <__swbuf_r+0x6c>
 8002906:	2e0a      	cmp	r6, #10
 8002908:	d104      	bne.n	8002914 <__swbuf_r+0x6c>
 800290a:	4621      	mov	r1, r4
 800290c:	4628      	mov	r0, r5
 800290e:	f000 f911 	bl	8002b34 <_fflush_r>
 8002912:	b988      	cbnz	r0, 8002938 <__swbuf_r+0x90>
 8002914:	4638      	mov	r0, r7
 8002916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <__swbuf_r+0x9c>)
 800291a:	429c      	cmp	r4, r3
 800291c:	d101      	bne.n	8002922 <__swbuf_r+0x7a>
 800291e:	68ac      	ldr	r4, [r5, #8]
 8002920:	e7cf      	b.n	80028c2 <__swbuf_r+0x1a>
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <__swbuf_r+0xa0>)
 8002924:	429c      	cmp	r4, r3
 8002926:	bf08      	it	eq
 8002928:	68ec      	ldreq	r4, [r5, #12]
 800292a:	e7ca      	b.n	80028c2 <__swbuf_r+0x1a>
 800292c:	4621      	mov	r1, r4
 800292e:	4628      	mov	r0, r5
 8002930:	f000 f80c 	bl	800294c <__swsetup_r>
 8002934:	2800      	cmp	r0, #0
 8002936:	d0cb      	beq.n	80028d0 <__swbuf_r+0x28>
 8002938:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800293c:	e7ea      	b.n	8002914 <__swbuf_r+0x6c>
 800293e:	bf00      	nop
 8002940:	08003bc4 	.word	0x08003bc4
 8002944:	08003be4 	.word	0x08003be4
 8002948:	08003ba4 	.word	0x08003ba4

0800294c <__swsetup_r>:
 800294c:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <__swsetup_r+0xcc>)
 800294e:	b570      	push	{r4, r5, r6, lr}
 8002950:	681d      	ldr	r5, [r3, #0]
 8002952:	4606      	mov	r6, r0
 8002954:	460c      	mov	r4, r1
 8002956:	b125      	cbz	r5, 8002962 <__swsetup_r+0x16>
 8002958:	69ab      	ldr	r3, [r5, #24]
 800295a:	b913      	cbnz	r3, 8002962 <__swsetup_r+0x16>
 800295c:	4628      	mov	r0, r5
 800295e:	f000 f97d 	bl	8002c5c <__sinit>
 8002962:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <__swsetup_r+0xd0>)
 8002964:	429c      	cmp	r4, r3
 8002966:	d10f      	bne.n	8002988 <__swsetup_r+0x3c>
 8002968:	686c      	ldr	r4, [r5, #4]
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002970:	0719      	lsls	r1, r3, #28
 8002972:	d42c      	bmi.n	80029ce <__swsetup_r+0x82>
 8002974:	06dd      	lsls	r5, r3, #27
 8002976:	d411      	bmi.n	800299c <__swsetup_r+0x50>
 8002978:	2309      	movs	r3, #9
 800297a:	6033      	str	r3, [r6, #0]
 800297c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002980:	81a3      	strh	r3, [r4, #12]
 8002982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002986:	e03e      	b.n	8002a06 <__swsetup_r+0xba>
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <__swsetup_r+0xd4>)
 800298a:	429c      	cmp	r4, r3
 800298c:	d101      	bne.n	8002992 <__swsetup_r+0x46>
 800298e:	68ac      	ldr	r4, [r5, #8]
 8002990:	e7eb      	b.n	800296a <__swsetup_r+0x1e>
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <__swsetup_r+0xd8>)
 8002994:	429c      	cmp	r4, r3
 8002996:	bf08      	it	eq
 8002998:	68ec      	ldreq	r4, [r5, #12]
 800299a:	e7e6      	b.n	800296a <__swsetup_r+0x1e>
 800299c:	0758      	lsls	r0, r3, #29
 800299e:	d512      	bpl.n	80029c6 <__swsetup_r+0x7a>
 80029a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029a2:	b141      	cbz	r1, 80029b6 <__swsetup_r+0x6a>
 80029a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029a8:	4299      	cmp	r1, r3
 80029aa:	d002      	beq.n	80029b2 <__swsetup_r+0x66>
 80029ac:	4630      	mov	r0, r6
 80029ae:	f000 fa5b 	bl	8002e68 <_free_r>
 80029b2:	2300      	movs	r3, #0
 80029b4:	6363      	str	r3, [r4, #52]	; 0x34
 80029b6:	89a3      	ldrh	r3, [r4, #12]
 80029b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029bc:	81a3      	strh	r3, [r4, #12]
 80029be:	2300      	movs	r3, #0
 80029c0:	6063      	str	r3, [r4, #4]
 80029c2:	6923      	ldr	r3, [r4, #16]
 80029c4:	6023      	str	r3, [r4, #0]
 80029c6:	89a3      	ldrh	r3, [r4, #12]
 80029c8:	f043 0308 	orr.w	r3, r3, #8
 80029cc:	81a3      	strh	r3, [r4, #12]
 80029ce:	6923      	ldr	r3, [r4, #16]
 80029d0:	b94b      	cbnz	r3, 80029e6 <__swsetup_r+0x9a>
 80029d2:	89a3      	ldrh	r3, [r4, #12]
 80029d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029dc:	d003      	beq.n	80029e6 <__swsetup_r+0x9a>
 80029de:	4621      	mov	r1, r4
 80029e0:	4630      	mov	r0, r6
 80029e2:	f000 fa01 	bl	8002de8 <__smakebuf_r>
 80029e6:	89a0      	ldrh	r0, [r4, #12]
 80029e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029ec:	f010 0301 	ands.w	r3, r0, #1
 80029f0:	d00a      	beq.n	8002a08 <__swsetup_r+0xbc>
 80029f2:	2300      	movs	r3, #0
 80029f4:	60a3      	str	r3, [r4, #8]
 80029f6:	6963      	ldr	r3, [r4, #20]
 80029f8:	425b      	negs	r3, r3
 80029fa:	61a3      	str	r3, [r4, #24]
 80029fc:	6923      	ldr	r3, [r4, #16]
 80029fe:	b943      	cbnz	r3, 8002a12 <__swsetup_r+0xc6>
 8002a00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a04:	d1ba      	bne.n	800297c <__swsetup_r+0x30>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	0781      	lsls	r1, r0, #30
 8002a0a:	bf58      	it	pl
 8002a0c:	6963      	ldrpl	r3, [r4, #20]
 8002a0e:	60a3      	str	r3, [r4, #8]
 8002a10:	e7f4      	b.n	80029fc <__swsetup_r+0xb0>
 8002a12:	2000      	movs	r0, #0
 8002a14:	e7f7      	b.n	8002a06 <__swsetup_r+0xba>
 8002a16:	bf00      	nop
 8002a18:	2000000c 	.word	0x2000000c
 8002a1c:	08003bc4 	.word	0x08003bc4
 8002a20:	08003be4 	.word	0x08003be4
 8002a24:	08003ba4 	.word	0x08003ba4

08002a28 <__sflush_r>:
 8002a28:	898a      	ldrh	r2, [r1, #12]
 8002a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a2e:	4605      	mov	r5, r0
 8002a30:	0710      	lsls	r0, r2, #28
 8002a32:	460c      	mov	r4, r1
 8002a34:	d458      	bmi.n	8002ae8 <__sflush_r+0xc0>
 8002a36:	684b      	ldr	r3, [r1, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	dc05      	bgt.n	8002a48 <__sflush_r+0x20>
 8002a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	dc02      	bgt.n	8002a48 <__sflush_r+0x20>
 8002a42:	2000      	movs	r0, #0
 8002a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a4a:	2e00      	cmp	r6, #0
 8002a4c:	d0f9      	beq.n	8002a42 <__sflush_r+0x1a>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a54:	682f      	ldr	r7, [r5, #0]
 8002a56:	602b      	str	r3, [r5, #0]
 8002a58:	d032      	beq.n	8002ac0 <__sflush_r+0x98>
 8002a5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a5c:	89a3      	ldrh	r3, [r4, #12]
 8002a5e:	075a      	lsls	r2, r3, #29
 8002a60:	d505      	bpl.n	8002a6e <__sflush_r+0x46>
 8002a62:	6863      	ldr	r3, [r4, #4]
 8002a64:	1ac0      	subs	r0, r0, r3
 8002a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a68:	b10b      	cbz	r3, 8002a6e <__sflush_r+0x46>
 8002a6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a6c:	1ac0      	subs	r0, r0, r3
 8002a6e:	2300      	movs	r3, #0
 8002a70:	4602      	mov	r2, r0
 8002a72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a74:	6a21      	ldr	r1, [r4, #32]
 8002a76:	4628      	mov	r0, r5
 8002a78:	47b0      	blx	r6
 8002a7a:	1c43      	adds	r3, r0, #1
 8002a7c:	89a3      	ldrh	r3, [r4, #12]
 8002a7e:	d106      	bne.n	8002a8e <__sflush_r+0x66>
 8002a80:	6829      	ldr	r1, [r5, #0]
 8002a82:	291d      	cmp	r1, #29
 8002a84:	d82c      	bhi.n	8002ae0 <__sflush_r+0xb8>
 8002a86:	4a2a      	ldr	r2, [pc, #168]	; (8002b30 <__sflush_r+0x108>)
 8002a88:	40ca      	lsrs	r2, r1
 8002a8a:	07d6      	lsls	r6, r2, #31
 8002a8c:	d528      	bpl.n	8002ae0 <__sflush_r+0xb8>
 8002a8e:	2200      	movs	r2, #0
 8002a90:	6062      	str	r2, [r4, #4]
 8002a92:	04d9      	lsls	r1, r3, #19
 8002a94:	6922      	ldr	r2, [r4, #16]
 8002a96:	6022      	str	r2, [r4, #0]
 8002a98:	d504      	bpl.n	8002aa4 <__sflush_r+0x7c>
 8002a9a:	1c42      	adds	r2, r0, #1
 8002a9c:	d101      	bne.n	8002aa2 <__sflush_r+0x7a>
 8002a9e:	682b      	ldr	r3, [r5, #0]
 8002aa0:	b903      	cbnz	r3, 8002aa4 <__sflush_r+0x7c>
 8002aa2:	6560      	str	r0, [r4, #84]	; 0x54
 8002aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aa6:	602f      	str	r7, [r5, #0]
 8002aa8:	2900      	cmp	r1, #0
 8002aaa:	d0ca      	beq.n	8002a42 <__sflush_r+0x1a>
 8002aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ab0:	4299      	cmp	r1, r3
 8002ab2:	d002      	beq.n	8002aba <__sflush_r+0x92>
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f000 f9d7 	bl	8002e68 <_free_r>
 8002aba:	2000      	movs	r0, #0
 8002abc:	6360      	str	r0, [r4, #52]	; 0x34
 8002abe:	e7c1      	b.n	8002a44 <__sflush_r+0x1c>
 8002ac0:	6a21      	ldr	r1, [r4, #32]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	47b0      	blx	r6
 8002ac8:	1c41      	adds	r1, r0, #1
 8002aca:	d1c7      	bne.n	8002a5c <__sflush_r+0x34>
 8002acc:	682b      	ldr	r3, [r5, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0c4      	beq.n	8002a5c <__sflush_r+0x34>
 8002ad2:	2b1d      	cmp	r3, #29
 8002ad4:	d001      	beq.n	8002ada <__sflush_r+0xb2>
 8002ad6:	2b16      	cmp	r3, #22
 8002ad8:	d101      	bne.n	8002ade <__sflush_r+0xb6>
 8002ada:	602f      	str	r7, [r5, #0]
 8002adc:	e7b1      	b.n	8002a42 <__sflush_r+0x1a>
 8002ade:	89a3      	ldrh	r3, [r4, #12]
 8002ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae4:	81a3      	strh	r3, [r4, #12]
 8002ae6:	e7ad      	b.n	8002a44 <__sflush_r+0x1c>
 8002ae8:	690f      	ldr	r7, [r1, #16]
 8002aea:	2f00      	cmp	r7, #0
 8002aec:	d0a9      	beq.n	8002a42 <__sflush_r+0x1a>
 8002aee:	0793      	lsls	r3, r2, #30
 8002af0:	680e      	ldr	r6, [r1, #0]
 8002af2:	bf08      	it	eq
 8002af4:	694b      	ldreq	r3, [r1, #20]
 8002af6:	600f      	str	r7, [r1, #0]
 8002af8:	bf18      	it	ne
 8002afa:	2300      	movne	r3, #0
 8002afc:	eba6 0807 	sub.w	r8, r6, r7
 8002b00:	608b      	str	r3, [r1, #8]
 8002b02:	f1b8 0f00 	cmp.w	r8, #0
 8002b06:	dd9c      	ble.n	8002a42 <__sflush_r+0x1a>
 8002b08:	6a21      	ldr	r1, [r4, #32]
 8002b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b0c:	4643      	mov	r3, r8
 8002b0e:	463a      	mov	r2, r7
 8002b10:	4628      	mov	r0, r5
 8002b12:	47b0      	blx	r6
 8002b14:	2800      	cmp	r0, #0
 8002b16:	dc06      	bgt.n	8002b26 <__sflush_r+0xfe>
 8002b18:	89a3      	ldrh	r3, [r4, #12]
 8002b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1e:	81a3      	strh	r3, [r4, #12]
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b24:	e78e      	b.n	8002a44 <__sflush_r+0x1c>
 8002b26:	4407      	add	r7, r0
 8002b28:	eba8 0800 	sub.w	r8, r8, r0
 8002b2c:	e7e9      	b.n	8002b02 <__sflush_r+0xda>
 8002b2e:	bf00      	nop
 8002b30:	20400001 	.word	0x20400001

08002b34 <_fflush_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	690b      	ldr	r3, [r1, #16]
 8002b38:	4605      	mov	r5, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	b913      	cbnz	r3, 8002b44 <_fflush_r+0x10>
 8002b3e:	2500      	movs	r5, #0
 8002b40:	4628      	mov	r0, r5
 8002b42:	bd38      	pop	{r3, r4, r5, pc}
 8002b44:	b118      	cbz	r0, 8002b4e <_fflush_r+0x1a>
 8002b46:	6983      	ldr	r3, [r0, #24]
 8002b48:	b90b      	cbnz	r3, 8002b4e <_fflush_r+0x1a>
 8002b4a:	f000 f887 	bl	8002c5c <__sinit>
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <_fflush_r+0x6c>)
 8002b50:	429c      	cmp	r4, r3
 8002b52:	d11b      	bne.n	8002b8c <_fflush_r+0x58>
 8002b54:	686c      	ldr	r4, [r5, #4]
 8002b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ef      	beq.n	8002b3e <_fflush_r+0xa>
 8002b5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b60:	07d0      	lsls	r0, r2, #31
 8002b62:	d404      	bmi.n	8002b6e <_fflush_r+0x3a>
 8002b64:	0599      	lsls	r1, r3, #22
 8002b66:	d402      	bmi.n	8002b6e <_fflush_r+0x3a>
 8002b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b6a:	f000 f915 	bl	8002d98 <__retarget_lock_acquire_recursive>
 8002b6e:	4628      	mov	r0, r5
 8002b70:	4621      	mov	r1, r4
 8002b72:	f7ff ff59 	bl	8002a28 <__sflush_r>
 8002b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b78:	07da      	lsls	r2, r3, #31
 8002b7a:	4605      	mov	r5, r0
 8002b7c:	d4e0      	bmi.n	8002b40 <_fflush_r+0xc>
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	059b      	lsls	r3, r3, #22
 8002b82:	d4dd      	bmi.n	8002b40 <_fflush_r+0xc>
 8002b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b86:	f000 f908 	bl	8002d9a <__retarget_lock_release_recursive>
 8002b8a:	e7d9      	b.n	8002b40 <_fflush_r+0xc>
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <_fflush_r+0x70>)
 8002b8e:	429c      	cmp	r4, r3
 8002b90:	d101      	bne.n	8002b96 <_fflush_r+0x62>
 8002b92:	68ac      	ldr	r4, [r5, #8]
 8002b94:	e7df      	b.n	8002b56 <_fflush_r+0x22>
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <_fflush_r+0x74>)
 8002b98:	429c      	cmp	r4, r3
 8002b9a:	bf08      	it	eq
 8002b9c:	68ec      	ldreq	r4, [r5, #12]
 8002b9e:	e7da      	b.n	8002b56 <_fflush_r+0x22>
 8002ba0:	08003bc4 	.word	0x08003bc4
 8002ba4:	08003be4 	.word	0x08003be4
 8002ba8:	08003ba4 	.word	0x08003ba4

08002bac <std>:
 8002bac:	2300      	movs	r3, #0
 8002bae:	b510      	push	{r4, lr}
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8002bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bba:	6083      	str	r3, [r0, #8]
 8002bbc:	8181      	strh	r1, [r0, #12]
 8002bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8002bc0:	81c2      	strh	r2, [r0, #14]
 8002bc2:	6183      	str	r3, [r0, #24]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	305c      	adds	r0, #92	; 0x5c
 8002bca:	f7ff fda5 	bl	8002718 <memset>
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <std+0x38>)
 8002bd0:	6263      	str	r3, [r4, #36]	; 0x24
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <std+0x3c>)
 8002bd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <std+0x40>)
 8002bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <std+0x44>)
 8002bdc:	6224      	str	r4, [r4, #32]
 8002bde:	6323      	str	r3, [r4, #48]	; 0x30
 8002be0:	bd10      	pop	{r4, pc}
 8002be2:	bf00      	nop
 8002be4:	080038dd 	.word	0x080038dd
 8002be8:	080038ff 	.word	0x080038ff
 8002bec:	08003937 	.word	0x08003937
 8002bf0:	0800395b 	.word	0x0800395b

08002bf4 <_cleanup_r>:
 8002bf4:	4901      	ldr	r1, [pc, #4]	; (8002bfc <_cleanup_r+0x8>)
 8002bf6:	f000 b8af 	b.w	8002d58 <_fwalk_reent>
 8002bfa:	bf00      	nop
 8002bfc:	08002b35 	.word	0x08002b35

08002c00 <__sfmoreglue>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	2268      	movs	r2, #104	; 0x68
 8002c04:	1e4d      	subs	r5, r1, #1
 8002c06:	4355      	muls	r5, r2
 8002c08:	460e      	mov	r6, r1
 8002c0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c0e:	f000 f997 	bl	8002f40 <_malloc_r>
 8002c12:	4604      	mov	r4, r0
 8002c14:	b140      	cbz	r0, 8002c28 <__sfmoreglue+0x28>
 8002c16:	2100      	movs	r1, #0
 8002c18:	e9c0 1600 	strd	r1, r6, [r0]
 8002c1c:	300c      	adds	r0, #12
 8002c1e:	60a0      	str	r0, [r4, #8]
 8002c20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c24:	f7ff fd78 	bl	8002718 <memset>
 8002c28:	4620      	mov	r0, r4
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}

08002c2c <__sfp_lock_acquire>:
 8002c2c:	4801      	ldr	r0, [pc, #4]	; (8002c34 <__sfp_lock_acquire+0x8>)
 8002c2e:	f000 b8b3 	b.w	8002d98 <__retarget_lock_acquire_recursive>
 8002c32:	bf00      	nop
 8002c34:	20000121 	.word	0x20000121

08002c38 <__sfp_lock_release>:
 8002c38:	4801      	ldr	r0, [pc, #4]	; (8002c40 <__sfp_lock_release+0x8>)
 8002c3a:	f000 b8ae 	b.w	8002d9a <__retarget_lock_release_recursive>
 8002c3e:	bf00      	nop
 8002c40:	20000121 	.word	0x20000121

08002c44 <__sinit_lock_acquire>:
 8002c44:	4801      	ldr	r0, [pc, #4]	; (8002c4c <__sinit_lock_acquire+0x8>)
 8002c46:	f000 b8a7 	b.w	8002d98 <__retarget_lock_acquire_recursive>
 8002c4a:	bf00      	nop
 8002c4c:	20000122 	.word	0x20000122

08002c50 <__sinit_lock_release>:
 8002c50:	4801      	ldr	r0, [pc, #4]	; (8002c58 <__sinit_lock_release+0x8>)
 8002c52:	f000 b8a2 	b.w	8002d9a <__retarget_lock_release_recursive>
 8002c56:	bf00      	nop
 8002c58:	20000122 	.word	0x20000122

08002c5c <__sinit>:
 8002c5c:	b510      	push	{r4, lr}
 8002c5e:	4604      	mov	r4, r0
 8002c60:	f7ff fff0 	bl	8002c44 <__sinit_lock_acquire>
 8002c64:	69a3      	ldr	r3, [r4, #24]
 8002c66:	b11b      	cbz	r3, 8002c70 <__sinit+0x14>
 8002c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c6c:	f7ff bff0 	b.w	8002c50 <__sinit_lock_release>
 8002c70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002c74:	6523      	str	r3, [r4, #80]	; 0x50
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <__sinit+0x68>)
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <__sinit+0x6c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c7e:	42a3      	cmp	r3, r4
 8002c80:	bf04      	itt	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	61a3      	streq	r3, [r4, #24]
 8002c86:	4620      	mov	r0, r4
 8002c88:	f000 f820 	bl	8002ccc <__sfp>
 8002c8c:	6060      	str	r0, [r4, #4]
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f000 f81c 	bl	8002ccc <__sfp>
 8002c94:	60a0      	str	r0, [r4, #8]
 8002c96:	4620      	mov	r0, r4
 8002c98:	f000 f818 	bl	8002ccc <__sfp>
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60e0      	str	r0, [r4, #12]
 8002ca0:	2104      	movs	r1, #4
 8002ca2:	6860      	ldr	r0, [r4, #4]
 8002ca4:	f7ff ff82 	bl	8002bac <std>
 8002ca8:	68a0      	ldr	r0, [r4, #8]
 8002caa:	2201      	movs	r2, #1
 8002cac:	2109      	movs	r1, #9
 8002cae:	f7ff ff7d 	bl	8002bac <std>
 8002cb2:	68e0      	ldr	r0, [r4, #12]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	2112      	movs	r1, #18
 8002cb8:	f7ff ff78 	bl	8002bac <std>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	61a3      	str	r3, [r4, #24]
 8002cc0:	e7d2      	b.n	8002c68 <__sinit+0xc>
 8002cc2:	bf00      	nop
 8002cc4:	08003ba0 	.word	0x08003ba0
 8002cc8:	08002bf5 	.word	0x08002bf5

08002ccc <__sfp>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	4607      	mov	r7, r0
 8002cd0:	f7ff ffac 	bl	8002c2c <__sfp_lock_acquire>
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <__sfp+0x84>)
 8002cd6:	681e      	ldr	r6, [r3, #0]
 8002cd8:	69b3      	ldr	r3, [r6, #24]
 8002cda:	b913      	cbnz	r3, 8002ce2 <__sfp+0x16>
 8002cdc:	4630      	mov	r0, r6
 8002cde:	f7ff ffbd 	bl	8002c5c <__sinit>
 8002ce2:	3648      	adds	r6, #72	; 0x48
 8002ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	d503      	bpl.n	8002cf4 <__sfp+0x28>
 8002cec:	6833      	ldr	r3, [r6, #0]
 8002cee:	b30b      	cbz	r3, 8002d34 <__sfp+0x68>
 8002cf0:	6836      	ldr	r6, [r6, #0]
 8002cf2:	e7f7      	b.n	8002ce4 <__sfp+0x18>
 8002cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cf8:	b9d5      	cbnz	r5, 8002d30 <__sfp+0x64>
 8002cfa:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <__sfp+0x88>)
 8002cfc:	60e3      	str	r3, [r4, #12]
 8002cfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d02:	6665      	str	r5, [r4, #100]	; 0x64
 8002d04:	f000 f847 	bl	8002d96 <__retarget_lock_init_recursive>
 8002d08:	f7ff ff96 	bl	8002c38 <__sfp_lock_release>
 8002d0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002d10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002d14:	6025      	str	r5, [r4, #0]
 8002d16:	61a5      	str	r5, [r4, #24]
 8002d18:	2208      	movs	r2, #8
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d20:	f7ff fcfa 	bl	8002718 <memset>
 8002d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d30:	3468      	adds	r4, #104	; 0x68
 8002d32:	e7d9      	b.n	8002ce8 <__sfp+0x1c>
 8002d34:	2104      	movs	r1, #4
 8002d36:	4638      	mov	r0, r7
 8002d38:	f7ff ff62 	bl	8002c00 <__sfmoreglue>
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	6030      	str	r0, [r6, #0]
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d1d5      	bne.n	8002cf0 <__sfp+0x24>
 8002d44:	f7ff ff78 	bl	8002c38 <__sfp_lock_release>
 8002d48:	230c      	movs	r3, #12
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	e7ee      	b.n	8002d2c <__sfp+0x60>
 8002d4e:	bf00      	nop
 8002d50:	08003ba0 	.word	0x08003ba0
 8002d54:	ffff0001 	.word	0xffff0001

08002d58 <_fwalk_reent>:
 8002d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d5c:	4606      	mov	r6, r0
 8002d5e:	4688      	mov	r8, r1
 8002d60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d64:	2700      	movs	r7, #0
 8002d66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8002d6e:	d505      	bpl.n	8002d7c <_fwalk_reent+0x24>
 8002d70:	6824      	ldr	r4, [r4, #0]
 8002d72:	2c00      	cmp	r4, #0
 8002d74:	d1f7      	bne.n	8002d66 <_fwalk_reent+0xe>
 8002d76:	4638      	mov	r0, r7
 8002d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d7c:	89ab      	ldrh	r3, [r5, #12]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d907      	bls.n	8002d92 <_fwalk_reent+0x3a>
 8002d82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d86:	3301      	adds	r3, #1
 8002d88:	d003      	beq.n	8002d92 <_fwalk_reent+0x3a>
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	47c0      	blx	r8
 8002d90:	4307      	orrs	r7, r0
 8002d92:	3568      	adds	r5, #104	; 0x68
 8002d94:	e7e9      	b.n	8002d6a <_fwalk_reent+0x12>

08002d96 <__retarget_lock_init_recursive>:
 8002d96:	4770      	bx	lr

08002d98 <__retarget_lock_acquire_recursive>:
 8002d98:	4770      	bx	lr

08002d9a <__retarget_lock_release_recursive>:
 8002d9a:	4770      	bx	lr

08002d9c <__swhatbuf_r>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	460e      	mov	r6, r1
 8002da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002da4:	2900      	cmp	r1, #0
 8002da6:	b096      	sub	sp, #88	; 0x58
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
 8002dac:	da08      	bge.n	8002dc0 <__swhatbuf_r+0x24>
 8002dae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	602a      	str	r2, [r5, #0]
 8002db6:	061a      	lsls	r2, r3, #24
 8002db8:	d410      	bmi.n	8002ddc <__swhatbuf_r+0x40>
 8002dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dbe:	e00e      	b.n	8002dde <__swhatbuf_r+0x42>
 8002dc0:	466a      	mov	r2, sp
 8002dc2:	f000 fdf1 	bl	80039a8 <_fstat_r>
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	dbf1      	blt.n	8002dae <__swhatbuf_r+0x12>
 8002dca:	9a01      	ldr	r2, [sp, #4]
 8002dcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002dd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002dd4:	425a      	negs	r2, r3
 8002dd6:	415a      	adcs	r2, r3
 8002dd8:	602a      	str	r2, [r5, #0]
 8002dda:	e7ee      	b.n	8002dba <__swhatbuf_r+0x1e>
 8002ddc:	2340      	movs	r3, #64	; 0x40
 8002dde:	2000      	movs	r0, #0
 8002de0:	6023      	str	r3, [r4, #0]
 8002de2:	b016      	add	sp, #88	; 0x58
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002de8 <__smakebuf_r>:
 8002de8:	898b      	ldrh	r3, [r1, #12]
 8002dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002dec:	079d      	lsls	r5, r3, #30
 8002dee:	4606      	mov	r6, r0
 8002df0:	460c      	mov	r4, r1
 8002df2:	d507      	bpl.n	8002e04 <__smakebuf_r+0x1c>
 8002df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002df8:	6023      	str	r3, [r4, #0]
 8002dfa:	6123      	str	r3, [r4, #16]
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	6163      	str	r3, [r4, #20]
 8002e00:	b002      	add	sp, #8
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	ab01      	add	r3, sp, #4
 8002e06:	466a      	mov	r2, sp
 8002e08:	f7ff ffc8 	bl	8002d9c <__swhatbuf_r>
 8002e0c:	9900      	ldr	r1, [sp, #0]
 8002e0e:	4605      	mov	r5, r0
 8002e10:	4630      	mov	r0, r6
 8002e12:	f000 f895 	bl	8002f40 <_malloc_r>
 8002e16:	b948      	cbnz	r0, 8002e2c <__smakebuf_r+0x44>
 8002e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e1c:	059a      	lsls	r2, r3, #22
 8002e1e:	d4ef      	bmi.n	8002e00 <__smakebuf_r+0x18>
 8002e20:	f023 0303 	bic.w	r3, r3, #3
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	81a3      	strh	r3, [r4, #12]
 8002e2a:	e7e3      	b.n	8002df4 <__smakebuf_r+0xc>
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <__smakebuf_r+0x7c>)
 8002e2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	6020      	str	r0, [r4, #0]
 8002e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e38:	81a3      	strh	r3, [r4, #12]
 8002e3a:	9b00      	ldr	r3, [sp, #0]
 8002e3c:	6163      	str	r3, [r4, #20]
 8002e3e:	9b01      	ldr	r3, [sp, #4]
 8002e40:	6120      	str	r0, [r4, #16]
 8002e42:	b15b      	cbz	r3, 8002e5c <__smakebuf_r+0x74>
 8002e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e48:	4630      	mov	r0, r6
 8002e4a:	f000 fdbf 	bl	80039cc <_isatty_r>
 8002e4e:	b128      	cbz	r0, 8002e5c <__smakebuf_r+0x74>
 8002e50:	89a3      	ldrh	r3, [r4, #12]
 8002e52:	f023 0303 	bic.w	r3, r3, #3
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	81a3      	strh	r3, [r4, #12]
 8002e5c:	89a0      	ldrh	r0, [r4, #12]
 8002e5e:	4305      	orrs	r5, r0
 8002e60:	81a5      	strh	r5, [r4, #12]
 8002e62:	e7cd      	b.n	8002e00 <__smakebuf_r+0x18>
 8002e64:	08002bf5 	.word	0x08002bf5

08002e68 <_free_r>:
 8002e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e6a:	2900      	cmp	r1, #0
 8002e6c:	d044      	beq.n	8002ef8 <_free_r+0x90>
 8002e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e72:	9001      	str	r0, [sp, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f1a1 0404 	sub.w	r4, r1, #4
 8002e7a:	bfb8      	it	lt
 8002e7c:	18e4      	addlt	r4, r4, r3
 8002e7e:	f000 fdef 	bl	8003a60 <__malloc_lock>
 8002e82:	4a1e      	ldr	r2, [pc, #120]	; (8002efc <_free_r+0x94>)
 8002e84:	9801      	ldr	r0, [sp, #4]
 8002e86:	6813      	ldr	r3, [r2, #0]
 8002e88:	b933      	cbnz	r3, 8002e98 <_free_r+0x30>
 8002e8a:	6063      	str	r3, [r4, #4]
 8002e8c:	6014      	str	r4, [r2, #0]
 8002e8e:	b003      	add	sp, #12
 8002e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e94:	f000 bdea 	b.w	8003a6c <__malloc_unlock>
 8002e98:	42a3      	cmp	r3, r4
 8002e9a:	d908      	bls.n	8002eae <_free_r+0x46>
 8002e9c:	6825      	ldr	r5, [r4, #0]
 8002e9e:	1961      	adds	r1, r4, r5
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	bf01      	itttt	eq
 8002ea4:	6819      	ldreq	r1, [r3, #0]
 8002ea6:	685b      	ldreq	r3, [r3, #4]
 8002ea8:	1949      	addeq	r1, r1, r5
 8002eaa:	6021      	streq	r1, [r4, #0]
 8002eac:	e7ed      	b.n	8002e8a <_free_r+0x22>
 8002eae:	461a      	mov	r2, r3
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	b10b      	cbz	r3, 8002eb8 <_free_r+0x50>
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	d9fa      	bls.n	8002eae <_free_r+0x46>
 8002eb8:	6811      	ldr	r1, [r2, #0]
 8002eba:	1855      	adds	r5, r2, r1
 8002ebc:	42a5      	cmp	r5, r4
 8002ebe:	d10b      	bne.n	8002ed8 <_free_r+0x70>
 8002ec0:	6824      	ldr	r4, [r4, #0]
 8002ec2:	4421      	add	r1, r4
 8002ec4:	1854      	adds	r4, r2, r1
 8002ec6:	42a3      	cmp	r3, r4
 8002ec8:	6011      	str	r1, [r2, #0]
 8002eca:	d1e0      	bne.n	8002e8e <_free_r+0x26>
 8002ecc:	681c      	ldr	r4, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	6053      	str	r3, [r2, #4]
 8002ed2:	4421      	add	r1, r4
 8002ed4:	6011      	str	r1, [r2, #0]
 8002ed6:	e7da      	b.n	8002e8e <_free_r+0x26>
 8002ed8:	d902      	bls.n	8002ee0 <_free_r+0x78>
 8002eda:	230c      	movs	r3, #12
 8002edc:	6003      	str	r3, [r0, #0]
 8002ede:	e7d6      	b.n	8002e8e <_free_r+0x26>
 8002ee0:	6825      	ldr	r5, [r4, #0]
 8002ee2:	1961      	adds	r1, r4, r5
 8002ee4:	428b      	cmp	r3, r1
 8002ee6:	bf04      	itt	eq
 8002ee8:	6819      	ldreq	r1, [r3, #0]
 8002eea:	685b      	ldreq	r3, [r3, #4]
 8002eec:	6063      	str	r3, [r4, #4]
 8002eee:	bf04      	itt	eq
 8002ef0:	1949      	addeq	r1, r1, r5
 8002ef2:	6021      	streq	r1, [r4, #0]
 8002ef4:	6054      	str	r4, [r2, #4]
 8002ef6:	e7ca      	b.n	8002e8e <_free_r+0x26>
 8002ef8:	b003      	add	sp, #12
 8002efa:	bd30      	pop	{r4, r5, pc}
 8002efc:	20000124 	.word	0x20000124

08002f00 <sbrk_aligned>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	4e0e      	ldr	r6, [pc, #56]	; (8002f3c <sbrk_aligned+0x3c>)
 8002f04:	460c      	mov	r4, r1
 8002f06:	6831      	ldr	r1, [r6, #0]
 8002f08:	4605      	mov	r5, r0
 8002f0a:	b911      	cbnz	r1, 8002f12 <sbrk_aligned+0x12>
 8002f0c:	f000 fcd6 	bl	80038bc <_sbrk_r>
 8002f10:	6030      	str	r0, [r6, #0]
 8002f12:	4621      	mov	r1, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 fcd1 	bl	80038bc <_sbrk_r>
 8002f1a:	1c43      	adds	r3, r0, #1
 8002f1c:	d00a      	beq.n	8002f34 <sbrk_aligned+0x34>
 8002f1e:	1cc4      	adds	r4, r0, #3
 8002f20:	f024 0403 	bic.w	r4, r4, #3
 8002f24:	42a0      	cmp	r0, r4
 8002f26:	d007      	beq.n	8002f38 <sbrk_aligned+0x38>
 8002f28:	1a21      	subs	r1, r4, r0
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f000 fcc6 	bl	80038bc <_sbrk_r>
 8002f30:	3001      	adds	r0, #1
 8002f32:	d101      	bne.n	8002f38 <sbrk_aligned+0x38>
 8002f34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f38:	4620      	mov	r0, r4
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
 8002f3c:	20000128 	.word	0x20000128

08002f40 <_malloc_r>:
 8002f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f44:	1ccd      	adds	r5, r1, #3
 8002f46:	f025 0503 	bic.w	r5, r5, #3
 8002f4a:	3508      	adds	r5, #8
 8002f4c:	2d0c      	cmp	r5, #12
 8002f4e:	bf38      	it	cc
 8002f50:	250c      	movcc	r5, #12
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	4607      	mov	r7, r0
 8002f56:	db01      	blt.n	8002f5c <_malloc_r+0x1c>
 8002f58:	42a9      	cmp	r1, r5
 8002f5a:	d905      	bls.n	8002f68 <_malloc_r+0x28>
 8002f5c:	230c      	movs	r3, #12
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	2600      	movs	r6, #0
 8002f62:	4630      	mov	r0, r6
 8002f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f68:	4e2e      	ldr	r6, [pc, #184]	; (8003024 <_malloc_r+0xe4>)
 8002f6a:	f000 fd79 	bl	8003a60 <__malloc_lock>
 8002f6e:	6833      	ldr	r3, [r6, #0]
 8002f70:	461c      	mov	r4, r3
 8002f72:	bb34      	cbnz	r4, 8002fc2 <_malloc_r+0x82>
 8002f74:	4629      	mov	r1, r5
 8002f76:	4638      	mov	r0, r7
 8002f78:	f7ff ffc2 	bl	8002f00 <sbrk_aligned>
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	4604      	mov	r4, r0
 8002f80:	d14d      	bne.n	800301e <_malloc_r+0xde>
 8002f82:	6834      	ldr	r4, [r6, #0]
 8002f84:	4626      	mov	r6, r4
 8002f86:	2e00      	cmp	r6, #0
 8002f88:	d140      	bne.n	800300c <_malloc_r+0xcc>
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	4631      	mov	r1, r6
 8002f8e:	4638      	mov	r0, r7
 8002f90:	eb04 0803 	add.w	r8, r4, r3
 8002f94:	f000 fc92 	bl	80038bc <_sbrk_r>
 8002f98:	4580      	cmp	r8, r0
 8002f9a:	d13a      	bne.n	8003012 <_malloc_r+0xd2>
 8002f9c:	6821      	ldr	r1, [r4, #0]
 8002f9e:	3503      	adds	r5, #3
 8002fa0:	1a6d      	subs	r5, r5, r1
 8002fa2:	f025 0503 	bic.w	r5, r5, #3
 8002fa6:	3508      	adds	r5, #8
 8002fa8:	2d0c      	cmp	r5, #12
 8002faa:	bf38      	it	cc
 8002fac:	250c      	movcc	r5, #12
 8002fae:	4629      	mov	r1, r5
 8002fb0:	4638      	mov	r0, r7
 8002fb2:	f7ff ffa5 	bl	8002f00 <sbrk_aligned>
 8002fb6:	3001      	adds	r0, #1
 8002fb8:	d02b      	beq.n	8003012 <_malloc_r+0xd2>
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	442b      	add	r3, r5
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	e00e      	b.n	8002fe0 <_malloc_r+0xa0>
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	1b52      	subs	r2, r2, r5
 8002fc6:	d41e      	bmi.n	8003006 <_malloc_r+0xc6>
 8002fc8:	2a0b      	cmp	r2, #11
 8002fca:	d916      	bls.n	8002ffa <_malloc_r+0xba>
 8002fcc:	1961      	adds	r1, r4, r5
 8002fce:	42a3      	cmp	r3, r4
 8002fd0:	6025      	str	r5, [r4, #0]
 8002fd2:	bf18      	it	ne
 8002fd4:	6059      	strne	r1, [r3, #4]
 8002fd6:	6863      	ldr	r3, [r4, #4]
 8002fd8:	bf08      	it	eq
 8002fda:	6031      	streq	r1, [r6, #0]
 8002fdc:	5162      	str	r2, [r4, r5]
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	4638      	mov	r0, r7
 8002fe2:	f104 060b 	add.w	r6, r4, #11
 8002fe6:	f000 fd41 	bl	8003a6c <__malloc_unlock>
 8002fea:	f026 0607 	bic.w	r6, r6, #7
 8002fee:	1d23      	adds	r3, r4, #4
 8002ff0:	1af2      	subs	r2, r6, r3
 8002ff2:	d0b6      	beq.n	8002f62 <_malloc_r+0x22>
 8002ff4:	1b9b      	subs	r3, r3, r6
 8002ff6:	50a3      	str	r3, [r4, r2]
 8002ff8:	e7b3      	b.n	8002f62 <_malloc_r+0x22>
 8002ffa:	6862      	ldr	r2, [r4, #4]
 8002ffc:	42a3      	cmp	r3, r4
 8002ffe:	bf0c      	ite	eq
 8003000:	6032      	streq	r2, [r6, #0]
 8003002:	605a      	strne	r2, [r3, #4]
 8003004:	e7ec      	b.n	8002fe0 <_malloc_r+0xa0>
 8003006:	4623      	mov	r3, r4
 8003008:	6864      	ldr	r4, [r4, #4]
 800300a:	e7b2      	b.n	8002f72 <_malloc_r+0x32>
 800300c:	4634      	mov	r4, r6
 800300e:	6876      	ldr	r6, [r6, #4]
 8003010:	e7b9      	b.n	8002f86 <_malloc_r+0x46>
 8003012:	230c      	movs	r3, #12
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	4638      	mov	r0, r7
 8003018:	f000 fd28 	bl	8003a6c <__malloc_unlock>
 800301c:	e7a1      	b.n	8002f62 <_malloc_r+0x22>
 800301e:	6025      	str	r5, [r4, #0]
 8003020:	e7de      	b.n	8002fe0 <_malloc_r+0xa0>
 8003022:	bf00      	nop
 8003024:	20000124 	.word	0x20000124

08003028 <__ssputs_r>:
 8003028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800302c:	688e      	ldr	r6, [r1, #8]
 800302e:	429e      	cmp	r6, r3
 8003030:	4682      	mov	sl, r0
 8003032:	460c      	mov	r4, r1
 8003034:	4690      	mov	r8, r2
 8003036:	461f      	mov	r7, r3
 8003038:	d838      	bhi.n	80030ac <__ssputs_r+0x84>
 800303a:	898a      	ldrh	r2, [r1, #12]
 800303c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003040:	d032      	beq.n	80030a8 <__ssputs_r+0x80>
 8003042:	6825      	ldr	r5, [r4, #0]
 8003044:	6909      	ldr	r1, [r1, #16]
 8003046:	eba5 0901 	sub.w	r9, r5, r1
 800304a:	6965      	ldr	r5, [r4, #20]
 800304c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003054:	3301      	adds	r3, #1
 8003056:	444b      	add	r3, r9
 8003058:	106d      	asrs	r5, r5, #1
 800305a:	429d      	cmp	r5, r3
 800305c:	bf38      	it	cc
 800305e:	461d      	movcc	r5, r3
 8003060:	0553      	lsls	r3, r2, #21
 8003062:	d531      	bpl.n	80030c8 <__ssputs_r+0xa0>
 8003064:	4629      	mov	r1, r5
 8003066:	f7ff ff6b 	bl	8002f40 <_malloc_r>
 800306a:	4606      	mov	r6, r0
 800306c:	b950      	cbnz	r0, 8003084 <__ssputs_r+0x5c>
 800306e:	230c      	movs	r3, #12
 8003070:	f8ca 3000 	str.w	r3, [sl]
 8003074:	89a3      	ldrh	r3, [r4, #12]
 8003076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003084:	6921      	ldr	r1, [r4, #16]
 8003086:	464a      	mov	r2, r9
 8003088:	f000 fcc2 	bl	8003a10 <memcpy>
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003096:	81a3      	strh	r3, [r4, #12]
 8003098:	6126      	str	r6, [r4, #16]
 800309a:	6165      	str	r5, [r4, #20]
 800309c:	444e      	add	r6, r9
 800309e:	eba5 0509 	sub.w	r5, r5, r9
 80030a2:	6026      	str	r6, [r4, #0]
 80030a4:	60a5      	str	r5, [r4, #8]
 80030a6:	463e      	mov	r6, r7
 80030a8:	42be      	cmp	r6, r7
 80030aa:	d900      	bls.n	80030ae <__ssputs_r+0x86>
 80030ac:	463e      	mov	r6, r7
 80030ae:	6820      	ldr	r0, [r4, #0]
 80030b0:	4632      	mov	r2, r6
 80030b2:	4641      	mov	r1, r8
 80030b4:	f000 fcba 	bl	8003a2c <memmove>
 80030b8:	68a3      	ldr	r3, [r4, #8]
 80030ba:	1b9b      	subs	r3, r3, r6
 80030bc:	60a3      	str	r3, [r4, #8]
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	4433      	add	r3, r6
 80030c2:	6023      	str	r3, [r4, #0]
 80030c4:	2000      	movs	r0, #0
 80030c6:	e7db      	b.n	8003080 <__ssputs_r+0x58>
 80030c8:	462a      	mov	r2, r5
 80030ca:	f000 fcd5 	bl	8003a78 <_realloc_r>
 80030ce:	4606      	mov	r6, r0
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d1e1      	bne.n	8003098 <__ssputs_r+0x70>
 80030d4:	6921      	ldr	r1, [r4, #16]
 80030d6:	4650      	mov	r0, sl
 80030d8:	f7ff fec6 	bl	8002e68 <_free_r>
 80030dc:	e7c7      	b.n	800306e <__ssputs_r+0x46>
	...

080030e0 <_svfiprintf_r>:
 80030e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e4:	4698      	mov	r8, r3
 80030e6:	898b      	ldrh	r3, [r1, #12]
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	b09d      	sub	sp, #116	; 0x74
 80030ec:	4607      	mov	r7, r0
 80030ee:	460d      	mov	r5, r1
 80030f0:	4614      	mov	r4, r2
 80030f2:	d50e      	bpl.n	8003112 <_svfiprintf_r+0x32>
 80030f4:	690b      	ldr	r3, [r1, #16]
 80030f6:	b963      	cbnz	r3, 8003112 <_svfiprintf_r+0x32>
 80030f8:	2140      	movs	r1, #64	; 0x40
 80030fa:	f7ff ff21 	bl	8002f40 <_malloc_r>
 80030fe:	6028      	str	r0, [r5, #0]
 8003100:	6128      	str	r0, [r5, #16]
 8003102:	b920      	cbnz	r0, 800310e <_svfiprintf_r+0x2e>
 8003104:	230c      	movs	r3, #12
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800310c:	e0d1      	b.n	80032b2 <_svfiprintf_r+0x1d2>
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	616b      	str	r3, [r5, #20]
 8003112:	2300      	movs	r3, #0
 8003114:	9309      	str	r3, [sp, #36]	; 0x24
 8003116:	2320      	movs	r3, #32
 8003118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800311c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003120:	2330      	movs	r3, #48	; 0x30
 8003122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80032cc <_svfiprintf_r+0x1ec>
 8003126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800312a:	f04f 0901 	mov.w	r9, #1
 800312e:	4623      	mov	r3, r4
 8003130:	469a      	mov	sl, r3
 8003132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003136:	b10a      	cbz	r2, 800313c <_svfiprintf_r+0x5c>
 8003138:	2a25      	cmp	r2, #37	; 0x25
 800313a:	d1f9      	bne.n	8003130 <_svfiprintf_r+0x50>
 800313c:	ebba 0b04 	subs.w	fp, sl, r4
 8003140:	d00b      	beq.n	800315a <_svfiprintf_r+0x7a>
 8003142:	465b      	mov	r3, fp
 8003144:	4622      	mov	r2, r4
 8003146:	4629      	mov	r1, r5
 8003148:	4638      	mov	r0, r7
 800314a:	f7ff ff6d 	bl	8003028 <__ssputs_r>
 800314e:	3001      	adds	r0, #1
 8003150:	f000 80aa 	beq.w	80032a8 <_svfiprintf_r+0x1c8>
 8003154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003156:	445a      	add	r2, fp
 8003158:	9209      	str	r2, [sp, #36]	; 0x24
 800315a:	f89a 3000 	ldrb.w	r3, [sl]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80a2 	beq.w	80032a8 <_svfiprintf_r+0x1c8>
 8003164:	2300      	movs	r3, #0
 8003166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800316a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800316e:	f10a 0a01 	add.w	sl, sl, #1
 8003172:	9304      	str	r3, [sp, #16]
 8003174:	9307      	str	r3, [sp, #28]
 8003176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800317a:	931a      	str	r3, [sp, #104]	; 0x68
 800317c:	4654      	mov	r4, sl
 800317e:	2205      	movs	r2, #5
 8003180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003184:	4851      	ldr	r0, [pc, #324]	; (80032cc <_svfiprintf_r+0x1ec>)
 8003186:	f7fd f823 	bl	80001d0 <memchr>
 800318a:	9a04      	ldr	r2, [sp, #16]
 800318c:	b9d8      	cbnz	r0, 80031c6 <_svfiprintf_r+0xe6>
 800318e:	06d0      	lsls	r0, r2, #27
 8003190:	bf44      	itt	mi
 8003192:	2320      	movmi	r3, #32
 8003194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003198:	0711      	lsls	r1, r2, #28
 800319a:	bf44      	itt	mi
 800319c:	232b      	movmi	r3, #43	; 0x2b
 800319e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031a2:	f89a 3000 	ldrb.w	r3, [sl]
 80031a6:	2b2a      	cmp	r3, #42	; 0x2a
 80031a8:	d015      	beq.n	80031d6 <_svfiprintf_r+0xf6>
 80031aa:	9a07      	ldr	r2, [sp, #28]
 80031ac:	4654      	mov	r4, sl
 80031ae:	2000      	movs	r0, #0
 80031b0:	f04f 0c0a 	mov.w	ip, #10
 80031b4:	4621      	mov	r1, r4
 80031b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031ba:	3b30      	subs	r3, #48	; 0x30
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d94e      	bls.n	800325e <_svfiprintf_r+0x17e>
 80031c0:	b1b0      	cbz	r0, 80031f0 <_svfiprintf_r+0x110>
 80031c2:	9207      	str	r2, [sp, #28]
 80031c4:	e014      	b.n	80031f0 <_svfiprintf_r+0x110>
 80031c6:	eba0 0308 	sub.w	r3, r0, r8
 80031ca:	fa09 f303 	lsl.w	r3, r9, r3
 80031ce:	4313      	orrs	r3, r2
 80031d0:	9304      	str	r3, [sp, #16]
 80031d2:	46a2      	mov	sl, r4
 80031d4:	e7d2      	b.n	800317c <_svfiprintf_r+0x9c>
 80031d6:	9b03      	ldr	r3, [sp, #12]
 80031d8:	1d19      	adds	r1, r3, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	9103      	str	r1, [sp, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bfbb      	ittet	lt
 80031e2:	425b      	neglt	r3, r3
 80031e4:	f042 0202 	orrlt.w	r2, r2, #2
 80031e8:	9307      	strge	r3, [sp, #28]
 80031ea:	9307      	strlt	r3, [sp, #28]
 80031ec:	bfb8      	it	lt
 80031ee:	9204      	strlt	r2, [sp, #16]
 80031f0:	7823      	ldrb	r3, [r4, #0]
 80031f2:	2b2e      	cmp	r3, #46	; 0x2e
 80031f4:	d10c      	bne.n	8003210 <_svfiprintf_r+0x130>
 80031f6:	7863      	ldrb	r3, [r4, #1]
 80031f8:	2b2a      	cmp	r3, #42	; 0x2a
 80031fa:	d135      	bne.n	8003268 <_svfiprintf_r+0x188>
 80031fc:	9b03      	ldr	r3, [sp, #12]
 80031fe:	1d1a      	adds	r2, r3, #4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	9203      	str	r2, [sp, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	bfb8      	it	lt
 8003208:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800320c:	3402      	adds	r4, #2
 800320e:	9305      	str	r3, [sp, #20]
 8003210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80032dc <_svfiprintf_r+0x1fc>
 8003214:	7821      	ldrb	r1, [r4, #0]
 8003216:	2203      	movs	r2, #3
 8003218:	4650      	mov	r0, sl
 800321a:	f7fc ffd9 	bl	80001d0 <memchr>
 800321e:	b140      	cbz	r0, 8003232 <_svfiprintf_r+0x152>
 8003220:	2340      	movs	r3, #64	; 0x40
 8003222:	eba0 000a 	sub.w	r0, r0, sl
 8003226:	fa03 f000 	lsl.w	r0, r3, r0
 800322a:	9b04      	ldr	r3, [sp, #16]
 800322c:	4303      	orrs	r3, r0
 800322e:	3401      	adds	r4, #1
 8003230:	9304      	str	r3, [sp, #16]
 8003232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003236:	4826      	ldr	r0, [pc, #152]	; (80032d0 <_svfiprintf_r+0x1f0>)
 8003238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800323c:	2206      	movs	r2, #6
 800323e:	f7fc ffc7 	bl	80001d0 <memchr>
 8003242:	2800      	cmp	r0, #0
 8003244:	d038      	beq.n	80032b8 <_svfiprintf_r+0x1d8>
 8003246:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <_svfiprintf_r+0x1f4>)
 8003248:	bb1b      	cbnz	r3, 8003292 <_svfiprintf_r+0x1b2>
 800324a:	9b03      	ldr	r3, [sp, #12]
 800324c:	3307      	adds	r3, #7
 800324e:	f023 0307 	bic.w	r3, r3, #7
 8003252:	3308      	adds	r3, #8
 8003254:	9303      	str	r3, [sp, #12]
 8003256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003258:	4433      	add	r3, r6
 800325a:	9309      	str	r3, [sp, #36]	; 0x24
 800325c:	e767      	b.n	800312e <_svfiprintf_r+0x4e>
 800325e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003262:	460c      	mov	r4, r1
 8003264:	2001      	movs	r0, #1
 8003266:	e7a5      	b.n	80031b4 <_svfiprintf_r+0xd4>
 8003268:	2300      	movs	r3, #0
 800326a:	3401      	adds	r4, #1
 800326c:	9305      	str	r3, [sp, #20]
 800326e:	4619      	mov	r1, r3
 8003270:	f04f 0c0a 	mov.w	ip, #10
 8003274:	4620      	mov	r0, r4
 8003276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800327a:	3a30      	subs	r2, #48	; 0x30
 800327c:	2a09      	cmp	r2, #9
 800327e:	d903      	bls.n	8003288 <_svfiprintf_r+0x1a8>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0c5      	beq.n	8003210 <_svfiprintf_r+0x130>
 8003284:	9105      	str	r1, [sp, #20]
 8003286:	e7c3      	b.n	8003210 <_svfiprintf_r+0x130>
 8003288:	fb0c 2101 	mla	r1, ip, r1, r2
 800328c:	4604      	mov	r4, r0
 800328e:	2301      	movs	r3, #1
 8003290:	e7f0      	b.n	8003274 <_svfiprintf_r+0x194>
 8003292:	ab03      	add	r3, sp, #12
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	462a      	mov	r2, r5
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <_svfiprintf_r+0x1f8>)
 800329a:	a904      	add	r1, sp, #16
 800329c:	4638      	mov	r0, r7
 800329e:	f3af 8000 	nop.w
 80032a2:	1c42      	adds	r2, r0, #1
 80032a4:	4606      	mov	r6, r0
 80032a6:	d1d6      	bne.n	8003256 <_svfiprintf_r+0x176>
 80032a8:	89ab      	ldrh	r3, [r5, #12]
 80032aa:	065b      	lsls	r3, r3, #25
 80032ac:	f53f af2c 	bmi.w	8003108 <_svfiprintf_r+0x28>
 80032b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032b2:	b01d      	add	sp, #116	; 0x74
 80032b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b8:	ab03      	add	r3, sp, #12
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	462a      	mov	r2, r5
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <_svfiprintf_r+0x1f8>)
 80032c0:	a904      	add	r1, sp, #16
 80032c2:	4638      	mov	r0, r7
 80032c4:	f000 f9d4 	bl	8003670 <_printf_i>
 80032c8:	e7eb      	b.n	80032a2 <_svfiprintf_r+0x1c2>
 80032ca:	bf00      	nop
 80032cc:	08003c04 	.word	0x08003c04
 80032d0:	08003c0e 	.word	0x08003c0e
 80032d4:	00000000 	.word	0x00000000
 80032d8:	08003029 	.word	0x08003029
 80032dc:	08003c0a 	.word	0x08003c0a

080032e0 <__sfputc_r>:
 80032e0:	6893      	ldr	r3, [r2, #8]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	b410      	push	{r4}
 80032e8:	6093      	str	r3, [r2, #8]
 80032ea:	da08      	bge.n	80032fe <__sfputc_r+0x1e>
 80032ec:	6994      	ldr	r4, [r2, #24]
 80032ee:	42a3      	cmp	r3, r4
 80032f0:	db01      	blt.n	80032f6 <__sfputc_r+0x16>
 80032f2:	290a      	cmp	r1, #10
 80032f4:	d103      	bne.n	80032fe <__sfputc_r+0x1e>
 80032f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032fa:	f7ff bad5 	b.w	80028a8 <__swbuf_r>
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	1c58      	adds	r0, r3, #1
 8003302:	6010      	str	r0, [r2, #0]
 8003304:	7019      	strb	r1, [r3, #0]
 8003306:	4608      	mov	r0, r1
 8003308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800330c:	4770      	bx	lr

0800330e <__sfputs_r>:
 800330e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003310:	4606      	mov	r6, r0
 8003312:	460f      	mov	r7, r1
 8003314:	4614      	mov	r4, r2
 8003316:	18d5      	adds	r5, r2, r3
 8003318:	42ac      	cmp	r4, r5
 800331a:	d101      	bne.n	8003320 <__sfputs_r+0x12>
 800331c:	2000      	movs	r0, #0
 800331e:	e007      	b.n	8003330 <__sfputs_r+0x22>
 8003320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003324:	463a      	mov	r2, r7
 8003326:	4630      	mov	r0, r6
 8003328:	f7ff ffda 	bl	80032e0 <__sfputc_r>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d1f3      	bne.n	8003318 <__sfputs_r+0xa>
 8003330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003334 <_vfiprintf_r>:
 8003334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003338:	460d      	mov	r5, r1
 800333a:	b09d      	sub	sp, #116	; 0x74
 800333c:	4614      	mov	r4, r2
 800333e:	4698      	mov	r8, r3
 8003340:	4606      	mov	r6, r0
 8003342:	b118      	cbz	r0, 800334c <_vfiprintf_r+0x18>
 8003344:	6983      	ldr	r3, [r0, #24]
 8003346:	b90b      	cbnz	r3, 800334c <_vfiprintf_r+0x18>
 8003348:	f7ff fc88 	bl	8002c5c <__sinit>
 800334c:	4b89      	ldr	r3, [pc, #548]	; (8003574 <_vfiprintf_r+0x240>)
 800334e:	429d      	cmp	r5, r3
 8003350:	d11b      	bne.n	800338a <_vfiprintf_r+0x56>
 8003352:	6875      	ldr	r5, [r6, #4]
 8003354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003356:	07d9      	lsls	r1, r3, #31
 8003358:	d405      	bmi.n	8003366 <_vfiprintf_r+0x32>
 800335a:	89ab      	ldrh	r3, [r5, #12]
 800335c:	059a      	lsls	r2, r3, #22
 800335e:	d402      	bmi.n	8003366 <_vfiprintf_r+0x32>
 8003360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003362:	f7ff fd19 	bl	8002d98 <__retarget_lock_acquire_recursive>
 8003366:	89ab      	ldrh	r3, [r5, #12]
 8003368:	071b      	lsls	r3, r3, #28
 800336a:	d501      	bpl.n	8003370 <_vfiprintf_r+0x3c>
 800336c:	692b      	ldr	r3, [r5, #16]
 800336e:	b9eb      	cbnz	r3, 80033ac <_vfiprintf_r+0x78>
 8003370:	4629      	mov	r1, r5
 8003372:	4630      	mov	r0, r6
 8003374:	f7ff faea 	bl	800294c <__swsetup_r>
 8003378:	b1c0      	cbz	r0, 80033ac <_vfiprintf_r+0x78>
 800337a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800337c:	07dc      	lsls	r4, r3, #31
 800337e:	d50e      	bpl.n	800339e <_vfiprintf_r+0x6a>
 8003380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003384:	b01d      	add	sp, #116	; 0x74
 8003386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800338a:	4b7b      	ldr	r3, [pc, #492]	; (8003578 <_vfiprintf_r+0x244>)
 800338c:	429d      	cmp	r5, r3
 800338e:	d101      	bne.n	8003394 <_vfiprintf_r+0x60>
 8003390:	68b5      	ldr	r5, [r6, #8]
 8003392:	e7df      	b.n	8003354 <_vfiprintf_r+0x20>
 8003394:	4b79      	ldr	r3, [pc, #484]	; (800357c <_vfiprintf_r+0x248>)
 8003396:	429d      	cmp	r5, r3
 8003398:	bf08      	it	eq
 800339a:	68f5      	ldreq	r5, [r6, #12]
 800339c:	e7da      	b.n	8003354 <_vfiprintf_r+0x20>
 800339e:	89ab      	ldrh	r3, [r5, #12]
 80033a0:	0598      	lsls	r0, r3, #22
 80033a2:	d4ed      	bmi.n	8003380 <_vfiprintf_r+0x4c>
 80033a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033a6:	f7ff fcf8 	bl	8002d9a <__retarget_lock_release_recursive>
 80033aa:	e7e9      	b.n	8003380 <_vfiprintf_r+0x4c>
 80033ac:	2300      	movs	r3, #0
 80033ae:	9309      	str	r3, [sp, #36]	; 0x24
 80033b0:	2320      	movs	r3, #32
 80033b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ba:	2330      	movs	r3, #48	; 0x30
 80033bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003580 <_vfiprintf_r+0x24c>
 80033c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033c4:	f04f 0901 	mov.w	r9, #1
 80033c8:	4623      	mov	r3, r4
 80033ca:	469a      	mov	sl, r3
 80033cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033d0:	b10a      	cbz	r2, 80033d6 <_vfiprintf_r+0xa2>
 80033d2:	2a25      	cmp	r2, #37	; 0x25
 80033d4:	d1f9      	bne.n	80033ca <_vfiprintf_r+0x96>
 80033d6:	ebba 0b04 	subs.w	fp, sl, r4
 80033da:	d00b      	beq.n	80033f4 <_vfiprintf_r+0xc0>
 80033dc:	465b      	mov	r3, fp
 80033de:	4622      	mov	r2, r4
 80033e0:	4629      	mov	r1, r5
 80033e2:	4630      	mov	r0, r6
 80033e4:	f7ff ff93 	bl	800330e <__sfputs_r>
 80033e8:	3001      	adds	r0, #1
 80033ea:	f000 80aa 	beq.w	8003542 <_vfiprintf_r+0x20e>
 80033ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033f0:	445a      	add	r2, fp
 80033f2:	9209      	str	r2, [sp, #36]	; 0x24
 80033f4:	f89a 3000 	ldrb.w	r3, [sl]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a2 	beq.w	8003542 <_vfiprintf_r+0x20e>
 80033fe:	2300      	movs	r3, #0
 8003400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003408:	f10a 0a01 	add.w	sl, sl, #1
 800340c:	9304      	str	r3, [sp, #16]
 800340e:	9307      	str	r3, [sp, #28]
 8003410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003414:	931a      	str	r3, [sp, #104]	; 0x68
 8003416:	4654      	mov	r4, sl
 8003418:	2205      	movs	r2, #5
 800341a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800341e:	4858      	ldr	r0, [pc, #352]	; (8003580 <_vfiprintf_r+0x24c>)
 8003420:	f7fc fed6 	bl	80001d0 <memchr>
 8003424:	9a04      	ldr	r2, [sp, #16]
 8003426:	b9d8      	cbnz	r0, 8003460 <_vfiprintf_r+0x12c>
 8003428:	06d1      	lsls	r1, r2, #27
 800342a:	bf44      	itt	mi
 800342c:	2320      	movmi	r3, #32
 800342e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003432:	0713      	lsls	r3, r2, #28
 8003434:	bf44      	itt	mi
 8003436:	232b      	movmi	r3, #43	; 0x2b
 8003438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800343c:	f89a 3000 	ldrb.w	r3, [sl]
 8003440:	2b2a      	cmp	r3, #42	; 0x2a
 8003442:	d015      	beq.n	8003470 <_vfiprintf_r+0x13c>
 8003444:	9a07      	ldr	r2, [sp, #28]
 8003446:	4654      	mov	r4, sl
 8003448:	2000      	movs	r0, #0
 800344a:	f04f 0c0a 	mov.w	ip, #10
 800344e:	4621      	mov	r1, r4
 8003450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003454:	3b30      	subs	r3, #48	; 0x30
 8003456:	2b09      	cmp	r3, #9
 8003458:	d94e      	bls.n	80034f8 <_vfiprintf_r+0x1c4>
 800345a:	b1b0      	cbz	r0, 800348a <_vfiprintf_r+0x156>
 800345c:	9207      	str	r2, [sp, #28]
 800345e:	e014      	b.n	800348a <_vfiprintf_r+0x156>
 8003460:	eba0 0308 	sub.w	r3, r0, r8
 8003464:	fa09 f303 	lsl.w	r3, r9, r3
 8003468:	4313      	orrs	r3, r2
 800346a:	9304      	str	r3, [sp, #16]
 800346c:	46a2      	mov	sl, r4
 800346e:	e7d2      	b.n	8003416 <_vfiprintf_r+0xe2>
 8003470:	9b03      	ldr	r3, [sp, #12]
 8003472:	1d19      	adds	r1, r3, #4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	9103      	str	r1, [sp, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	bfbb      	ittet	lt
 800347c:	425b      	neglt	r3, r3
 800347e:	f042 0202 	orrlt.w	r2, r2, #2
 8003482:	9307      	strge	r3, [sp, #28]
 8003484:	9307      	strlt	r3, [sp, #28]
 8003486:	bfb8      	it	lt
 8003488:	9204      	strlt	r2, [sp, #16]
 800348a:	7823      	ldrb	r3, [r4, #0]
 800348c:	2b2e      	cmp	r3, #46	; 0x2e
 800348e:	d10c      	bne.n	80034aa <_vfiprintf_r+0x176>
 8003490:	7863      	ldrb	r3, [r4, #1]
 8003492:	2b2a      	cmp	r3, #42	; 0x2a
 8003494:	d135      	bne.n	8003502 <_vfiprintf_r+0x1ce>
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	1d1a      	adds	r2, r3, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	9203      	str	r2, [sp, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bfb8      	it	lt
 80034a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80034a6:	3402      	adds	r4, #2
 80034a8:	9305      	str	r3, [sp, #20]
 80034aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003590 <_vfiprintf_r+0x25c>
 80034ae:	7821      	ldrb	r1, [r4, #0]
 80034b0:	2203      	movs	r2, #3
 80034b2:	4650      	mov	r0, sl
 80034b4:	f7fc fe8c 	bl	80001d0 <memchr>
 80034b8:	b140      	cbz	r0, 80034cc <_vfiprintf_r+0x198>
 80034ba:	2340      	movs	r3, #64	; 0x40
 80034bc:	eba0 000a 	sub.w	r0, r0, sl
 80034c0:	fa03 f000 	lsl.w	r0, r3, r0
 80034c4:	9b04      	ldr	r3, [sp, #16]
 80034c6:	4303      	orrs	r3, r0
 80034c8:	3401      	adds	r4, #1
 80034ca:	9304      	str	r3, [sp, #16]
 80034cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034d0:	482c      	ldr	r0, [pc, #176]	; (8003584 <_vfiprintf_r+0x250>)
 80034d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034d6:	2206      	movs	r2, #6
 80034d8:	f7fc fe7a 	bl	80001d0 <memchr>
 80034dc:	2800      	cmp	r0, #0
 80034de:	d03f      	beq.n	8003560 <_vfiprintf_r+0x22c>
 80034e0:	4b29      	ldr	r3, [pc, #164]	; (8003588 <_vfiprintf_r+0x254>)
 80034e2:	bb1b      	cbnz	r3, 800352c <_vfiprintf_r+0x1f8>
 80034e4:	9b03      	ldr	r3, [sp, #12]
 80034e6:	3307      	adds	r3, #7
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	3308      	adds	r3, #8
 80034ee:	9303      	str	r3, [sp, #12]
 80034f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034f2:	443b      	add	r3, r7
 80034f4:	9309      	str	r3, [sp, #36]	; 0x24
 80034f6:	e767      	b.n	80033c8 <_vfiprintf_r+0x94>
 80034f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80034fc:	460c      	mov	r4, r1
 80034fe:	2001      	movs	r0, #1
 8003500:	e7a5      	b.n	800344e <_vfiprintf_r+0x11a>
 8003502:	2300      	movs	r3, #0
 8003504:	3401      	adds	r4, #1
 8003506:	9305      	str	r3, [sp, #20]
 8003508:	4619      	mov	r1, r3
 800350a:	f04f 0c0a 	mov.w	ip, #10
 800350e:	4620      	mov	r0, r4
 8003510:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003514:	3a30      	subs	r2, #48	; 0x30
 8003516:	2a09      	cmp	r2, #9
 8003518:	d903      	bls.n	8003522 <_vfiprintf_r+0x1ee>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0c5      	beq.n	80034aa <_vfiprintf_r+0x176>
 800351e:	9105      	str	r1, [sp, #20]
 8003520:	e7c3      	b.n	80034aa <_vfiprintf_r+0x176>
 8003522:	fb0c 2101 	mla	r1, ip, r1, r2
 8003526:	4604      	mov	r4, r0
 8003528:	2301      	movs	r3, #1
 800352a:	e7f0      	b.n	800350e <_vfiprintf_r+0x1da>
 800352c:	ab03      	add	r3, sp, #12
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	462a      	mov	r2, r5
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <_vfiprintf_r+0x258>)
 8003534:	a904      	add	r1, sp, #16
 8003536:	4630      	mov	r0, r6
 8003538:	f3af 8000 	nop.w
 800353c:	4607      	mov	r7, r0
 800353e:	1c78      	adds	r0, r7, #1
 8003540:	d1d6      	bne.n	80034f0 <_vfiprintf_r+0x1bc>
 8003542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003544:	07d9      	lsls	r1, r3, #31
 8003546:	d405      	bmi.n	8003554 <_vfiprintf_r+0x220>
 8003548:	89ab      	ldrh	r3, [r5, #12]
 800354a:	059a      	lsls	r2, r3, #22
 800354c:	d402      	bmi.n	8003554 <_vfiprintf_r+0x220>
 800354e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003550:	f7ff fc23 	bl	8002d9a <__retarget_lock_release_recursive>
 8003554:	89ab      	ldrh	r3, [r5, #12]
 8003556:	065b      	lsls	r3, r3, #25
 8003558:	f53f af12 	bmi.w	8003380 <_vfiprintf_r+0x4c>
 800355c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800355e:	e711      	b.n	8003384 <_vfiprintf_r+0x50>
 8003560:	ab03      	add	r3, sp, #12
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	462a      	mov	r2, r5
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <_vfiprintf_r+0x258>)
 8003568:	a904      	add	r1, sp, #16
 800356a:	4630      	mov	r0, r6
 800356c:	f000 f880 	bl	8003670 <_printf_i>
 8003570:	e7e4      	b.n	800353c <_vfiprintf_r+0x208>
 8003572:	bf00      	nop
 8003574:	08003bc4 	.word	0x08003bc4
 8003578:	08003be4 	.word	0x08003be4
 800357c:	08003ba4 	.word	0x08003ba4
 8003580:	08003c04 	.word	0x08003c04
 8003584:	08003c0e 	.word	0x08003c0e
 8003588:	00000000 	.word	0x00000000
 800358c:	0800330f 	.word	0x0800330f
 8003590:	08003c0a 	.word	0x08003c0a

08003594 <_printf_common>:
 8003594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003598:	4616      	mov	r6, r2
 800359a:	4699      	mov	r9, r3
 800359c:	688a      	ldr	r2, [r1, #8]
 800359e:	690b      	ldr	r3, [r1, #16]
 80035a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035a4:	4293      	cmp	r3, r2
 80035a6:	bfb8      	it	lt
 80035a8:	4613      	movlt	r3, r2
 80035aa:	6033      	str	r3, [r6, #0]
 80035ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035b0:	4607      	mov	r7, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	b10a      	cbz	r2, 80035ba <_printf_common+0x26>
 80035b6:	3301      	adds	r3, #1
 80035b8:	6033      	str	r3, [r6, #0]
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	0699      	lsls	r1, r3, #26
 80035be:	bf42      	ittt	mi
 80035c0:	6833      	ldrmi	r3, [r6, #0]
 80035c2:	3302      	addmi	r3, #2
 80035c4:	6033      	strmi	r3, [r6, #0]
 80035c6:	6825      	ldr	r5, [r4, #0]
 80035c8:	f015 0506 	ands.w	r5, r5, #6
 80035cc:	d106      	bne.n	80035dc <_printf_common+0x48>
 80035ce:	f104 0a19 	add.w	sl, r4, #25
 80035d2:	68e3      	ldr	r3, [r4, #12]
 80035d4:	6832      	ldr	r2, [r6, #0]
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	42ab      	cmp	r3, r5
 80035da:	dc26      	bgt.n	800362a <_printf_common+0x96>
 80035dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035e0:	1e13      	subs	r3, r2, #0
 80035e2:	6822      	ldr	r2, [r4, #0]
 80035e4:	bf18      	it	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	0692      	lsls	r2, r2, #26
 80035ea:	d42b      	bmi.n	8003644 <_printf_common+0xb0>
 80035ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035f0:	4649      	mov	r1, r9
 80035f2:	4638      	mov	r0, r7
 80035f4:	47c0      	blx	r8
 80035f6:	3001      	adds	r0, #1
 80035f8:	d01e      	beq.n	8003638 <_printf_common+0xa4>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	68e5      	ldr	r5, [r4, #12]
 80035fe:	6832      	ldr	r2, [r6, #0]
 8003600:	f003 0306 	and.w	r3, r3, #6
 8003604:	2b04      	cmp	r3, #4
 8003606:	bf08      	it	eq
 8003608:	1aad      	subeq	r5, r5, r2
 800360a:	68a3      	ldr	r3, [r4, #8]
 800360c:	6922      	ldr	r2, [r4, #16]
 800360e:	bf0c      	ite	eq
 8003610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003614:	2500      	movne	r5, #0
 8003616:	4293      	cmp	r3, r2
 8003618:	bfc4      	itt	gt
 800361a:	1a9b      	subgt	r3, r3, r2
 800361c:	18ed      	addgt	r5, r5, r3
 800361e:	2600      	movs	r6, #0
 8003620:	341a      	adds	r4, #26
 8003622:	42b5      	cmp	r5, r6
 8003624:	d11a      	bne.n	800365c <_printf_common+0xc8>
 8003626:	2000      	movs	r0, #0
 8003628:	e008      	b.n	800363c <_printf_common+0xa8>
 800362a:	2301      	movs	r3, #1
 800362c:	4652      	mov	r2, sl
 800362e:	4649      	mov	r1, r9
 8003630:	4638      	mov	r0, r7
 8003632:	47c0      	blx	r8
 8003634:	3001      	adds	r0, #1
 8003636:	d103      	bne.n	8003640 <_printf_common+0xac>
 8003638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800363c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003640:	3501      	adds	r5, #1
 8003642:	e7c6      	b.n	80035d2 <_printf_common+0x3e>
 8003644:	18e1      	adds	r1, r4, r3
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	2030      	movs	r0, #48	; 0x30
 800364a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800364e:	4422      	add	r2, r4
 8003650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003658:	3302      	adds	r3, #2
 800365a:	e7c7      	b.n	80035ec <_printf_common+0x58>
 800365c:	2301      	movs	r3, #1
 800365e:	4622      	mov	r2, r4
 8003660:	4649      	mov	r1, r9
 8003662:	4638      	mov	r0, r7
 8003664:	47c0      	blx	r8
 8003666:	3001      	adds	r0, #1
 8003668:	d0e6      	beq.n	8003638 <_printf_common+0xa4>
 800366a:	3601      	adds	r6, #1
 800366c:	e7d9      	b.n	8003622 <_printf_common+0x8e>
	...

08003670 <_printf_i>:
 8003670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003674:	7e0f      	ldrb	r7, [r1, #24]
 8003676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003678:	2f78      	cmp	r7, #120	; 0x78
 800367a:	4691      	mov	r9, r2
 800367c:	4680      	mov	r8, r0
 800367e:	460c      	mov	r4, r1
 8003680:	469a      	mov	sl, r3
 8003682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003686:	d807      	bhi.n	8003698 <_printf_i+0x28>
 8003688:	2f62      	cmp	r7, #98	; 0x62
 800368a:	d80a      	bhi.n	80036a2 <_printf_i+0x32>
 800368c:	2f00      	cmp	r7, #0
 800368e:	f000 80d8 	beq.w	8003842 <_printf_i+0x1d2>
 8003692:	2f58      	cmp	r7, #88	; 0x58
 8003694:	f000 80a3 	beq.w	80037de <_printf_i+0x16e>
 8003698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800369c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036a0:	e03a      	b.n	8003718 <_printf_i+0xa8>
 80036a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036a6:	2b15      	cmp	r3, #21
 80036a8:	d8f6      	bhi.n	8003698 <_printf_i+0x28>
 80036aa:	a101      	add	r1, pc, #4	; (adr r1, 80036b0 <_printf_i+0x40>)
 80036ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036b0:	08003709 	.word	0x08003709
 80036b4:	0800371d 	.word	0x0800371d
 80036b8:	08003699 	.word	0x08003699
 80036bc:	08003699 	.word	0x08003699
 80036c0:	08003699 	.word	0x08003699
 80036c4:	08003699 	.word	0x08003699
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	08003699 	.word	0x08003699
 80036d0:	08003699 	.word	0x08003699
 80036d4:	08003699 	.word	0x08003699
 80036d8:	08003699 	.word	0x08003699
 80036dc:	08003829 	.word	0x08003829
 80036e0:	0800374d 	.word	0x0800374d
 80036e4:	0800380b 	.word	0x0800380b
 80036e8:	08003699 	.word	0x08003699
 80036ec:	08003699 	.word	0x08003699
 80036f0:	0800384b 	.word	0x0800384b
 80036f4:	08003699 	.word	0x08003699
 80036f8:	0800374d 	.word	0x0800374d
 80036fc:	08003699 	.word	0x08003699
 8003700:	08003699 	.word	0x08003699
 8003704:	08003813 	.word	0x08003813
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	1d1a      	adds	r2, r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	602a      	str	r2, [r5, #0]
 8003710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003718:	2301      	movs	r3, #1
 800371a:	e0a3      	b.n	8003864 <_printf_i+0x1f4>
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	6829      	ldr	r1, [r5, #0]
 8003720:	0606      	lsls	r6, r0, #24
 8003722:	f101 0304 	add.w	r3, r1, #4
 8003726:	d50a      	bpl.n	800373e <_printf_i+0xce>
 8003728:	680e      	ldr	r6, [r1, #0]
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	2e00      	cmp	r6, #0
 800372e:	da03      	bge.n	8003738 <_printf_i+0xc8>
 8003730:	232d      	movs	r3, #45	; 0x2d
 8003732:	4276      	negs	r6, r6
 8003734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003738:	485e      	ldr	r0, [pc, #376]	; (80038b4 <_printf_i+0x244>)
 800373a:	230a      	movs	r3, #10
 800373c:	e019      	b.n	8003772 <_printf_i+0x102>
 800373e:	680e      	ldr	r6, [r1, #0]
 8003740:	602b      	str	r3, [r5, #0]
 8003742:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003746:	bf18      	it	ne
 8003748:	b236      	sxthne	r6, r6
 800374a:	e7ef      	b.n	800372c <_printf_i+0xbc>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	6820      	ldr	r0, [r4, #0]
 8003750:	1d19      	adds	r1, r3, #4
 8003752:	6029      	str	r1, [r5, #0]
 8003754:	0601      	lsls	r1, r0, #24
 8003756:	d501      	bpl.n	800375c <_printf_i+0xec>
 8003758:	681e      	ldr	r6, [r3, #0]
 800375a:	e002      	b.n	8003762 <_printf_i+0xf2>
 800375c:	0646      	lsls	r6, r0, #25
 800375e:	d5fb      	bpl.n	8003758 <_printf_i+0xe8>
 8003760:	881e      	ldrh	r6, [r3, #0]
 8003762:	4854      	ldr	r0, [pc, #336]	; (80038b4 <_printf_i+0x244>)
 8003764:	2f6f      	cmp	r7, #111	; 0x6f
 8003766:	bf0c      	ite	eq
 8003768:	2308      	moveq	r3, #8
 800376a:	230a      	movne	r3, #10
 800376c:	2100      	movs	r1, #0
 800376e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003772:	6865      	ldr	r5, [r4, #4]
 8003774:	60a5      	str	r5, [r4, #8]
 8003776:	2d00      	cmp	r5, #0
 8003778:	bfa2      	ittt	ge
 800377a:	6821      	ldrge	r1, [r4, #0]
 800377c:	f021 0104 	bicge.w	r1, r1, #4
 8003780:	6021      	strge	r1, [r4, #0]
 8003782:	b90e      	cbnz	r6, 8003788 <_printf_i+0x118>
 8003784:	2d00      	cmp	r5, #0
 8003786:	d04d      	beq.n	8003824 <_printf_i+0x1b4>
 8003788:	4615      	mov	r5, r2
 800378a:	fbb6 f1f3 	udiv	r1, r6, r3
 800378e:	fb03 6711 	mls	r7, r3, r1, r6
 8003792:	5dc7      	ldrb	r7, [r0, r7]
 8003794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003798:	4637      	mov	r7, r6
 800379a:	42bb      	cmp	r3, r7
 800379c:	460e      	mov	r6, r1
 800379e:	d9f4      	bls.n	800378a <_printf_i+0x11a>
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d10b      	bne.n	80037bc <_printf_i+0x14c>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	07de      	lsls	r6, r3, #31
 80037a8:	d508      	bpl.n	80037bc <_printf_i+0x14c>
 80037aa:	6923      	ldr	r3, [r4, #16]
 80037ac:	6861      	ldr	r1, [r4, #4]
 80037ae:	4299      	cmp	r1, r3
 80037b0:	bfde      	ittt	le
 80037b2:	2330      	movle	r3, #48	; 0x30
 80037b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80037bc:	1b52      	subs	r2, r2, r5
 80037be:	6122      	str	r2, [r4, #16]
 80037c0:	f8cd a000 	str.w	sl, [sp]
 80037c4:	464b      	mov	r3, r9
 80037c6:	aa03      	add	r2, sp, #12
 80037c8:	4621      	mov	r1, r4
 80037ca:	4640      	mov	r0, r8
 80037cc:	f7ff fee2 	bl	8003594 <_printf_common>
 80037d0:	3001      	adds	r0, #1
 80037d2:	d14c      	bne.n	800386e <_printf_i+0x1fe>
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d8:	b004      	add	sp, #16
 80037da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037de:	4835      	ldr	r0, [pc, #212]	; (80038b4 <_printf_i+0x244>)
 80037e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037e4:	6829      	ldr	r1, [r5, #0]
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80037ec:	6029      	str	r1, [r5, #0]
 80037ee:	061d      	lsls	r5, r3, #24
 80037f0:	d514      	bpl.n	800381c <_printf_i+0x1ac>
 80037f2:	07df      	lsls	r7, r3, #31
 80037f4:	bf44      	itt	mi
 80037f6:	f043 0320 	orrmi.w	r3, r3, #32
 80037fa:	6023      	strmi	r3, [r4, #0]
 80037fc:	b91e      	cbnz	r6, 8003806 <_printf_i+0x196>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	f023 0320 	bic.w	r3, r3, #32
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	2310      	movs	r3, #16
 8003808:	e7b0      	b.n	800376c <_printf_i+0xfc>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	2378      	movs	r3, #120	; 0x78
 8003814:	4828      	ldr	r0, [pc, #160]	; (80038b8 <_printf_i+0x248>)
 8003816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800381a:	e7e3      	b.n	80037e4 <_printf_i+0x174>
 800381c:	0659      	lsls	r1, r3, #25
 800381e:	bf48      	it	mi
 8003820:	b2b6      	uxthmi	r6, r6
 8003822:	e7e6      	b.n	80037f2 <_printf_i+0x182>
 8003824:	4615      	mov	r5, r2
 8003826:	e7bb      	b.n	80037a0 <_printf_i+0x130>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	6826      	ldr	r6, [r4, #0]
 800382c:	6961      	ldr	r1, [r4, #20]
 800382e:	1d18      	adds	r0, r3, #4
 8003830:	6028      	str	r0, [r5, #0]
 8003832:	0635      	lsls	r5, r6, #24
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	d501      	bpl.n	800383c <_printf_i+0x1cc>
 8003838:	6019      	str	r1, [r3, #0]
 800383a:	e002      	b.n	8003842 <_printf_i+0x1d2>
 800383c:	0670      	lsls	r0, r6, #25
 800383e:	d5fb      	bpl.n	8003838 <_printf_i+0x1c8>
 8003840:	8019      	strh	r1, [r3, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	6123      	str	r3, [r4, #16]
 8003846:	4615      	mov	r5, r2
 8003848:	e7ba      	b.n	80037c0 <_printf_i+0x150>
 800384a:	682b      	ldr	r3, [r5, #0]
 800384c:	1d1a      	adds	r2, r3, #4
 800384e:	602a      	str	r2, [r5, #0]
 8003850:	681d      	ldr	r5, [r3, #0]
 8003852:	6862      	ldr	r2, [r4, #4]
 8003854:	2100      	movs	r1, #0
 8003856:	4628      	mov	r0, r5
 8003858:	f7fc fcba 	bl	80001d0 <memchr>
 800385c:	b108      	cbz	r0, 8003862 <_printf_i+0x1f2>
 800385e:	1b40      	subs	r0, r0, r5
 8003860:	6060      	str	r0, [r4, #4]
 8003862:	6863      	ldr	r3, [r4, #4]
 8003864:	6123      	str	r3, [r4, #16]
 8003866:	2300      	movs	r3, #0
 8003868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800386c:	e7a8      	b.n	80037c0 <_printf_i+0x150>
 800386e:	6923      	ldr	r3, [r4, #16]
 8003870:	462a      	mov	r2, r5
 8003872:	4649      	mov	r1, r9
 8003874:	4640      	mov	r0, r8
 8003876:	47d0      	blx	sl
 8003878:	3001      	adds	r0, #1
 800387a:	d0ab      	beq.n	80037d4 <_printf_i+0x164>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	079b      	lsls	r3, r3, #30
 8003880:	d413      	bmi.n	80038aa <_printf_i+0x23a>
 8003882:	68e0      	ldr	r0, [r4, #12]
 8003884:	9b03      	ldr	r3, [sp, #12]
 8003886:	4298      	cmp	r0, r3
 8003888:	bfb8      	it	lt
 800388a:	4618      	movlt	r0, r3
 800388c:	e7a4      	b.n	80037d8 <_printf_i+0x168>
 800388e:	2301      	movs	r3, #1
 8003890:	4632      	mov	r2, r6
 8003892:	4649      	mov	r1, r9
 8003894:	4640      	mov	r0, r8
 8003896:	47d0      	blx	sl
 8003898:	3001      	adds	r0, #1
 800389a:	d09b      	beq.n	80037d4 <_printf_i+0x164>
 800389c:	3501      	adds	r5, #1
 800389e:	68e3      	ldr	r3, [r4, #12]
 80038a0:	9903      	ldr	r1, [sp, #12]
 80038a2:	1a5b      	subs	r3, r3, r1
 80038a4:	42ab      	cmp	r3, r5
 80038a6:	dcf2      	bgt.n	800388e <_printf_i+0x21e>
 80038a8:	e7eb      	b.n	8003882 <_printf_i+0x212>
 80038aa:	2500      	movs	r5, #0
 80038ac:	f104 0619 	add.w	r6, r4, #25
 80038b0:	e7f5      	b.n	800389e <_printf_i+0x22e>
 80038b2:	bf00      	nop
 80038b4:	08003c15 	.word	0x08003c15
 80038b8:	08003c26 	.word	0x08003c26

080038bc <_sbrk_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	4d06      	ldr	r5, [pc, #24]	; (80038d8 <_sbrk_r+0x1c>)
 80038c0:	2300      	movs	r3, #0
 80038c2:	4604      	mov	r4, r0
 80038c4:	4608      	mov	r0, r1
 80038c6:	602b      	str	r3, [r5, #0]
 80038c8:	f7fd f87c 	bl	80009c4 <_sbrk>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d102      	bne.n	80038d6 <_sbrk_r+0x1a>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	b103      	cbz	r3, 80038d6 <_sbrk_r+0x1a>
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	bd38      	pop	{r3, r4, r5, pc}
 80038d8:	2000012c 	.word	0x2000012c

080038dc <__sread>:
 80038dc:	b510      	push	{r4, lr}
 80038de:	460c      	mov	r4, r1
 80038e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e4:	f000 f8f8 	bl	8003ad8 <_read_r>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	bfab      	itete	ge
 80038ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038ee:	89a3      	ldrhlt	r3, [r4, #12]
 80038f0:	181b      	addge	r3, r3, r0
 80038f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038f6:	bfac      	ite	ge
 80038f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80038fa:	81a3      	strhlt	r3, [r4, #12]
 80038fc:	bd10      	pop	{r4, pc}

080038fe <__swrite>:
 80038fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003902:	461f      	mov	r7, r3
 8003904:	898b      	ldrh	r3, [r1, #12]
 8003906:	05db      	lsls	r3, r3, #23
 8003908:	4605      	mov	r5, r0
 800390a:	460c      	mov	r4, r1
 800390c:	4616      	mov	r6, r2
 800390e:	d505      	bpl.n	800391c <__swrite+0x1e>
 8003910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003914:	2302      	movs	r3, #2
 8003916:	2200      	movs	r2, #0
 8003918:	f000 f868 	bl	80039ec <_lseek_r>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003926:	81a3      	strh	r3, [r4, #12]
 8003928:	4632      	mov	r2, r6
 800392a:	463b      	mov	r3, r7
 800392c:	4628      	mov	r0, r5
 800392e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003932:	f000 b817 	b.w	8003964 <_write_r>

08003936 <__sseek>:
 8003936:	b510      	push	{r4, lr}
 8003938:	460c      	mov	r4, r1
 800393a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800393e:	f000 f855 	bl	80039ec <_lseek_r>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	bf15      	itete	ne
 8003948:	6560      	strne	r0, [r4, #84]	; 0x54
 800394a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800394e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003952:	81a3      	strheq	r3, [r4, #12]
 8003954:	bf18      	it	ne
 8003956:	81a3      	strhne	r3, [r4, #12]
 8003958:	bd10      	pop	{r4, pc}

0800395a <__sclose>:
 800395a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800395e:	f000 b813 	b.w	8003988 <_close_r>
	...

08003964 <_write_r>:
 8003964:	b538      	push	{r3, r4, r5, lr}
 8003966:	4d07      	ldr	r5, [pc, #28]	; (8003984 <_write_r+0x20>)
 8003968:	4604      	mov	r4, r0
 800396a:	4608      	mov	r0, r1
 800396c:	4611      	mov	r1, r2
 800396e:	2200      	movs	r2, #0
 8003970:	602a      	str	r2, [r5, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	f7fc ffd5 	bl	8000922 <_write>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	d102      	bne.n	8003982 <_write_r+0x1e>
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	b103      	cbz	r3, 8003982 <_write_r+0x1e>
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	bd38      	pop	{r3, r4, r5, pc}
 8003984:	2000012c 	.word	0x2000012c

08003988 <_close_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	4d06      	ldr	r5, [pc, #24]	; (80039a4 <_close_r+0x1c>)
 800398c:	2300      	movs	r3, #0
 800398e:	4604      	mov	r4, r0
 8003990:	4608      	mov	r0, r1
 8003992:	602b      	str	r3, [r5, #0]
 8003994:	f7fc ffe1 	bl	800095a <_close>
 8003998:	1c43      	adds	r3, r0, #1
 800399a:	d102      	bne.n	80039a2 <_close_r+0x1a>
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	b103      	cbz	r3, 80039a2 <_close_r+0x1a>
 80039a0:	6023      	str	r3, [r4, #0]
 80039a2:	bd38      	pop	{r3, r4, r5, pc}
 80039a4:	2000012c 	.word	0x2000012c

080039a8 <_fstat_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	4d07      	ldr	r5, [pc, #28]	; (80039c8 <_fstat_r+0x20>)
 80039ac:	2300      	movs	r3, #0
 80039ae:	4604      	mov	r4, r0
 80039b0:	4608      	mov	r0, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	602b      	str	r3, [r5, #0]
 80039b6:	f7fc ffdc 	bl	8000972 <_fstat>
 80039ba:	1c43      	adds	r3, r0, #1
 80039bc:	d102      	bne.n	80039c4 <_fstat_r+0x1c>
 80039be:	682b      	ldr	r3, [r5, #0]
 80039c0:	b103      	cbz	r3, 80039c4 <_fstat_r+0x1c>
 80039c2:	6023      	str	r3, [r4, #0]
 80039c4:	bd38      	pop	{r3, r4, r5, pc}
 80039c6:	bf00      	nop
 80039c8:	2000012c 	.word	0x2000012c

080039cc <_isatty_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	4d06      	ldr	r5, [pc, #24]	; (80039e8 <_isatty_r+0x1c>)
 80039d0:	2300      	movs	r3, #0
 80039d2:	4604      	mov	r4, r0
 80039d4:	4608      	mov	r0, r1
 80039d6:	602b      	str	r3, [r5, #0]
 80039d8:	f7fc ffdb 	bl	8000992 <_isatty>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	d102      	bne.n	80039e6 <_isatty_r+0x1a>
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	b103      	cbz	r3, 80039e6 <_isatty_r+0x1a>
 80039e4:	6023      	str	r3, [r4, #0]
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	2000012c 	.word	0x2000012c

080039ec <_lseek_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	4d07      	ldr	r5, [pc, #28]	; (8003a0c <_lseek_r+0x20>)
 80039f0:	4604      	mov	r4, r0
 80039f2:	4608      	mov	r0, r1
 80039f4:	4611      	mov	r1, r2
 80039f6:	2200      	movs	r2, #0
 80039f8:	602a      	str	r2, [r5, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f7fc ffd4 	bl	80009a8 <_lseek>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d102      	bne.n	8003a0a <_lseek_r+0x1e>
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	b103      	cbz	r3, 8003a0a <_lseek_r+0x1e>
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	2000012c 	.word	0x2000012c

08003a10 <memcpy>:
 8003a10:	440a      	add	r2, r1
 8003a12:	4291      	cmp	r1, r2
 8003a14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a18:	d100      	bne.n	8003a1c <memcpy+0xc>
 8003a1a:	4770      	bx	lr
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a26:	4291      	cmp	r1, r2
 8003a28:	d1f9      	bne.n	8003a1e <memcpy+0xe>
 8003a2a:	bd10      	pop	{r4, pc}

08003a2c <memmove>:
 8003a2c:	4288      	cmp	r0, r1
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	eb01 0402 	add.w	r4, r1, r2
 8003a34:	d902      	bls.n	8003a3c <memmove+0x10>
 8003a36:	4284      	cmp	r4, r0
 8003a38:	4623      	mov	r3, r4
 8003a3a:	d807      	bhi.n	8003a4c <memmove+0x20>
 8003a3c:	1e43      	subs	r3, r0, #1
 8003a3e:	42a1      	cmp	r1, r4
 8003a40:	d008      	beq.n	8003a54 <memmove+0x28>
 8003a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a4a:	e7f8      	b.n	8003a3e <memmove+0x12>
 8003a4c:	4402      	add	r2, r0
 8003a4e:	4601      	mov	r1, r0
 8003a50:	428a      	cmp	r2, r1
 8003a52:	d100      	bne.n	8003a56 <memmove+0x2a>
 8003a54:	bd10      	pop	{r4, pc}
 8003a56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a5e:	e7f7      	b.n	8003a50 <memmove+0x24>

08003a60 <__malloc_lock>:
 8003a60:	4801      	ldr	r0, [pc, #4]	; (8003a68 <__malloc_lock+0x8>)
 8003a62:	f7ff b999 	b.w	8002d98 <__retarget_lock_acquire_recursive>
 8003a66:	bf00      	nop
 8003a68:	20000120 	.word	0x20000120

08003a6c <__malloc_unlock>:
 8003a6c:	4801      	ldr	r0, [pc, #4]	; (8003a74 <__malloc_unlock+0x8>)
 8003a6e:	f7ff b994 	b.w	8002d9a <__retarget_lock_release_recursive>
 8003a72:	bf00      	nop
 8003a74:	20000120 	.word	0x20000120

08003a78 <_realloc_r>:
 8003a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7c:	4680      	mov	r8, r0
 8003a7e:	4614      	mov	r4, r2
 8003a80:	460e      	mov	r6, r1
 8003a82:	b921      	cbnz	r1, 8003a8e <_realloc_r+0x16>
 8003a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a88:	4611      	mov	r1, r2
 8003a8a:	f7ff ba59 	b.w	8002f40 <_malloc_r>
 8003a8e:	b92a      	cbnz	r2, 8003a9c <_realloc_r+0x24>
 8003a90:	f7ff f9ea 	bl	8002e68 <_free_r>
 8003a94:	4625      	mov	r5, r4
 8003a96:	4628      	mov	r0, r5
 8003a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a9c:	f000 f82e 	bl	8003afc <_malloc_usable_size_r>
 8003aa0:	4284      	cmp	r4, r0
 8003aa2:	4607      	mov	r7, r0
 8003aa4:	d802      	bhi.n	8003aac <_realloc_r+0x34>
 8003aa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003aaa:	d812      	bhi.n	8003ad2 <_realloc_r+0x5a>
 8003aac:	4621      	mov	r1, r4
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f7ff fa46 	bl	8002f40 <_malloc_r>
 8003ab4:	4605      	mov	r5, r0
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	d0ed      	beq.n	8003a96 <_realloc_r+0x1e>
 8003aba:	42bc      	cmp	r4, r7
 8003abc:	4622      	mov	r2, r4
 8003abe:	4631      	mov	r1, r6
 8003ac0:	bf28      	it	cs
 8003ac2:	463a      	movcs	r2, r7
 8003ac4:	f7ff ffa4 	bl	8003a10 <memcpy>
 8003ac8:	4631      	mov	r1, r6
 8003aca:	4640      	mov	r0, r8
 8003acc:	f7ff f9cc 	bl	8002e68 <_free_r>
 8003ad0:	e7e1      	b.n	8003a96 <_realloc_r+0x1e>
 8003ad2:	4635      	mov	r5, r6
 8003ad4:	e7df      	b.n	8003a96 <_realloc_r+0x1e>
	...

08003ad8 <_read_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4d07      	ldr	r5, [pc, #28]	; (8003af8 <_read_r+0x20>)
 8003adc:	4604      	mov	r4, r0
 8003ade:	4608      	mov	r0, r1
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	602a      	str	r2, [r5, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f7fc fefe 	bl	80008e8 <_read>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_read_r+0x1e>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_read_r+0x1e>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	2000012c 	.word	0x2000012c

08003afc <_malloc_usable_size_r>:
 8003afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b00:	1f18      	subs	r0, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bfbc      	itt	lt
 8003b06:	580b      	ldrlt	r3, [r1, r0]
 8003b08:	18c0      	addlt	r0, r0, r3
 8003b0a:	4770      	bx	lr

08003b0c <_init>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr

08003b18 <_fini>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr
