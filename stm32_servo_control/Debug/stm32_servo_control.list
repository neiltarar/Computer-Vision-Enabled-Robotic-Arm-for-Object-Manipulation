
stm32_servo_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004584  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004784  08004784  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800478c  0800478c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6d5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b95  00000000  00000000  0002d775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b80  00000000  00000000  0002ff38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021121  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc70  00000000  00000000  00051bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb263  00000000  00000000  0005f849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012aaac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000372c  00000000  00000000  0012aafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046fc 	.word	0x080046fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080046fc 	.word	0x080046fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0b6      	sub	sp, #216	; 0xd8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 char rx_buffer[MAX_UART_BUFFER_SIZE];
	 char tx_buffer[MAX_UART_BUFFER_SIZE];
	 char stm_greeting[] = "From STM32";
 800058a:	4a22      	ldr	r2, [pc, #136]	; (8000614 <main+0x90>)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000590:	c303      	stmia	r3!, {r0, r1}
 8000592:	801a      	strh	r2, [r3, #0]
 8000594:	3302      	adds	r3, #2
 8000596:	0c12      	lsrs	r2, r2, #16
 8000598:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059a:	f000 fb3b 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 800059e:	f000 f841 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a2:	f000 f955 	bl	8000850 <MX_GPIO_Init>
	MX_TIM2_Init();
 80005a6:	f000 f8a7 	bl	80006f8 <MX_TIM2_Init>
	MX_UART4_Init();
 80005aa:	f000 f927 	bl	80007fc <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005ae:	2100      	movs	r1, #0
 80005b0:	4819      	ldr	r0, [pc, #100]	; (8000618 <main+0x94>)
 80005b2:	f001 fc21 	bl	8001df8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005b6:	2104      	movs	r1, #4
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <main+0x94>)
 80005ba:	f001 fc1d 	bl	8001df8 <HAL_TIM_PWM_Start>
////	  htim2.Instance->CCR2 = 255;// duty cycle is 2.5 ms
//	  HAL_Delay(1500);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Transmit(&huart4, (uint8_t*)stm_greeting, strlen(stm_greeting), 1000);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fe05 	bl	80001d0 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	1d39      	adds	r1, r7, #4
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0x98>)
 80005d2:	f002 fb8a 	bl	8002cea <HAL_UART_Transmit>
	HAL_UART_Receive(&huart4, (uint8_t*)rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 80005d6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005de:	2264      	movs	r2, #100	; 0x64
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <main+0x98>)
 80005e2:	f002 fc14 	bl	8002e0e <HAL_UART_Receive>
	sprintf(tx_buffer, "Received On STM32: %s\r\n", rx_buffer);
 80005e6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	490c      	ldr	r1, [pc, #48]	; (8000620 <main+0x9c>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fc15 	bl	8003e20 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*)tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fde8 	bl	80001d0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f107 0110 	add.w	r1, r7, #16
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <main+0x98>)
 800060e:	f002 fb6c 	bl	8002cea <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, (uint8_t*)stm_greeting, strlen(stm_greeting), 1000);
 8000612:	e7d4      	b.n	80005be <main+0x3a>
 8000614:	0800472c 	.word	0x0800472c
 8000618:	2000008c 	.word	0x2000008c
 800061c:	200000d4 	.word	0x200000d4
 8000620:	08004714 	.word	0x08004714

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fbec 	bl	8003e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <SystemClock_Config+0xcc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemClock_Config+0xd0>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000694:	2308      	movs	r3, #8
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000698:	2354      	movs	r3, #84	; 0x54
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fe65 	bl	8001378 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b4:	f000 f902 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f8c6 	bl	8001868 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e2:	f000 f8eb 	bl	80008bc <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08e      	sub	sp, #56	; 0x38
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <MX_TIM2_Init+0x100>)
 800072a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <MX_TIM2_Init+0x100>)
 8000732:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <MX_TIM2_Init+0x100>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <MX_TIM2_Init+0x100>)
 8000740:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <MX_TIM2_Init+0x100>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <MX_TIM2_Init+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000752:	4829      	ldr	r0, [pc, #164]	; (80007f8 <MX_TIM2_Init+0x100>)
 8000754:	f001 faa8 	bl	8001ca8 <HAL_TIM_Base_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800075e:	f000 f8ad 	bl	80008bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076c:	4619      	mov	r1, r3
 800076e:	4822      	ldr	r0, [pc, #136]	; (80007f8 <MX_TIM2_Init+0x100>)
 8000770:	f001 fdd4 	bl	800231c <HAL_TIM_ConfigClockSource>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800077a:	f000 f89f 	bl	80008bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800077e:	481e      	ldr	r0, [pc, #120]	; (80007f8 <MX_TIM2_Init+0x100>)
 8000780:	f001 fae1 	bl	8001d46 <HAL_TIM_PWM_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800078a:	f000 f897 	bl	80008bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	4619      	mov	r1, r3
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <MX_TIM2_Init+0x100>)
 800079e:	f002 f9c7 	bl	8002b30 <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007a8:	f000 f888 	bl	80008bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ac:	2360      	movs	r3, #96	; 0x60
 80007ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_TIM2_Init+0x100>)
 80007c4:	f001 fce8 	bl	8002198 <HAL_TIM_PWM_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007ce:	f000 f875 	bl	80008bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2204      	movs	r2, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_TIM2_Init+0x100>)
 80007da:	f001 fcdd 	bl	8002198 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80007e4:	f000 f86a 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <MX_TIM2_Init+0x100>)
 80007ea:	f000 f8bb 	bl	8000964 <HAL_TIM_MspPostInit>

}
 80007ee:	bf00      	nop
 80007f0:	3738      	adds	r7, #56	; 0x38
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000008c 	.word	0x2000008c

080007fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_UART4_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <MX_UART4_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_UART4_Init+0x4c>)
 8000808:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800080c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_UART4_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_UART4_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_UART4_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_UART4_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_UART4_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_UART4_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_UART4_Init+0x4c>)
 8000834:	f002 fa0c 	bl	8002c50 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800083e:	f000 f83d 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000d4 	.word	0x200000d4
 800084c:	40004c00 	.word	0x40004c00

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_GPIO_Init+0x68>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <MX_GPIO_Init+0x68>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_GPIO_Init+0x68>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_GPIO_Init+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <MX_GPIO_Init+0x68>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_GPIO_Init+0x68>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_GPIO_Init+0x68>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <MX_GPIO_Init+0x68>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x68>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000906:	2007      	movs	r0, #7
 8000908:	f000 fac6 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000928:	d115      	bne.n	8000956 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_TIM_Base_MspInit+0x48>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_TIM_Base_MspInit+0x48>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_TIM_Base_MspInit+0x48>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	201c      	movs	r0, #28
 800094c:	f000 faaf 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000950:	201c      	movs	r0, #28
 8000952:	f000 fac8 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000984:	d13c      	bne.n	8000a00 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <HAL_TIM_MspPostInit+0xa4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <HAL_TIM_MspPostInit+0xa4>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <HAL_TIM_MspPostInit+0xa4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_TIM_MspPostInit+0xa4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_TIM_MspPostInit+0xa4>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_TIM_MspPostInit+0xa4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BASE_1_CH1_Pin;
 80009be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009d0:	2301      	movs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BASE_1_CH1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <HAL_TIM_MspPostInit+0xa8>)
 80009dc:	f000 fb30 	bl	8001040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BASE_2_CH2_Pin;
 80009e0:	2308      	movs	r3, #8
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009f0:	2301      	movs	r3, #1
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BASE_2_CH2_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_TIM_MspPostInit+0xac>)
 80009fc:	f000 fb20 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020400 	.word	0x40020400

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_UART_MspInit+0x94>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d133      	bne.n	8000a9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_UART_MspInit+0x98>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <HAL_UART_MspInit+0x9c>)
 8000a8a:	f000 fad9 	bl	8001040 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2034      	movs	r0, #52	; 0x34
 8000a94:	f000 fa0b 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000a98:	2034      	movs	r0, #52	; 0x34
 8000a9a:	f000 fa24 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004c00 	.word	0x40004c00
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f000 f8da 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <TIM2_IRQHandler+0x10>)
 8000b0e:	f001 fa3b 	bl	8001f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000008c 	.word	0x2000008c

08000b1c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <UART4_IRQHandler+0x10>)
 8000b22:	f002 fa17 	bl	8002f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000d4 	.word	0x200000d4

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f003 f92c 	bl	8003dbc <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20020000 	.word	0x20020000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	20000118 	.word	0x20000118
 8000b98:	20000130 	.word	0x20000130

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bea:	f7ff ffd7 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f003 f8eb 	bl	8003dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fcc7 	bl	8000584 <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c04:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 8000c08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c0c:	20000130 	.word	0x20000130

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <HAL_Init+0x40>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_Init+0x40>)
 8000c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f92b 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f808 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff fe3e 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x54>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f943 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00e      	b.n	8000ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d80a      	bhi.n	8000ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c94:	f000 f90b 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_InitTick+0x5c>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	2000011c 	.word	0x2000011c

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2000011c 	.word	0x2000011c

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	; (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	; 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff29 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff3e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff8e 	bl	8000dec <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5d 	bl	8000d98 <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff31 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff feda 	bl	8000ce0 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d008      	beq.n	8000f4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e052      	b.n	8000ff2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0216 	bic.w	r2, r2, #22
 8000f5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d103      	bne.n	8000f7c <HAL_DMA_Abort+0x62>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d007      	beq.n	8000f8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0208 	bic.w	r2, r2, #8
 8000f8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9c:	e013      	b.n	8000fc6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f9e:	f7ff fe9f 	bl	8000ce0 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	d90c      	bls.n	8000fc6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2220      	movs	r2, #32
 8000fb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e015      	b.n	8000ff2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e4      	bne.n	8000f9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd8:	223f      	movs	r2, #63	; 0x3f
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d004      	beq.n	8001018 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e00c      	b.n	8001032 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2205      	movs	r2, #5
 800101c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e16b      	b.n	8001334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 815a 	bne.w	800132e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d005      	beq.n	8001092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	2b02      	cmp	r3, #2
 8001090:	d130      	bne.n	80010f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 0201 	and.w	r2, r3, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d017      	beq.n	8001130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80b4 	beq.w	800132e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b60      	ldr	r3, [pc, #384]	; (800134c <HAL_GPIO_Init+0x30c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a5f      	ldr	r2, [pc, #380]	; (800134c <HAL_GPIO_Init+0x30c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b5d      	ldr	r3, [pc, #372]	; (800134c <HAL_GPIO_Init+0x30c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a5b      	ldr	r2, [pc, #364]	; (8001350 <HAL_GPIO_Init+0x310>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a52      	ldr	r2, [pc, #328]	; (8001354 <HAL_GPIO_Init+0x314>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x318>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a50      	ldr	r2, [pc, #320]	; (800135c <HAL_GPIO_Init+0x31c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <HAL_GPIO_Init+0x320>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <HAL_GPIO_Init+0x324>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x216>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x328>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x212>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_GPIO_Init+0x32c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x20e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4b      	ldr	r2, [pc, #300]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20a>
 8001246:	2307      	movs	r3, #7
 8001248:	e00e      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124a:	2308      	movs	r3, #8
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800124e:	2306      	movs	r3, #6
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x228>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x228>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	; (8001350 <HAL_GPIO_Init+0x310>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <HAL_GPIO_Init+0x334>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a32      	ldr	r2, [pc, #200]	; (8001374 <HAL_GPIO_Init+0x334>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_GPIO_Init+0x334>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a27      	ldr	r2, [pc, #156]	; (8001374 <HAL_GPIO_Init+0x334>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_GPIO_Init+0x334>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fe:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <HAL_GPIO_Init+0x334>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_GPIO_Init+0x334>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <HAL_GPIO_Init+0x334>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae90 	bls.w	800105c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021400 	.word	0x40021400
 800136c:	40021800 	.word	0x40021800
 8001370:	40021c00 	.word	0x40021c00
 8001374:	40013c00 	.word	0x40013c00

08001378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e267      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d075      	beq.n	8001482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001396:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d00c      	beq.n	80013bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a2:	4b85      	ldr	r3, [pc, #532]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d112      	bne.n	80013d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ae:	4b82      	ldr	r3, [pc, #520]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ba:	d10b      	bne.n	80013d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	4b7e      	ldr	r3, [pc, #504]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d05b      	beq.n	8001480 <HAL_RCC_OscConfig+0x108>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d157      	bne.n	8001480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e242      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x74>
 80013de:	4b76      	ldr	r3, [pc, #472]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a75      	ldr	r2, [pc, #468]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0xb0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x98>
 80013f6:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6f      	ldr	r2, [pc, #444]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b6d      	ldr	r3, [pc, #436]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a6c      	ldr	r2, [pc, #432]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0xb0>
 8001410:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a68      	ldr	r2, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a65      	ldr	r2, [pc, #404]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fc56 	bl	8000ce0 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fc52 	bl	8000ce0 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e207      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0xc0>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fc42 	bl	8000ce0 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fc3e 	bl	8000ce0 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e1f3      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0xe8>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d063      	beq.n	8001556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d11c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a6:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d116      	bne.n	80014e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x152>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1c7      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4937      	ldr	r1, [pc, #220]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	e03a      	b.n	8001556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e8:	4b34      	ldr	r3, [pc, #208]	; (80015bc <HAL_RCC_OscConfig+0x244>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fbf7 	bl	8000ce0 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fbf3 	bl	8000ce0 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1a8      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4925      	ldr	r1, [pc, #148]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_RCC_OscConfig+0x244>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fbd6 	bl	8000ce0 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff fbd2 	bl	8000ce0 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e187      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d036      	beq.n	80015d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d016      	beq.n	8001598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_RCC_OscConfig+0x248>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fbb6 	bl	8000ce0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fbb2 	bl	8000ce0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e167      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_OscConfig+0x240>)
 800158c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x200>
 8001596:	e01b      	b.n	80015d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_OscConfig+0x248>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fb9f 	bl	8000ce0 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	e00e      	b.n	80015c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff fb9b 	bl	8000ce0 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d907      	bls.n	80015c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e150      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
 80015b8:	40023800 	.word	0x40023800
 80015bc:	42470000 	.word	0x42470000
 80015c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ea      	bne.n	80015a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8097 	beq.w	800170c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e2:	4b81      	ldr	r3, [pc, #516]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10f      	bne.n	800160e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b7d      	ldr	r3, [pc, #500]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a7c      	ldr	r2, [pc, #496]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b7a      	ldr	r3, [pc, #488]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160a:	2301      	movs	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	4b77      	ldr	r3, [pc, #476]	; (80017ec <HAL_RCC_OscConfig+0x474>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d118      	bne.n	800164c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161a:	4b74      	ldr	r3, [pc, #464]	; (80017ec <HAL_RCC_OscConfig+0x474>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a73      	ldr	r2, [pc, #460]	; (80017ec <HAL_RCC_OscConfig+0x474>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001626:	f7ff fb5b 	bl	8000ce0 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162e:	f7ff fb57 	bl	8000ce0 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e10c      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_OscConfig+0x474>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x2ea>
 8001654:	4b64      	ldr	r3, [pc, #400]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a63      	ldr	r2, [pc, #396]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
 8001660:	e01c      	b.n	800169c <HAL_RCC_OscConfig+0x324>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b05      	cmp	r3, #5
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x30c>
 800166a:	4b5f      	ldr	r3, [pc, #380]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	4a5e      	ldr	r2, [pc, #376]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6713      	str	r3, [r2, #112]	; 0x70
 8001676:	4b5c      	ldr	r3, [pc, #368]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167a:	4a5b      	ldr	r2, [pc, #364]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6713      	str	r3, [r2, #112]	; 0x70
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0x324>
 8001684:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a57      	ldr	r2, [pc, #348]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	4a54      	ldr	r2, [pc, #336]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001696:	f023 0304 	bic.w	r3, r3, #4
 800169a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d015      	beq.n	80016d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fb1c 	bl	8000ce0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb18 	bl	8000ce0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e0cb      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c2:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0ee      	beq.n	80016ac <HAL_RCC_OscConfig+0x334>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d0:	f7ff fb06 	bl	8000ce0 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff fb02 	bl	8000ce0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e0b5      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ee      	bne.n	80016d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001700:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80a1 	beq.w	8001858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b08      	cmp	r3, #8
 8001720:	d05c      	beq.n	80017dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d141      	bne.n	80017ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_RCC_OscConfig+0x478>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fad6 	bl	8000ce0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fad2 	bl	8000ce0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e087      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69da      	ldr	r2, [r3, #28]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	019b      	lsls	r3, r3, #6
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	085b      	lsrs	r3, r3, #1
 800176e:	3b01      	subs	r3, #1
 8001770:	041b      	lsls	r3, r3, #16
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	061b      	lsls	r3, r3, #24
 800177a:	491b      	ldr	r1, [pc, #108]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x478>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff faab 	bl	8000ce0 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff faa7 	bl	8000ce0 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e05c      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x416>
 80017ac:	e054      	b.n	8001858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_RCC_OscConfig+0x478>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fa94 	bl	8000ce0 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff fa90 	bl	8000ce0 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e045      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_RCC_OscConfig+0x470>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x444>
 80017da:	e03d      	b.n	8001858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e038      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000
 80017f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x4ec>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d028      	beq.n	8001854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d121      	bne.n	8001854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d11a      	bne.n	8001854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001824:	4013      	ands	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800182a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800182c:	4293      	cmp	r3, r2
 800182e:	d111      	bne.n	8001854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	085b      	lsrs	r3, r3, #1
 800183c:	3b01      	subs	r3, #1
 800183e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d107      	bne.n	8001854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0cc      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d90c      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0b8      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018bc:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	494d      	ldr	r1, [pc, #308]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d044      	beq.n	8001988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d119      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d003      	beq.n	8001926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001922:	2b03      	cmp	r3, #3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e06f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e067      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f023 0203 	bic.w	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4934      	ldr	r1, [pc, #208]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001958:	f7ff f9c2 	bl	8000ce0 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	e00a      	b.n	8001976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7ff f9be 	bl	8000ce0 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e04f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 020c 	and.w	r2, r3, #12
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1eb      	bne.n	8001960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d20c      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e032      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4916      	ldr	r1, [pc, #88]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	490e      	ldr	r1, [pc, #56]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ee:	f000 f821 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	490a      	ldr	r1, [pc, #40]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	5ccb      	ldrb	r3, [r1, r3]
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f922 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08004738 	.word	0x08004738
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a38:	b094      	sub	sp, #80	; 0x50
 8001a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a40:	2300      	movs	r3, #0
 8001a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a44:	2300      	movs	r3, #0
 8001a46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a4c:	4b79      	ldr	r3, [pc, #484]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d00d      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x40>
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	f200 80e1 	bhi.w	8001c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x34>
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a66:	e0db      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a6c:	e0db      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6e:	4b73      	ldr	r3, [pc, #460]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a72:	e0d8      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a74:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d063      	beq.n	8001b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8a:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	099b      	lsrs	r3, r3, #6
 8001a90:	2200      	movs	r2, #0
 8001a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	462b      	mov	r3, r5
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	0159      	lsls	r1, r3, #5
 8001ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab8:	0150      	lsls	r0, r2, #5
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4621      	mov	r1, r4
 8001ac0:	1a51      	subs	r1, r2, r1
 8001ac2:	6139      	str	r1, [r7, #16]
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad8:	4659      	mov	r1, fp
 8001ada:	018b      	lsls	r3, r1, #6
 8001adc:	4651      	mov	r1, sl
 8001ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ae2:	4651      	mov	r1, sl
 8001ae4:	018a      	lsls	r2, r1, #6
 8001ae6:	4651      	mov	r1, sl
 8001ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8001aec:	4659      	mov	r1, fp
 8001aee:	eb63 0901 	sbc.w	r9, r3, r1
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b06:	4690      	mov	r8, r2
 8001b08:	4699      	mov	r9, r3
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	eb18 0303 	adds.w	r3, r8, r3
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	462b      	mov	r3, r5
 8001b14:	eb49 0303 	adc.w	r3, r9, r3
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b26:	4629      	mov	r1, r5
 8001b28:	024b      	lsls	r3, r1, #9
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b30:	4621      	mov	r1, r4
 8001b32:	024a      	lsls	r2, r1, #9
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b44:	f7fe fb9c 	bl	8000280 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b50:	e058      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
 8001b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b6c:	4642      	mov	r2, r8
 8001b6e:	464b      	mov	r3, r9
 8001b70:	f04f 0000 	mov.w	r0, #0
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	0159      	lsls	r1, r3, #5
 8001b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7e:	0150      	lsls	r0, r2, #5
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4641      	mov	r1, r8
 8001b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	00eb      	lsls	r3, r5, #3
 8001bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bba:	00e2      	lsls	r2, r4, #3
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	4643      	mov	r3, r8
 8001bc2:	18e3      	adds	r3, r4, r3
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	eb45 0303 	adc.w	r3, r5, r3
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bda:	4629      	mov	r1, r5
 8001bdc:	028b      	lsls	r3, r1, #10
 8001bde:	4621      	mov	r1, r4
 8001be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be4:	4621      	mov	r1, r4
 8001be6:	028a      	lsls	r2, r1, #10
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	61fa      	str	r2, [r7, #28]
 8001bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf8:	f7fe fb42 	bl	8000280 <__aeabi_uldivmod>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4613      	mov	r3, r2
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c1e:	e002      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3750      	adds	r7, #80	; 0x50
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	007a1200 	.word	0x007a1200

08001c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000000 	.word	0x20000000

08001c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	f7ff fff0 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	0a9b      	lsrs	r3, r3, #10
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4903      	ldr	r1, [pc, #12]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	08004748 	.word	0x08004748

08001c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c84:	f7ff ffdc 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0b5b      	lsrs	r3, r3, #13
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4903      	ldr	r1, [pc, #12]	; (8001ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	08004748 	.word	0x08004748

08001ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fe22 	bl	8000918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 fc12 	bl	8002510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e041      	b.n	8001ddc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d106      	bne.n	8001d72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f839 	bl	8001de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3304      	adds	r3, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f000 fbc3 	bl	8002510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_TIM_PWM_Start+0x24>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	bf14      	ite	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	2300      	moveq	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e022      	b.n	8001e62 <HAL_TIM_PWM_Start+0x6a>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d109      	bne.n	8001e36 <HAL_TIM_PWM_Start+0x3e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	bf14      	ite	ne
 8001e2e:	2301      	movne	r3, #1
 8001e30:	2300      	moveq	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	e015      	b.n	8001e62 <HAL_TIM_PWM_Start+0x6a>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d109      	bne.n	8001e50 <HAL_TIM_PWM_Start+0x58>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	e008      	b.n	8001e62 <HAL_TIM_PWM_Start+0x6a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07c      	b.n	8001f64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d104      	bne.n	8001e7a <HAL_TIM_PWM_Start+0x82>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e78:	e013      	b.n	8001ea2 <HAL_TIM_PWM_Start+0xaa>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d104      	bne.n	8001e8a <HAL_TIM_PWM_Start+0x92>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e88:	e00b      	b.n	8001ea2 <HAL_TIM_PWM_Start+0xaa>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d104      	bne.n	8001e9a <HAL_TIM_PWM_Start+0xa2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e98:	e003      	b.n	8001ea2 <HAL_TIM_PWM_Start+0xaa>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	6839      	ldr	r1, [r7, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fe1a 	bl	8002ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2d      	ldr	r2, [pc, #180]	; (8001f6c <HAL_TIM_PWM_Start+0x174>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_TIM_PWM_Start+0xcc>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2c      	ldr	r2, [pc, #176]	; (8001f70 <HAL_TIM_PWM_Start+0x178>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_TIM_PWM_Start+0xd0>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_TIM_PWM_Start+0xd2>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a22      	ldr	r2, [pc, #136]	; (8001f6c <HAL_TIM_PWM_Start+0x174>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x136>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d01d      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x136>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_TIM_PWM_Start+0x17c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d018      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x136>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <HAL_TIM_PWM_Start+0x180>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x136>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <HAL_TIM_PWM_Start+0x184>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00e      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x136>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_TIM_PWM_Start+0x178>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x136>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_TIM_PWM_Start+0x188>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_TIM_PWM_Start+0x136>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <HAL_TIM_PWM_Start+0x18c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d111      	bne.n	8001f52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d010      	beq.n	8001f62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f50:	e007      	b.n	8001f62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40010400 	.word	0x40010400
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40000800 	.word	0x40000800
 8001f7c:	40000c00 	.word	0x40000c00
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40001800 	.word	0x40001800

08001f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d122      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d11b      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0202 	mvn.w	r2, #2
 8001fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fa81 	bl	80024d2 <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fa73 	bl	80024be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fa84 	bl	80024e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d122      	bne.n	8002038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d11b      	bne.n	8002038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0204 	mvn.w	r2, #4
 8002008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fa57 	bl	80024d2 <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fa49 	bl	80024be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fa5a 	bl	80024e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b08      	cmp	r3, #8
 8002044:	d122      	bne.n	800208c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b08      	cmp	r3, #8
 8002052:	d11b      	bne.n	800208c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0208 	mvn.w	r2, #8
 800205c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2204      	movs	r2, #4
 8002062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 fa2d 	bl	80024d2 <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fa1f 	bl	80024be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fa30 	bl	80024e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b10      	cmp	r3, #16
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0210 	mvn.w	r2, #16
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2208      	movs	r2, #8
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fa03 	bl	80024d2 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f9f5 	bl	80024be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fa06 	bl	80024e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0201 	mvn.w	r2, #1
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f9cf 	bl	80024aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b80      	cmp	r3, #128	; 0x80
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fd82 	bl	8002c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f9cb 	bl	80024fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b20      	cmp	r3, #32
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b20      	cmp	r3, #32
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0220 	mvn.w	r2, #32
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fd4c 	bl	8002c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e0ae      	b.n	8002314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	f200 809f 	bhi.w	8002304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021c6:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	08002201 	.word	0x08002201
 80021d0:	08002305 	.word	0x08002305
 80021d4:	08002305 	.word	0x08002305
 80021d8:	08002305 	.word	0x08002305
 80021dc:	08002241 	.word	0x08002241
 80021e0:	08002305 	.word	0x08002305
 80021e4:	08002305 	.word	0x08002305
 80021e8:	08002305 	.word	0x08002305
 80021ec:	08002283 	.word	0x08002283
 80021f0:	08002305 	.word	0x08002305
 80021f4:	08002305 	.word	0x08002305
 80021f8:	08002305 	.word	0x08002305
 80021fc:	080022c3 	.word	0x080022c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fa22 	bl	8002650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0208 	orr.w	r2, r2, #8
 800221a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0204 	bic.w	r2, r2, #4
 800222a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6999      	ldr	r1, [r3, #24]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	619a      	str	r2, [r3, #24]
      break;
 800223e:	e064      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fa72 	bl	8002730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6999      	ldr	r1, [r3, #24]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	021a      	lsls	r2, r3, #8
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	619a      	str	r2, [r3, #24]
      break;
 8002280:	e043      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fac7 	bl	800281c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0208 	orr.w	r2, r2, #8
 800229c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0204 	bic.w	r2, r2, #4
 80022ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69d9      	ldr	r1, [r3, #28]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	61da      	str	r2, [r3, #28]
      break;
 80022c0:	e023      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fb1b 	bl	8002904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69d9      	ldr	r1, [r3, #28]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	61da      	str	r2, [r3, #28]
      break;
 8002302:	e002      	b.n	800230a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	75fb      	strb	r3, [r7, #23]
      break;
 8002308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_TIM_ConfigClockSource+0x1c>
 8002334:	2302      	movs	r3, #2
 8002336:	e0b4      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x186>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800235e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002370:	d03e      	beq.n	80023f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002376:	f200 8087 	bhi.w	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	f000 8086 	beq.w	800248e <HAL_TIM_ConfigClockSource+0x172>
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002386:	d87f      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d01a      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0xa6>
 800238c:	2b70      	cmp	r3, #112	; 0x70
 800238e:	d87b      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 8002390:	2b60      	cmp	r3, #96	; 0x60
 8002392:	d050      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0x11a>
 8002394:	2b60      	cmp	r3, #96	; 0x60
 8002396:	d877      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 8002398:	2b50      	cmp	r3, #80	; 0x50
 800239a:	d03c      	beq.n	8002416 <HAL_TIM_ConfigClockSource+0xfa>
 800239c:	2b50      	cmp	r3, #80	; 0x50
 800239e:	d873      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d058      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0x13a>
 80023a4:	2b40      	cmp	r3, #64	; 0x40
 80023a6:	d86f      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 80023a8:	2b30      	cmp	r3, #48	; 0x30
 80023aa:	d064      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x15a>
 80023ac:	2b30      	cmp	r3, #48	; 0x30
 80023ae:	d86b      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d060      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d867      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x16c>
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d05c      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x15a>
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d05a      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x15a>
 80023c0:	e062      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f000 fb67 	bl	8002aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	609a      	str	r2, [r3, #8]
      break;
 80023ee:	e04f      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f000 fb50 	bl	8002aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002412:	609a      	str	r2, [r3, #8]
      break;
 8002414:	e03c      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	461a      	mov	r2, r3
 8002424:	f000 fac4 	bl	80029b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2150      	movs	r1, #80	; 0x50
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fb1d 	bl	8002a6e <TIM_ITRx_SetConfig>
      break;
 8002434:	e02c      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	461a      	mov	r2, r3
 8002444:	f000 fae3 	bl	8002a0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2160      	movs	r1, #96	; 0x60
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fb0d 	bl	8002a6e <TIM_ITRx_SetConfig>
      break;
 8002454:	e01c      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	461a      	mov	r2, r3
 8002464:	f000 faa4 	bl	80029b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2140      	movs	r1, #64	; 0x40
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fafd 	bl	8002a6e <TIM_ITRx_SetConfig>
      break;
 8002474:	e00c      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f000 faf4 	bl	8002a6e <TIM_ITRx_SetConfig>
      break;
 8002486:	e003      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e000      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800248e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a40      	ldr	r2, [pc, #256]	; (8002624 <TIM_Base_SetConfig+0x114>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <TIM_Base_SetConfig+0x40>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252e:	d00f      	beq.n	8002550 <TIM_Base_SetConfig+0x40>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3d      	ldr	r2, [pc, #244]	; (8002628 <TIM_Base_SetConfig+0x118>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00b      	beq.n	8002550 <TIM_Base_SetConfig+0x40>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a3c      	ldr	r2, [pc, #240]	; (800262c <TIM_Base_SetConfig+0x11c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d007      	beq.n	8002550 <TIM_Base_SetConfig+0x40>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3b      	ldr	r2, [pc, #236]	; (8002630 <TIM_Base_SetConfig+0x120>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d003      	beq.n	8002550 <TIM_Base_SetConfig+0x40>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3a      	ldr	r2, [pc, #232]	; (8002634 <TIM_Base_SetConfig+0x124>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d108      	bne.n	8002562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a2f      	ldr	r2, [pc, #188]	; (8002624 <TIM_Base_SetConfig+0x114>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d02b      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d027      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <TIM_Base_SetConfig+0x118>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d023      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a2b      	ldr	r2, [pc, #172]	; (800262c <TIM_Base_SetConfig+0x11c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <TIM_Base_SetConfig+0x120>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01b      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a29      	ldr	r2, [pc, #164]	; (8002634 <TIM_Base_SetConfig+0x124>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d017      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a28      	ldr	r2, [pc, #160]	; (8002638 <TIM_Base_SetConfig+0x128>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a27      	ldr	r2, [pc, #156]	; (800263c <TIM_Base_SetConfig+0x12c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00f      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a26      	ldr	r2, [pc, #152]	; (8002640 <TIM_Base_SetConfig+0x130>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00b      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a25      	ldr	r2, [pc, #148]	; (8002644 <TIM_Base_SetConfig+0x134>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d007      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a24      	ldr	r2, [pc, #144]	; (8002648 <TIM_Base_SetConfig+0x138>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d003      	beq.n	80025c2 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a23      	ldr	r2, [pc, #140]	; (800264c <TIM_Base_SetConfig+0x13c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d108      	bne.n	80025d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <TIM_Base_SetConfig+0x114>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0xf8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <TIM_Base_SetConfig+0x124>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d103      	bne.n	8002610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	615a      	str	r2, [r3, #20]
}
 8002616:	bf00      	nop
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40010000 	.word	0x40010000
 8002628:	40000400 	.word	0x40000400
 800262c:	40000800 	.word	0x40000800
 8002630:	40000c00 	.word	0x40000c00
 8002634:	40010400 	.word	0x40010400
 8002638:	40014000 	.word	0x40014000
 800263c:	40014400 	.word	0x40014400
 8002640:	40014800 	.word	0x40014800
 8002644:	40001800 	.word	0x40001800
 8002648:	40001c00 	.word	0x40001c00
 800264c:	40002000 	.word	0x40002000

08002650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f023 0201 	bic.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f023 0302 	bic.w	r3, r3, #2
 8002698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a20      	ldr	r2, [pc, #128]	; (8002728 <TIM_OC1_SetConfig+0xd8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d003      	beq.n	80026b4 <TIM_OC1_SetConfig+0x64>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a1f      	ldr	r2, [pc, #124]	; (800272c <TIM_OC1_SetConfig+0xdc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d10c      	bne.n	80026ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f023 0308 	bic.w	r3, r3, #8
 80026ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a15      	ldr	r2, [pc, #84]	; (8002728 <TIM_OC1_SetConfig+0xd8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d003      	beq.n	80026de <TIM_OC1_SetConfig+0x8e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <TIM_OC1_SetConfig+0xdc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d111      	bne.n	8002702 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	621a      	str	r2, [r3, #32]
}
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40010000 	.word	0x40010000
 800272c:	40010400 	.word	0x40010400

08002730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f023 0210 	bic.w	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0320 	bic.w	r3, r3, #32
 800277a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a22      	ldr	r2, [pc, #136]	; (8002814 <TIM_OC2_SetConfig+0xe4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <TIM_OC2_SetConfig+0x68>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <TIM_OC2_SetConfig+0xe8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d10d      	bne.n	80027b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800279e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <TIM_OC2_SetConfig+0xe4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d003      	beq.n	80027c4 <TIM_OC2_SetConfig+0x94>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a16      	ldr	r2, [pc, #88]	; (8002818 <TIM_OC2_SetConfig+0xe8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d113      	bne.n	80027ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40010000 	.word	0x40010000
 8002818:	40010400 	.word	0x40010400

0800281c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a21      	ldr	r2, [pc, #132]	; (80028fc <TIM_OC3_SetConfig+0xe0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d003      	beq.n	8002882 <TIM_OC3_SetConfig+0x66>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a20      	ldr	r2, [pc, #128]	; (8002900 <TIM_OC3_SetConfig+0xe4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10d      	bne.n	800289e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800289c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a16      	ldr	r2, [pc, #88]	; (80028fc <TIM_OC3_SetConfig+0xe0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d003      	beq.n	80028ae <TIM_OC3_SetConfig+0x92>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a15      	ldr	r2, [pc, #84]	; (8002900 <TIM_OC3_SetConfig+0xe4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d113      	bne.n	80028d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	621a      	str	r2, [r3, #32]
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40010000 	.word	0x40010000
 8002900:	40010400 	.word	0x40010400

08002904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800294e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	031b      	lsls	r3, r3, #12
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <TIM_OC4_SetConfig+0xa4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_OC4_SetConfig+0x68>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a11      	ldr	r2, [pc, #68]	; (80029ac <TIM_OC4_SetConfig+0xa8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d109      	bne.n	8002980 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40010400 	.word	0x40010400

080029b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f023 0201 	bic.w	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 030a 	bic.w	r3, r3, #10
 80029ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b087      	sub	sp, #28
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f023 0210 	bic.w	r2, r3, #16
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	031b      	lsls	r3, r3, #12
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	621a      	str	r2, [r3, #32]
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f043 0307 	orr.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	021a      	lsls	r2, r3, #8
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2201      	movs	r2, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	401a      	ands	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	621a      	str	r2, [r3, #32]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e05a      	b.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d022      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d01d      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d018      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d009      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10c      	bne.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40010400 	.word	0x40010400
 8002c20:	40014000 	.word	0x40014000
 8002c24:	40001800 	.word	0x40001800

08002c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e03f      	b.n	8002ce2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fd fecc 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	; 0x24
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fe1d 	bl	80038d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08a      	sub	sp, #40	; 0x28
 8002cee:	af02      	add	r7, sp, #8
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d17c      	bne.n	8002e04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_UART_Transmit+0x2c>
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e075      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_UART_Transmit+0x3e>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e06e      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2221      	movs	r2, #33	; 0x21
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d3e:	f7fd ffcf 	bl	8000ce0 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d58:	d108      	bne.n	8002d6c <HAL_UART_Transmit+0x82>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e003      	b.n	8002d74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d7c:	e02a      	b.n	8002dd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fb9b 	bl	80034c4 <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e036      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3302      	adds	r3, #2
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e007      	b.n	8002dc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cf      	bne.n	8002d7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2140      	movs	r1, #64	; 0x40
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fb6b 	bl	80034c4 <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e006      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b08a      	sub	sp, #40	; 0x28
 8002e12:	af02      	add	r7, sp, #8
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	f040 808c 	bne.w	8002f48 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_UART_Receive+0x2e>
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e084      	b.n	8002f4a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Receive+0x40>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e07d      	b.n	8002f4a <HAL_UART_Receive+0x13c>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2222      	movs	r2, #34	; 0x22
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6a:	f7fd ff39 	bl	8000ce0 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	d108      	bne.n	8002e98 <HAL_UART_Receive+0x8a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e003      	b.n	8002ea0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ea8:	e043      	b.n	8002f32 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2120      	movs	r1, #32
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fb05 	bl	80034c4 <UART_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e042      	b.n	8002f4a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	3302      	adds	r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e01f      	b.n	8002f24 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eec:	d007      	beq.n	8002efe <HAL_UART_Receive+0xf0>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <HAL_UART_Receive+0xfe>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	e008      	b.n	8002f1e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1b6      	bne.n	8002eaa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	e000      	b.n	8002f4a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b0ba      	sub	sp, #232	; 0xe8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_UART_IRQHandler+0x66>
 8002fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fbd3 	bl	800375e <UART_Receive_IT>
      return;
 8002fb8:	e256      	b.n	8003468 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80de 	beq.w	8003180 <HAL_UART_IRQHandler+0x22c>
 8002fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80d1 	beq.w	8003180 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_UART_IRQHandler+0xae>
 8002fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_UART_IRQHandler+0xd2>
 800300e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f043 0202 	orr.w	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_UART_IRQHandler+0xf6>
 8003032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f043 0204 	orr.w	r2, r3, #4
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d011      	beq.n	800307a <HAL_UART_IRQHandler+0x126>
 8003056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f043 0208 	orr.w	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 81ed 	beq.w	800345e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_UART_IRQHandler+0x14e>
 8003090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fb5e 	bl	800375e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_UART_IRQHandler+0x17a>
 80030c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d04f      	beq.n	800316e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa66 	bl	80035a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	d141      	bne.n	8003166 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3314      	adds	r3, #20
 80030e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3314      	adds	r3, #20
 800310a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800310e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800311a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1d9      	bne.n	80030e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	2b00      	cmp	r3, #0
 8003134:	d013      	beq.n	800315e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	4a7d      	ldr	r2, [pc, #500]	; (8003330 <HAL_UART_IRQHandler+0x3dc>)
 800313c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd ff59 	bl	8000ffa <HAL_DMA_Abort_IT>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003158:	4610      	mov	r0, r2
 800315a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315c:	e00e      	b.n	800317c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f99a 	bl	8003498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003164:	e00a      	b.n	800317c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f996 	bl	8003498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316c:	e006      	b.n	800317c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f992 	bl	8003498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800317a:	e170      	b.n	800345e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	bf00      	nop
    return;
 800317e:	e16e      	b.n	800345e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	2b01      	cmp	r3, #1
 8003186:	f040 814a 	bne.w	800341e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8143 	beq.w	800341e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 813c 	beq.w	800341e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	f040 80b4 	bne.w	8003334 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8140 	beq.w	8003462 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ea:	429a      	cmp	r2, r3
 80031ec:	f080 8139 	bcs.w	8003462 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	f000 8088 	beq.w	8003316 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800321c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003232:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800323e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800324a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1d9      	bne.n	8003206 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3314      	adds	r3, #20
 8003258:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3314      	adds	r3, #20
 8003272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003276:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800327a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800327e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e1      	bne.n	8003252 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800329e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e3      	bne.n	800328e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e6:	f023 0310 	bic.w	r3, r3, #16
 80032ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80032fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e3      	bne.n	80032d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fe02 	bl	8000f1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331e:	b29b      	uxth	r3, r3
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	b29b      	uxth	r3, r3
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8c0 	bl	80034ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800332c:	e099      	b.n	8003462 <HAL_UART_IRQHandler+0x50e>
 800332e:	bf00      	nop
 8003330:	08003667 	.word	0x08003667
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333c:	b29b      	uxth	r3, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 808b 	beq.w	8003466 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8086 	beq.w	8003466 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	330c      	adds	r3, #12
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800337e:	647a      	str	r2, [r7, #68]	; 0x44
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e3      	bne.n	800335a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	623b      	str	r3, [r7, #32]
   return(result);
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033b6:	633a      	str	r2, [r7, #48]	; 0x30
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e3      	bne.n	8003392 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0310 	bic.w	r3, r3, #16
 80033ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033fc:	61fa      	str	r2, [r7, #28]
 80033fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	69b9      	ldr	r1, [r7, #24]
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	617b      	str	r3, [r7, #20]
   return(result);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e3      	bne.n	80033d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003410:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f848 	bl	80034ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800341c:	e023      	b.n	8003466 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800341e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_UART_IRQHandler+0x4ea>
 800342a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f929 	bl	800368e <UART_Transmit_IT>
    return;
 800343c:	e014      	b.n	8003468 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00e      	beq.n	8003468 <HAL_UART_IRQHandler+0x514>
 800344a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f969 	bl	800372e <UART_EndTransmit_IT>
    return;
 800345c:	e004      	b.n	8003468 <HAL_UART_IRQHandler+0x514>
    return;
 800345e:	bf00      	nop
 8003460:	e002      	b.n	8003468 <HAL_UART_IRQHandler+0x514>
      return;
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <HAL_UART_IRQHandler+0x514>
      return;
 8003466:	bf00      	nop
  }
}
 8003468:	37e8      	adds	r7, #232	; 0xe8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop

08003470 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b090      	sub	sp, #64	; 0x40
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d4:	e050      	b.n	8003578 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034dc:	d04c      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80034e4:	f7fd fbfc 	bl	8000ce0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d241      	bcs.n	8003578 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003514:	637a      	str	r2, [r7, #52]	; 0x34
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800351a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e5      	bne.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3314      	adds	r3, #20
 800352e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	613b      	str	r3, [r7, #16]
   return(result);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003548:	623a      	str	r2, [r7, #32]
 800354a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	69f9      	ldr	r1, [r7, #28]
 800354e:	6a3a      	ldr	r2, [r7, #32]
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	61bb      	str	r3, [r7, #24]
   return(result);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e5      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e00f      	b.n	8003598 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d09f      	beq.n	80034d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3740      	adds	r7, #64	; 0x40
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b095      	sub	sp, #84	; 0x54
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035c8:	643a      	str	r2, [r7, #64]	; 0x40
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e5      	bne.n	80035dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	2b01      	cmp	r3, #1
 8003616:	d119      	bne.n	800364c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	60bb      	str	r3, [r7, #8]
   return(result);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f023 0310 	bic.w	r3, r3, #16
 800362e:	647b      	str	r3, [r7, #68]	; 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003638:	61ba      	str	r2, [r7, #24]
 800363a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6979      	ldr	r1, [r7, #20]
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	613b      	str	r3, [r7, #16]
   return(result);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800365a:	bf00      	nop
 800365c:	3754      	adds	r7, #84	; 0x54
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff ff09 	bl	8003498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b21      	cmp	r3, #33	; 0x21
 80036a0:	d13e      	bne.n	8003720 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036aa:	d114      	bne.n	80036d6 <UART_Transmit_IT+0x48>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d110      	bne.n	80036d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	621a      	str	r2, [r3, #32]
 80036d4:	e008      	b.n	80036e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	1c59      	adds	r1, r3, #1
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6211      	str	r1, [r2, #32]
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4619      	mov	r1, r3
 80036f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10f      	bne.n	800371c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800370a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800371a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003720:	2302      	movs	r3, #2
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003744:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fe8e 	bl	8003470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b08c      	sub	sp, #48	; 0x30
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b22      	cmp	r3, #34	; 0x22
 8003770:	f040 80ab 	bne.w	80038ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377c:	d117      	bne.n	80037ae <UART_Receive_IT+0x50>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d113      	bne.n	80037ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003786:	2300      	movs	r3, #0
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379c:	b29a      	uxth	r2, r3
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	1c9a      	adds	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
 80037ac:	e026      	b.n	80037fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c0:	d007      	beq.n	80037d2 <UART_Receive_IT+0x74>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <UART_Receive_IT+0x82>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e008      	b.n	80037f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29b      	uxth	r3, r3
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4619      	mov	r1, r3
 800380a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800380c:	2b00      	cmp	r3, #0
 800380e:	d15a      	bne.n	80038c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0220 	bic.w	r2, r2, #32
 800381e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800382e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	2b01      	cmp	r3, #1
 800384e:	d135      	bne.n	80038bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	613b      	str	r3, [r7, #16]
   return(result);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f023 0310 	bic.w	r3, r3, #16
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003876:	623a      	str	r2, [r7, #32]
 8003878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	69f9      	ldr	r1, [r7, #28]
 800387c:	6a3a      	ldr	r2, [r7, #32]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	61bb      	str	r3, [r7, #24]
   return(result);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e5      	bne.n	8003856 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b10      	cmp	r3, #16
 8003896:	d10a      	bne.n	80038ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fdf9 	bl	80034ac <HAL_UARTEx_RxEventCallback>
 80038ba:	e002      	b.n	80038c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fde1 	bl	8003484 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e002      	b.n	80038cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3730      	adds	r7, #48	; 0x30
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0c0      	sub	sp, #256	; 0x100
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	68d9      	ldr	r1, [r3, #12]
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	ea40 0301 	orr.w	r3, r0, r1
 80038fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	431a      	orrs	r2, r3
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800392c:	f021 010c 	bic.w	r1, r1, #12
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800393a:	430b      	orrs	r3, r1
 800393c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	6999      	ldr	r1, [r3, #24]
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	ea40 0301 	orr.w	r3, r0, r1
 800395a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b8f      	ldr	r3, [pc, #572]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d005      	beq.n	8003974 <UART_SetConfig+0xa0>
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <UART_SetConfig+0x2d0>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d104      	bne.n	800397e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7fe f984 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 8003978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800397c:	e003      	b.n	8003986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800397e:	f7fe f96b 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 8003982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003990:	f040 810c 	bne.w	8003bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800399e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	1891      	adds	r1, r2, r2
 80039ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80039ae:	415b      	adcs	r3, r3
 80039b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039b6:	4621      	mov	r1, r4
 80039b8:	eb12 0801 	adds.w	r8, r2, r1
 80039bc:	4629      	mov	r1, r5
 80039be:	eb43 0901 	adc.w	r9, r3, r1
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d6:	4690      	mov	r8, r2
 80039d8:	4699      	mov	r9, r3
 80039da:	4623      	mov	r3, r4
 80039dc:	eb18 0303 	adds.w	r3, r8, r3
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039e4:	462b      	mov	r3, r5
 80039e6:	eb49 0303 	adc.w	r3, r9, r3
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a02:	460b      	mov	r3, r1
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	653b      	str	r3, [r7, #80]	; 0x50
 8003a08:	4613      	mov	r3, r2
 8003a0a:	eb42 0303 	adc.w	r3, r2, r3
 8003a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a18:	f7fc fc32 	bl	8000280 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003a22:	fba3 2302 	umull	r2, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	011c      	lsls	r4, r3, #4
 8003a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a44:	415b      	adcs	r3, r3
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0b01 	adc.w	fp, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6c:	4692      	mov	sl, r2
 8003a6e:	469b      	mov	fp, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	eb1a 0303 	adds.w	r3, sl, r3
 8003a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	18db      	adds	r3, r3, r3
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aae:	f7fc fbe7 	bl	8000280 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003aba:	fba3 2301 	umull	r2, r3, r3, r1
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2264      	movs	r2, #100	; 0x64
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003adc:	441c      	add	r4, r3
 8003ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	1891      	adds	r1, r2, r2
 8003af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003af8:	415b      	adcs	r3, r3
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b00:	4641      	mov	r1, r8
 8003b02:	1851      	adds	r1, r2, r1
 8003b04:	6339      	str	r1, [r7, #48]	; 0x30
 8003b06:	4649      	mov	r1, r9
 8003b08:	414b      	adcs	r3, r1
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b18:	4659      	mov	r1, fp
 8003b1a:	00cb      	lsls	r3, r1, #3
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b22:	4651      	mov	r1, sl
 8003b24:	00ca      	lsls	r2, r1, #3
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b34:	464b      	mov	r3, r9
 8003b36:	460a      	mov	r2, r1
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b54:	460b      	mov	r3, r1
 8003b56:	18db      	adds	r3, r3, r3
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	eb42 0303 	adc.w	r3, r2, r3
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b6a:	f7fc fb89 	bl	8000280 <__aeabi_uldivmod>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b74:	fba3 1302 	umull	r1, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2164      	movs	r1, #100	; 0x64
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4422      	add	r2, r4
 8003b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b9c:	e105      	b.n	8003daa <UART_SetConfig+0x4d6>
 8003b9e:	bf00      	nop
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40011400 	.word	0x40011400
 8003ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	1891      	adds	r1, r2, r2
 8003bc4:	6239      	str	r1, [r7, #32]
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bce:	4641      	mov	r1, r8
 8003bd0:	1854      	adds	r4, r2, r1
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	eb43 0501 	adc.w	r5, r3, r1
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	00eb      	lsls	r3, r5, #3
 8003be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be6:	00e2      	lsls	r2, r4, #3
 8003be8:	4614      	mov	r4, r2
 8003bea:	461d      	mov	r5, r3
 8003bec:	4643      	mov	r3, r8
 8003bee:	18e3      	adds	r3, r4, r3
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	eb45 0303 	adc.w	r3, r5, r3
 8003bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	008b      	lsls	r3, r1, #2
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c24:	4621      	mov	r1, r4
 8003c26:	008a      	lsls	r2, r1, #2
 8003c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c2c:	f7fc fb28 	bl	8000280 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4b60      	ldr	r3, [pc, #384]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003c36:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	011c      	lsls	r4, r3, #4
 8003c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c50:	4642      	mov	r2, r8
 8003c52:	464b      	mov	r3, r9
 8003c54:	1891      	adds	r1, r2, r2
 8003c56:	61b9      	str	r1, [r7, #24]
 8003c58:	415b      	adcs	r3, r3
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c60:	4641      	mov	r1, r8
 8003c62:	1851      	adds	r1, r2, r1
 8003c64:	6139      	str	r1, [r7, #16]
 8003c66:	4649      	mov	r1, r9
 8003c68:	414b      	adcs	r3, r1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c78:	4659      	mov	r1, fp
 8003c7a:	00cb      	lsls	r3, r1, #3
 8003c7c:	4651      	mov	r1, sl
 8003c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c82:	4651      	mov	r1, sl
 8003c84:	00ca      	lsls	r2, r1, #3
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	189b      	adds	r3, r3, r2
 8003c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c94:	464b      	mov	r3, r9
 8003c96:	460a      	mov	r2, r1
 8003c98:	eb42 0303 	adc.w	r3, r2, r3
 8003c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cb8:	4649      	mov	r1, r9
 8003cba:	008b      	lsls	r3, r1, #2
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	008a      	lsls	r2, r1, #2
 8003cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cca:	f7fc fad9 	bl	8000280 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf2:	441c      	add	r4, r3
 8003cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8003cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d02:	4642      	mov	r2, r8
 8003d04:	464b      	mov	r3, r9
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d12:	4641      	mov	r1, r8
 8003d14:	1851      	adds	r1, r2, r1
 8003d16:	6039      	str	r1, [r7, #0]
 8003d18:	4649      	mov	r1, r9
 8003d1a:	414b      	adcs	r3, r1
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d2a:	4659      	mov	r1, fp
 8003d2c:	00cb      	lsls	r3, r1, #3
 8003d2e:	4651      	mov	r1, sl
 8003d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d34:	4651      	mov	r1, sl
 8003d36:	00ca      	lsls	r2, r1, #3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4642      	mov	r2, r8
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d44:	464b      	mov	r3, r9
 8003d46:	460a      	mov	r2, r1
 8003d48:	eb42 0303 	adc.w	r3, r2, r3
 8003d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	663b      	str	r3, [r7, #96]	; 0x60
 8003d58:	667a      	str	r2, [r7, #100]	; 0x64
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d66:	4649      	mov	r1, r9
 8003d68:	008b      	lsls	r3, r1, #2
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d70:	4641      	mov	r1, r8
 8003d72:	008a      	lsls	r2, r1, #2
 8003d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d78:	f7fc fa82 	bl	8000280 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d82:	fba3 1302 	umull	r1, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2164      	movs	r1, #100	; 0x64
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	; 0x32
 8003d94:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4422      	add	r2, r4
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	bf00      	nop
 8003dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	51eb851f 	.word	0x51eb851f

08003dbc <__errno>:
 8003dbc:	4b01      	ldr	r3, [pc, #4]	; (8003dc4 <__errno+0x8>)
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	2000000c 	.word	0x2000000c

08003dc8 <__libc_init_array>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4d0d      	ldr	r5, [pc, #52]	; (8003e00 <__libc_init_array+0x38>)
 8003dcc:	4c0d      	ldr	r4, [pc, #52]	; (8003e04 <__libc_init_array+0x3c>)
 8003dce:	1b64      	subs	r4, r4, r5
 8003dd0:	10a4      	asrs	r4, r4, #2
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	42a6      	cmp	r6, r4
 8003dd6:	d109      	bne.n	8003dec <__libc_init_array+0x24>
 8003dd8:	4d0b      	ldr	r5, [pc, #44]	; (8003e08 <__libc_init_array+0x40>)
 8003dda:	4c0c      	ldr	r4, [pc, #48]	; (8003e0c <__libc_init_array+0x44>)
 8003ddc:	f000 fc8e 	bl	80046fc <_init>
 8003de0:	1b64      	subs	r4, r4, r5
 8003de2:	10a4      	asrs	r4, r4, #2
 8003de4:	2600      	movs	r6, #0
 8003de6:	42a6      	cmp	r6, r4
 8003de8:	d105      	bne.n	8003df6 <__libc_init_array+0x2e>
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df0:	4798      	blx	r3
 8003df2:	3601      	adds	r6, #1
 8003df4:	e7ee      	b.n	8003dd4 <__libc_init_array+0xc>
 8003df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfa:	4798      	blx	r3
 8003dfc:	3601      	adds	r6, #1
 8003dfe:	e7f2      	b.n	8003de6 <__libc_init_array+0x1e>
 8003e00:	0800478c 	.word	0x0800478c
 8003e04:	0800478c 	.word	0x0800478c
 8003e08:	0800478c 	.word	0x0800478c
 8003e0c:	08004790 	.word	0x08004790

08003e10 <memset>:
 8003e10:	4402      	add	r2, r0
 8003e12:	4603      	mov	r3, r0
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d100      	bne.n	8003e1a <memset+0xa>
 8003e18:	4770      	bx	lr
 8003e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1e:	e7f9      	b.n	8003e14 <memset+0x4>

08003e20 <siprintf>:
 8003e20:	b40e      	push	{r1, r2, r3}
 8003e22:	b500      	push	{lr}
 8003e24:	b09c      	sub	sp, #112	; 0x70
 8003e26:	ab1d      	add	r3, sp, #116	; 0x74
 8003e28:	9002      	str	r0, [sp, #8]
 8003e2a:	9006      	str	r0, [sp, #24]
 8003e2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e30:	4809      	ldr	r0, [pc, #36]	; (8003e58 <siprintf+0x38>)
 8003e32:	9107      	str	r1, [sp, #28]
 8003e34:	9104      	str	r1, [sp, #16]
 8003e36:	4909      	ldr	r1, [pc, #36]	; (8003e5c <siprintf+0x3c>)
 8003e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e3c:	9105      	str	r1, [sp, #20]
 8003e3e:	6800      	ldr	r0, [r0, #0]
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	a902      	add	r1, sp, #8
 8003e44:	f000 f868 	bl	8003f18 <_svfiprintf_r>
 8003e48:	9b02      	ldr	r3, [sp, #8]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	b01c      	add	sp, #112	; 0x70
 8003e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e54:	b003      	add	sp, #12
 8003e56:	4770      	bx	lr
 8003e58:	2000000c 	.word	0x2000000c
 8003e5c:	ffff0208 	.word	0xffff0208

08003e60 <__ssputs_r>:
 8003e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e64:	688e      	ldr	r6, [r1, #8]
 8003e66:	429e      	cmp	r6, r3
 8003e68:	4682      	mov	sl, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4690      	mov	r8, r2
 8003e6e:	461f      	mov	r7, r3
 8003e70:	d838      	bhi.n	8003ee4 <__ssputs_r+0x84>
 8003e72:	898a      	ldrh	r2, [r1, #12]
 8003e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e78:	d032      	beq.n	8003ee0 <__ssputs_r+0x80>
 8003e7a:	6825      	ldr	r5, [r4, #0]
 8003e7c:	6909      	ldr	r1, [r1, #16]
 8003e7e:	eba5 0901 	sub.w	r9, r5, r1
 8003e82:	6965      	ldr	r5, [r4, #20]
 8003e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	444b      	add	r3, r9
 8003e90:	106d      	asrs	r5, r5, #1
 8003e92:	429d      	cmp	r5, r3
 8003e94:	bf38      	it	cc
 8003e96:	461d      	movcc	r5, r3
 8003e98:	0553      	lsls	r3, r2, #21
 8003e9a:	d531      	bpl.n	8003f00 <__ssputs_r+0xa0>
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	f000 fb63 	bl	8004568 <_malloc_r>
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	b950      	cbnz	r0, 8003ebc <__ssputs_r+0x5c>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	f8ca 3000 	str.w	r3, [sl]
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ebc:	6921      	ldr	r1, [r4, #16]
 8003ebe:	464a      	mov	r2, r9
 8003ec0:	f000 fabe 	bl	8004440 <memcpy>
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ece:	81a3      	strh	r3, [r4, #12]
 8003ed0:	6126      	str	r6, [r4, #16]
 8003ed2:	6165      	str	r5, [r4, #20]
 8003ed4:	444e      	add	r6, r9
 8003ed6:	eba5 0509 	sub.w	r5, r5, r9
 8003eda:	6026      	str	r6, [r4, #0]
 8003edc:	60a5      	str	r5, [r4, #8]
 8003ede:	463e      	mov	r6, r7
 8003ee0:	42be      	cmp	r6, r7
 8003ee2:	d900      	bls.n	8003ee6 <__ssputs_r+0x86>
 8003ee4:	463e      	mov	r6, r7
 8003ee6:	6820      	ldr	r0, [r4, #0]
 8003ee8:	4632      	mov	r2, r6
 8003eea:	4641      	mov	r1, r8
 8003eec:	f000 fab6 	bl	800445c <memmove>
 8003ef0:	68a3      	ldr	r3, [r4, #8]
 8003ef2:	1b9b      	subs	r3, r3, r6
 8003ef4:	60a3      	str	r3, [r4, #8]
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	4433      	add	r3, r6
 8003efa:	6023      	str	r3, [r4, #0]
 8003efc:	2000      	movs	r0, #0
 8003efe:	e7db      	b.n	8003eb8 <__ssputs_r+0x58>
 8003f00:	462a      	mov	r2, r5
 8003f02:	f000 fba5 	bl	8004650 <_realloc_r>
 8003f06:	4606      	mov	r6, r0
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d1e1      	bne.n	8003ed0 <__ssputs_r+0x70>
 8003f0c:	6921      	ldr	r1, [r4, #16]
 8003f0e:	4650      	mov	r0, sl
 8003f10:	f000 fabe 	bl	8004490 <_free_r>
 8003f14:	e7c7      	b.n	8003ea6 <__ssputs_r+0x46>
	...

08003f18 <_svfiprintf_r>:
 8003f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1c:	4698      	mov	r8, r3
 8003f1e:	898b      	ldrh	r3, [r1, #12]
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	b09d      	sub	sp, #116	; 0x74
 8003f24:	4607      	mov	r7, r0
 8003f26:	460d      	mov	r5, r1
 8003f28:	4614      	mov	r4, r2
 8003f2a:	d50e      	bpl.n	8003f4a <_svfiprintf_r+0x32>
 8003f2c:	690b      	ldr	r3, [r1, #16]
 8003f2e:	b963      	cbnz	r3, 8003f4a <_svfiprintf_r+0x32>
 8003f30:	2140      	movs	r1, #64	; 0x40
 8003f32:	f000 fb19 	bl	8004568 <_malloc_r>
 8003f36:	6028      	str	r0, [r5, #0]
 8003f38:	6128      	str	r0, [r5, #16]
 8003f3a:	b920      	cbnz	r0, 8003f46 <_svfiprintf_r+0x2e>
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f44:	e0d1      	b.n	80040ea <_svfiprintf_r+0x1d2>
 8003f46:	2340      	movs	r3, #64	; 0x40
 8003f48:	616b      	str	r3, [r5, #20]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f4e:	2320      	movs	r3, #32
 8003f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f58:	2330      	movs	r3, #48	; 0x30
 8003f5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004104 <_svfiprintf_r+0x1ec>
 8003f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f62:	f04f 0901 	mov.w	r9, #1
 8003f66:	4623      	mov	r3, r4
 8003f68:	469a      	mov	sl, r3
 8003f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f6e:	b10a      	cbz	r2, 8003f74 <_svfiprintf_r+0x5c>
 8003f70:	2a25      	cmp	r2, #37	; 0x25
 8003f72:	d1f9      	bne.n	8003f68 <_svfiprintf_r+0x50>
 8003f74:	ebba 0b04 	subs.w	fp, sl, r4
 8003f78:	d00b      	beq.n	8003f92 <_svfiprintf_r+0x7a>
 8003f7a:	465b      	mov	r3, fp
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	4629      	mov	r1, r5
 8003f80:	4638      	mov	r0, r7
 8003f82:	f7ff ff6d 	bl	8003e60 <__ssputs_r>
 8003f86:	3001      	adds	r0, #1
 8003f88:	f000 80aa 	beq.w	80040e0 <_svfiprintf_r+0x1c8>
 8003f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f8e:	445a      	add	r2, fp
 8003f90:	9209      	str	r2, [sp, #36]	; 0x24
 8003f92:	f89a 3000 	ldrb.w	r3, [sl]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80a2 	beq.w	80040e0 <_svfiprintf_r+0x1c8>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fa6:	f10a 0a01 	add.w	sl, sl, #1
 8003faa:	9304      	str	r3, [sp, #16]
 8003fac:	9307      	str	r3, [sp, #28]
 8003fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8003fb4:	4654      	mov	r4, sl
 8003fb6:	2205      	movs	r2, #5
 8003fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fbc:	4851      	ldr	r0, [pc, #324]	; (8004104 <_svfiprintf_r+0x1ec>)
 8003fbe:	f7fc f90f 	bl	80001e0 <memchr>
 8003fc2:	9a04      	ldr	r2, [sp, #16]
 8003fc4:	b9d8      	cbnz	r0, 8003ffe <_svfiprintf_r+0xe6>
 8003fc6:	06d0      	lsls	r0, r2, #27
 8003fc8:	bf44      	itt	mi
 8003fca:	2320      	movmi	r3, #32
 8003fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fd0:	0711      	lsls	r1, r2, #28
 8003fd2:	bf44      	itt	mi
 8003fd4:	232b      	movmi	r3, #43	; 0x2b
 8003fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fda:	f89a 3000 	ldrb.w	r3, [sl]
 8003fde:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe0:	d015      	beq.n	800400e <_svfiprintf_r+0xf6>
 8003fe2:	9a07      	ldr	r2, [sp, #28]
 8003fe4:	4654      	mov	r4, sl
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	f04f 0c0a 	mov.w	ip, #10
 8003fec:	4621      	mov	r1, r4
 8003fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ff2:	3b30      	subs	r3, #48	; 0x30
 8003ff4:	2b09      	cmp	r3, #9
 8003ff6:	d94e      	bls.n	8004096 <_svfiprintf_r+0x17e>
 8003ff8:	b1b0      	cbz	r0, 8004028 <_svfiprintf_r+0x110>
 8003ffa:	9207      	str	r2, [sp, #28]
 8003ffc:	e014      	b.n	8004028 <_svfiprintf_r+0x110>
 8003ffe:	eba0 0308 	sub.w	r3, r0, r8
 8004002:	fa09 f303 	lsl.w	r3, r9, r3
 8004006:	4313      	orrs	r3, r2
 8004008:	9304      	str	r3, [sp, #16]
 800400a:	46a2      	mov	sl, r4
 800400c:	e7d2      	b.n	8003fb4 <_svfiprintf_r+0x9c>
 800400e:	9b03      	ldr	r3, [sp, #12]
 8004010:	1d19      	adds	r1, r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	9103      	str	r1, [sp, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	bfbb      	ittet	lt
 800401a:	425b      	neglt	r3, r3
 800401c:	f042 0202 	orrlt.w	r2, r2, #2
 8004020:	9307      	strge	r3, [sp, #28]
 8004022:	9307      	strlt	r3, [sp, #28]
 8004024:	bfb8      	it	lt
 8004026:	9204      	strlt	r2, [sp, #16]
 8004028:	7823      	ldrb	r3, [r4, #0]
 800402a:	2b2e      	cmp	r3, #46	; 0x2e
 800402c:	d10c      	bne.n	8004048 <_svfiprintf_r+0x130>
 800402e:	7863      	ldrb	r3, [r4, #1]
 8004030:	2b2a      	cmp	r3, #42	; 0x2a
 8004032:	d135      	bne.n	80040a0 <_svfiprintf_r+0x188>
 8004034:	9b03      	ldr	r3, [sp, #12]
 8004036:	1d1a      	adds	r2, r3, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	9203      	str	r2, [sp, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	bfb8      	it	lt
 8004040:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004044:	3402      	adds	r4, #2
 8004046:	9305      	str	r3, [sp, #20]
 8004048:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004114 <_svfiprintf_r+0x1fc>
 800404c:	7821      	ldrb	r1, [r4, #0]
 800404e:	2203      	movs	r2, #3
 8004050:	4650      	mov	r0, sl
 8004052:	f7fc f8c5 	bl	80001e0 <memchr>
 8004056:	b140      	cbz	r0, 800406a <_svfiprintf_r+0x152>
 8004058:	2340      	movs	r3, #64	; 0x40
 800405a:	eba0 000a 	sub.w	r0, r0, sl
 800405e:	fa03 f000 	lsl.w	r0, r3, r0
 8004062:	9b04      	ldr	r3, [sp, #16]
 8004064:	4303      	orrs	r3, r0
 8004066:	3401      	adds	r4, #1
 8004068:	9304      	str	r3, [sp, #16]
 800406a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800406e:	4826      	ldr	r0, [pc, #152]	; (8004108 <_svfiprintf_r+0x1f0>)
 8004070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004074:	2206      	movs	r2, #6
 8004076:	f7fc f8b3 	bl	80001e0 <memchr>
 800407a:	2800      	cmp	r0, #0
 800407c:	d038      	beq.n	80040f0 <_svfiprintf_r+0x1d8>
 800407e:	4b23      	ldr	r3, [pc, #140]	; (800410c <_svfiprintf_r+0x1f4>)
 8004080:	bb1b      	cbnz	r3, 80040ca <_svfiprintf_r+0x1b2>
 8004082:	9b03      	ldr	r3, [sp, #12]
 8004084:	3307      	adds	r3, #7
 8004086:	f023 0307 	bic.w	r3, r3, #7
 800408a:	3308      	adds	r3, #8
 800408c:	9303      	str	r3, [sp, #12]
 800408e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004090:	4433      	add	r3, r6
 8004092:	9309      	str	r3, [sp, #36]	; 0x24
 8004094:	e767      	b.n	8003f66 <_svfiprintf_r+0x4e>
 8004096:	fb0c 3202 	mla	r2, ip, r2, r3
 800409a:	460c      	mov	r4, r1
 800409c:	2001      	movs	r0, #1
 800409e:	e7a5      	b.n	8003fec <_svfiprintf_r+0xd4>
 80040a0:	2300      	movs	r3, #0
 80040a2:	3401      	adds	r4, #1
 80040a4:	9305      	str	r3, [sp, #20]
 80040a6:	4619      	mov	r1, r3
 80040a8:	f04f 0c0a 	mov.w	ip, #10
 80040ac:	4620      	mov	r0, r4
 80040ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040b2:	3a30      	subs	r2, #48	; 0x30
 80040b4:	2a09      	cmp	r2, #9
 80040b6:	d903      	bls.n	80040c0 <_svfiprintf_r+0x1a8>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0c5      	beq.n	8004048 <_svfiprintf_r+0x130>
 80040bc:	9105      	str	r1, [sp, #20]
 80040be:	e7c3      	b.n	8004048 <_svfiprintf_r+0x130>
 80040c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80040c4:	4604      	mov	r4, r0
 80040c6:	2301      	movs	r3, #1
 80040c8:	e7f0      	b.n	80040ac <_svfiprintf_r+0x194>
 80040ca:	ab03      	add	r3, sp, #12
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	462a      	mov	r2, r5
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <_svfiprintf_r+0x1f8>)
 80040d2:	a904      	add	r1, sp, #16
 80040d4:	4638      	mov	r0, r7
 80040d6:	f3af 8000 	nop.w
 80040da:	1c42      	adds	r2, r0, #1
 80040dc:	4606      	mov	r6, r0
 80040de:	d1d6      	bne.n	800408e <_svfiprintf_r+0x176>
 80040e0:	89ab      	ldrh	r3, [r5, #12]
 80040e2:	065b      	lsls	r3, r3, #25
 80040e4:	f53f af2c 	bmi.w	8003f40 <_svfiprintf_r+0x28>
 80040e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ea:	b01d      	add	sp, #116	; 0x74
 80040ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f0:	ab03      	add	r3, sp, #12
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	462a      	mov	r2, r5
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <_svfiprintf_r+0x1f8>)
 80040f8:	a904      	add	r1, sp, #16
 80040fa:	4638      	mov	r0, r7
 80040fc:	f000 f87a 	bl	80041f4 <_printf_i>
 8004100:	e7eb      	b.n	80040da <_svfiprintf_r+0x1c2>
 8004102:	bf00      	nop
 8004104:	08004750 	.word	0x08004750
 8004108:	0800475a 	.word	0x0800475a
 800410c:	00000000 	.word	0x00000000
 8004110:	08003e61 	.word	0x08003e61
 8004114:	08004756 	.word	0x08004756

08004118 <_printf_common>:
 8004118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800411c:	4616      	mov	r6, r2
 800411e:	4699      	mov	r9, r3
 8004120:	688a      	ldr	r2, [r1, #8]
 8004122:	690b      	ldr	r3, [r1, #16]
 8004124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004128:	4293      	cmp	r3, r2
 800412a:	bfb8      	it	lt
 800412c:	4613      	movlt	r3, r2
 800412e:	6033      	str	r3, [r6, #0]
 8004130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004134:	4607      	mov	r7, r0
 8004136:	460c      	mov	r4, r1
 8004138:	b10a      	cbz	r2, 800413e <_printf_common+0x26>
 800413a:	3301      	adds	r3, #1
 800413c:	6033      	str	r3, [r6, #0]
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	0699      	lsls	r1, r3, #26
 8004142:	bf42      	ittt	mi
 8004144:	6833      	ldrmi	r3, [r6, #0]
 8004146:	3302      	addmi	r3, #2
 8004148:	6033      	strmi	r3, [r6, #0]
 800414a:	6825      	ldr	r5, [r4, #0]
 800414c:	f015 0506 	ands.w	r5, r5, #6
 8004150:	d106      	bne.n	8004160 <_printf_common+0x48>
 8004152:	f104 0a19 	add.w	sl, r4, #25
 8004156:	68e3      	ldr	r3, [r4, #12]
 8004158:	6832      	ldr	r2, [r6, #0]
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	42ab      	cmp	r3, r5
 800415e:	dc26      	bgt.n	80041ae <_printf_common+0x96>
 8004160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004164:	1e13      	subs	r3, r2, #0
 8004166:	6822      	ldr	r2, [r4, #0]
 8004168:	bf18      	it	ne
 800416a:	2301      	movne	r3, #1
 800416c:	0692      	lsls	r2, r2, #26
 800416e:	d42b      	bmi.n	80041c8 <_printf_common+0xb0>
 8004170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004174:	4649      	mov	r1, r9
 8004176:	4638      	mov	r0, r7
 8004178:	47c0      	blx	r8
 800417a:	3001      	adds	r0, #1
 800417c:	d01e      	beq.n	80041bc <_printf_common+0xa4>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	68e5      	ldr	r5, [r4, #12]
 8004182:	6832      	ldr	r2, [r6, #0]
 8004184:	f003 0306 	and.w	r3, r3, #6
 8004188:	2b04      	cmp	r3, #4
 800418a:	bf08      	it	eq
 800418c:	1aad      	subeq	r5, r5, r2
 800418e:	68a3      	ldr	r3, [r4, #8]
 8004190:	6922      	ldr	r2, [r4, #16]
 8004192:	bf0c      	ite	eq
 8004194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004198:	2500      	movne	r5, #0
 800419a:	4293      	cmp	r3, r2
 800419c:	bfc4      	itt	gt
 800419e:	1a9b      	subgt	r3, r3, r2
 80041a0:	18ed      	addgt	r5, r5, r3
 80041a2:	2600      	movs	r6, #0
 80041a4:	341a      	adds	r4, #26
 80041a6:	42b5      	cmp	r5, r6
 80041a8:	d11a      	bne.n	80041e0 <_printf_common+0xc8>
 80041aa:	2000      	movs	r0, #0
 80041ac:	e008      	b.n	80041c0 <_printf_common+0xa8>
 80041ae:	2301      	movs	r3, #1
 80041b0:	4652      	mov	r2, sl
 80041b2:	4649      	mov	r1, r9
 80041b4:	4638      	mov	r0, r7
 80041b6:	47c0      	blx	r8
 80041b8:	3001      	adds	r0, #1
 80041ba:	d103      	bne.n	80041c4 <_printf_common+0xac>
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c4:	3501      	adds	r5, #1
 80041c6:	e7c6      	b.n	8004156 <_printf_common+0x3e>
 80041c8:	18e1      	adds	r1, r4, r3
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	2030      	movs	r0, #48	; 0x30
 80041ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041d2:	4422      	add	r2, r4
 80041d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041dc:	3302      	adds	r3, #2
 80041de:	e7c7      	b.n	8004170 <_printf_common+0x58>
 80041e0:	2301      	movs	r3, #1
 80041e2:	4622      	mov	r2, r4
 80041e4:	4649      	mov	r1, r9
 80041e6:	4638      	mov	r0, r7
 80041e8:	47c0      	blx	r8
 80041ea:	3001      	adds	r0, #1
 80041ec:	d0e6      	beq.n	80041bc <_printf_common+0xa4>
 80041ee:	3601      	adds	r6, #1
 80041f0:	e7d9      	b.n	80041a6 <_printf_common+0x8e>
	...

080041f4 <_printf_i>:
 80041f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041f8:	7e0f      	ldrb	r7, [r1, #24]
 80041fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041fc:	2f78      	cmp	r7, #120	; 0x78
 80041fe:	4691      	mov	r9, r2
 8004200:	4680      	mov	r8, r0
 8004202:	460c      	mov	r4, r1
 8004204:	469a      	mov	sl, r3
 8004206:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800420a:	d807      	bhi.n	800421c <_printf_i+0x28>
 800420c:	2f62      	cmp	r7, #98	; 0x62
 800420e:	d80a      	bhi.n	8004226 <_printf_i+0x32>
 8004210:	2f00      	cmp	r7, #0
 8004212:	f000 80d8 	beq.w	80043c6 <_printf_i+0x1d2>
 8004216:	2f58      	cmp	r7, #88	; 0x58
 8004218:	f000 80a3 	beq.w	8004362 <_printf_i+0x16e>
 800421c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004224:	e03a      	b.n	800429c <_printf_i+0xa8>
 8004226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800422a:	2b15      	cmp	r3, #21
 800422c:	d8f6      	bhi.n	800421c <_printf_i+0x28>
 800422e:	a101      	add	r1, pc, #4	; (adr r1, 8004234 <_printf_i+0x40>)
 8004230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004234:	0800428d 	.word	0x0800428d
 8004238:	080042a1 	.word	0x080042a1
 800423c:	0800421d 	.word	0x0800421d
 8004240:	0800421d 	.word	0x0800421d
 8004244:	0800421d 	.word	0x0800421d
 8004248:	0800421d 	.word	0x0800421d
 800424c:	080042a1 	.word	0x080042a1
 8004250:	0800421d 	.word	0x0800421d
 8004254:	0800421d 	.word	0x0800421d
 8004258:	0800421d 	.word	0x0800421d
 800425c:	0800421d 	.word	0x0800421d
 8004260:	080043ad 	.word	0x080043ad
 8004264:	080042d1 	.word	0x080042d1
 8004268:	0800438f 	.word	0x0800438f
 800426c:	0800421d 	.word	0x0800421d
 8004270:	0800421d 	.word	0x0800421d
 8004274:	080043cf 	.word	0x080043cf
 8004278:	0800421d 	.word	0x0800421d
 800427c:	080042d1 	.word	0x080042d1
 8004280:	0800421d 	.word	0x0800421d
 8004284:	0800421d 	.word	0x0800421d
 8004288:	08004397 	.word	0x08004397
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	1d1a      	adds	r2, r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	602a      	str	r2, [r5, #0]
 8004294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800429c:	2301      	movs	r3, #1
 800429e:	e0a3      	b.n	80043e8 <_printf_i+0x1f4>
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	6829      	ldr	r1, [r5, #0]
 80042a4:	0606      	lsls	r6, r0, #24
 80042a6:	f101 0304 	add.w	r3, r1, #4
 80042aa:	d50a      	bpl.n	80042c2 <_printf_i+0xce>
 80042ac:	680e      	ldr	r6, [r1, #0]
 80042ae:	602b      	str	r3, [r5, #0]
 80042b0:	2e00      	cmp	r6, #0
 80042b2:	da03      	bge.n	80042bc <_printf_i+0xc8>
 80042b4:	232d      	movs	r3, #45	; 0x2d
 80042b6:	4276      	negs	r6, r6
 80042b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042bc:	485e      	ldr	r0, [pc, #376]	; (8004438 <_printf_i+0x244>)
 80042be:	230a      	movs	r3, #10
 80042c0:	e019      	b.n	80042f6 <_printf_i+0x102>
 80042c2:	680e      	ldr	r6, [r1, #0]
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042ca:	bf18      	it	ne
 80042cc:	b236      	sxthne	r6, r6
 80042ce:	e7ef      	b.n	80042b0 <_printf_i+0xbc>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	6820      	ldr	r0, [r4, #0]
 80042d4:	1d19      	adds	r1, r3, #4
 80042d6:	6029      	str	r1, [r5, #0]
 80042d8:	0601      	lsls	r1, r0, #24
 80042da:	d501      	bpl.n	80042e0 <_printf_i+0xec>
 80042dc:	681e      	ldr	r6, [r3, #0]
 80042de:	e002      	b.n	80042e6 <_printf_i+0xf2>
 80042e0:	0646      	lsls	r6, r0, #25
 80042e2:	d5fb      	bpl.n	80042dc <_printf_i+0xe8>
 80042e4:	881e      	ldrh	r6, [r3, #0]
 80042e6:	4854      	ldr	r0, [pc, #336]	; (8004438 <_printf_i+0x244>)
 80042e8:	2f6f      	cmp	r7, #111	; 0x6f
 80042ea:	bf0c      	ite	eq
 80042ec:	2308      	moveq	r3, #8
 80042ee:	230a      	movne	r3, #10
 80042f0:	2100      	movs	r1, #0
 80042f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042f6:	6865      	ldr	r5, [r4, #4]
 80042f8:	60a5      	str	r5, [r4, #8]
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	bfa2      	ittt	ge
 80042fe:	6821      	ldrge	r1, [r4, #0]
 8004300:	f021 0104 	bicge.w	r1, r1, #4
 8004304:	6021      	strge	r1, [r4, #0]
 8004306:	b90e      	cbnz	r6, 800430c <_printf_i+0x118>
 8004308:	2d00      	cmp	r5, #0
 800430a:	d04d      	beq.n	80043a8 <_printf_i+0x1b4>
 800430c:	4615      	mov	r5, r2
 800430e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004312:	fb03 6711 	mls	r7, r3, r1, r6
 8004316:	5dc7      	ldrb	r7, [r0, r7]
 8004318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800431c:	4637      	mov	r7, r6
 800431e:	42bb      	cmp	r3, r7
 8004320:	460e      	mov	r6, r1
 8004322:	d9f4      	bls.n	800430e <_printf_i+0x11a>
 8004324:	2b08      	cmp	r3, #8
 8004326:	d10b      	bne.n	8004340 <_printf_i+0x14c>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	07de      	lsls	r6, r3, #31
 800432c:	d508      	bpl.n	8004340 <_printf_i+0x14c>
 800432e:	6923      	ldr	r3, [r4, #16]
 8004330:	6861      	ldr	r1, [r4, #4]
 8004332:	4299      	cmp	r1, r3
 8004334:	bfde      	ittt	le
 8004336:	2330      	movle	r3, #48	; 0x30
 8004338:	f805 3c01 	strble.w	r3, [r5, #-1]
 800433c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004340:	1b52      	subs	r2, r2, r5
 8004342:	6122      	str	r2, [r4, #16]
 8004344:	f8cd a000 	str.w	sl, [sp]
 8004348:	464b      	mov	r3, r9
 800434a:	aa03      	add	r2, sp, #12
 800434c:	4621      	mov	r1, r4
 800434e:	4640      	mov	r0, r8
 8004350:	f7ff fee2 	bl	8004118 <_printf_common>
 8004354:	3001      	adds	r0, #1
 8004356:	d14c      	bne.n	80043f2 <_printf_i+0x1fe>
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	b004      	add	sp, #16
 800435e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004362:	4835      	ldr	r0, [pc, #212]	; (8004438 <_printf_i+0x244>)
 8004364:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004368:	6829      	ldr	r1, [r5, #0]
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004370:	6029      	str	r1, [r5, #0]
 8004372:	061d      	lsls	r5, r3, #24
 8004374:	d514      	bpl.n	80043a0 <_printf_i+0x1ac>
 8004376:	07df      	lsls	r7, r3, #31
 8004378:	bf44      	itt	mi
 800437a:	f043 0320 	orrmi.w	r3, r3, #32
 800437e:	6023      	strmi	r3, [r4, #0]
 8004380:	b91e      	cbnz	r6, 800438a <_printf_i+0x196>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	f023 0320 	bic.w	r3, r3, #32
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	2310      	movs	r3, #16
 800438c:	e7b0      	b.n	80042f0 <_printf_i+0xfc>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	f043 0320 	orr.w	r3, r3, #32
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	2378      	movs	r3, #120	; 0x78
 8004398:	4828      	ldr	r0, [pc, #160]	; (800443c <_printf_i+0x248>)
 800439a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800439e:	e7e3      	b.n	8004368 <_printf_i+0x174>
 80043a0:	0659      	lsls	r1, r3, #25
 80043a2:	bf48      	it	mi
 80043a4:	b2b6      	uxthmi	r6, r6
 80043a6:	e7e6      	b.n	8004376 <_printf_i+0x182>
 80043a8:	4615      	mov	r5, r2
 80043aa:	e7bb      	b.n	8004324 <_printf_i+0x130>
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	6826      	ldr	r6, [r4, #0]
 80043b0:	6961      	ldr	r1, [r4, #20]
 80043b2:	1d18      	adds	r0, r3, #4
 80043b4:	6028      	str	r0, [r5, #0]
 80043b6:	0635      	lsls	r5, r6, #24
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	d501      	bpl.n	80043c0 <_printf_i+0x1cc>
 80043bc:	6019      	str	r1, [r3, #0]
 80043be:	e002      	b.n	80043c6 <_printf_i+0x1d2>
 80043c0:	0670      	lsls	r0, r6, #25
 80043c2:	d5fb      	bpl.n	80043bc <_printf_i+0x1c8>
 80043c4:	8019      	strh	r1, [r3, #0]
 80043c6:	2300      	movs	r3, #0
 80043c8:	6123      	str	r3, [r4, #16]
 80043ca:	4615      	mov	r5, r2
 80043cc:	e7ba      	b.n	8004344 <_printf_i+0x150>
 80043ce:	682b      	ldr	r3, [r5, #0]
 80043d0:	1d1a      	adds	r2, r3, #4
 80043d2:	602a      	str	r2, [r5, #0]
 80043d4:	681d      	ldr	r5, [r3, #0]
 80043d6:	6862      	ldr	r2, [r4, #4]
 80043d8:	2100      	movs	r1, #0
 80043da:	4628      	mov	r0, r5
 80043dc:	f7fb ff00 	bl	80001e0 <memchr>
 80043e0:	b108      	cbz	r0, 80043e6 <_printf_i+0x1f2>
 80043e2:	1b40      	subs	r0, r0, r5
 80043e4:	6060      	str	r0, [r4, #4]
 80043e6:	6863      	ldr	r3, [r4, #4]
 80043e8:	6123      	str	r3, [r4, #16]
 80043ea:	2300      	movs	r3, #0
 80043ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f0:	e7a8      	b.n	8004344 <_printf_i+0x150>
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	462a      	mov	r2, r5
 80043f6:	4649      	mov	r1, r9
 80043f8:	4640      	mov	r0, r8
 80043fa:	47d0      	blx	sl
 80043fc:	3001      	adds	r0, #1
 80043fe:	d0ab      	beq.n	8004358 <_printf_i+0x164>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	079b      	lsls	r3, r3, #30
 8004404:	d413      	bmi.n	800442e <_printf_i+0x23a>
 8004406:	68e0      	ldr	r0, [r4, #12]
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	4298      	cmp	r0, r3
 800440c:	bfb8      	it	lt
 800440e:	4618      	movlt	r0, r3
 8004410:	e7a4      	b.n	800435c <_printf_i+0x168>
 8004412:	2301      	movs	r3, #1
 8004414:	4632      	mov	r2, r6
 8004416:	4649      	mov	r1, r9
 8004418:	4640      	mov	r0, r8
 800441a:	47d0      	blx	sl
 800441c:	3001      	adds	r0, #1
 800441e:	d09b      	beq.n	8004358 <_printf_i+0x164>
 8004420:	3501      	adds	r5, #1
 8004422:	68e3      	ldr	r3, [r4, #12]
 8004424:	9903      	ldr	r1, [sp, #12]
 8004426:	1a5b      	subs	r3, r3, r1
 8004428:	42ab      	cmp	r3, r5
 800442a:	dcf2      	bgt.n	8004412 <_printf_i+0x21e>
 800442c:	e7eb      	b.n	8004406 <_printf_i+0x212>
 800442e:	2500      	movs	r5, #0
 8004430:	f104 0619 	add.w	r6, r4, #25
 8004434:	e7f5      	b.n	8004422 <_printf_i+0x22e>
 8004436:	bf00      	nop
 8004438:	08004761 	.word	0x08004761
 800443c:	08004772 	.word	0x08004772

08004440 <memcpy>:
 8004440:	440a      	add	r2, r1
 8004442:	4291      	cmp	r1, r2
 8004444:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004448:	d100      	bne.n	800444c <memcpy+0xc>
 800444a:	4770      	bx	lr
 800444c:	b510      	push	{r4, lr}
 800444e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004456:	4291      	cmp	r1, r2
 8004458:	d1f9      	bne.n	800444e <memcpy+0xe>
 800445a:	bd10      	pop	{r4, pc}

0800445c <memmove>:
 800445c:	4288      	cmp	r0, r1
 800445e:	b510      	push	{r4, lr}
 8004460:	eb01 0402 	add.w	r4, r1, r2
 8004464:	d902      	bls.n	800446c <memmove+0x10>
 8004466:	4284      	cmp	r4, r0
 8004468:	4623      	mov	r3, r4
 800446a:	d807      	bhi.n	800447c <memmove+0x20>
 800446c:	1e43      	subs	r3, r0, #1
 800446e:	42a1      	cmp	r1, r4
 8004470:	d008      	beq.n	8004484 <memmove+0x28>
 8004472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800447a:	e7f8      	b.n	800446e <memmove+0x12>
 800447c:	4402      	add	r2, r0
 800447e:	4601      	mov	r1, r0
 8004480:	428a      	cmp	r2, r1
 8004482:	d100      	bne.n	8004486 <memmove+0x2a>
 8004484:	bd10      	pop	{r4, pc}
 8004486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800448a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800448e:	e7f7      	b.n	8004480 <memmove+0x24>

08004490 <_free_r>:
 8004490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004492:	2900      	cmp	r1, #0
 8004494:	d044      	beq.n	8004520 <_free_r+0x90>
 8004496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800449a:	9001      	str	r0, [sp, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f1a1 0404 	sub.w	r4, r1, #4
 80044a2:	bfb8      	it	lt
 80044a4:	18e4      	addlt	r4, r4, r3
 80044a6:	f000 f913 	bl	80046d0 <__malloc_lock>
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <_free_r+0x94>)
 80044ac:	9801      	ldr	r0, [sp, #4]
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	b933      	cbnz	r3, 80044c0 <_free_r+0x30>
 80044b2:	6063      	str	r3, [r4, #4]
 80044b4:	6014      	str	r4, [r2, #0]
 80044b6:	b003      	add	sp, #12
 80044b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044bc:	f000 b90e 	b.w	80046dc <__malloc_unlock>
 80044c0:	42a3      	cmp	r3, r4
 80044c2:	d908      	bls.n	80044d6 <_free_r+0x46>
 80044c4:	6825      	ldr	r5, [r4, #0]
 80044c6:	1961      	adds	r1, r4, r5
 80044c8:	428b      	cmp	r3, r1
 80044ca:	bf01      	itttt	eq
 80044cc:	6819      	ldreq	r1, [r3, #0]
 80044ce:	685b      	ldreq	r3, [r3, #4]
 80044d0:	1949      	addeq	r1, r1, r5
 80044d2:	6021      	streq	r1, [r4, #0]
 80044d4:	e7ed      	b.n	80044b2 <_free_r+0x22>
 80044d6:	461a      	mov	r2, r3
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	b10b      	cbz	r3, 80044e0 <_free_r+0x50>
 80044dc:	42a3      	cmp	r3, r4
 80044de:	d9fa      	bls.n	80044d6 <_free_r+0x46>
 80044e0:	6811      	ldr	r1, [r2, #0]
 80044e2:	1855      	adds	r5, r2, r1
 80044e4:	42a5      	cmp	r5, r4
 80044e6:	d10b      	bne.n	8004500 <_free_r+0x70>
 80044e8:	6824      	ldr	r4, [r4, #0]
 80044ea:	4421      	add	r1, r4
 80044ec:	1854      	adds	r4, r2, r1
 80044ee:	42a3      	cmp	r3, r4
 80044f0:	6011      	str	r1, [r2, #0]
 80044f2:	d1e0      	bne.n	80044b6 <_free_r+0x26>
 80044f4:	681c      	ldr	r4, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	6053      	str	r3, [r2, #4]
 80044fa:	4421      	add	r1, r4
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	e7da      	b.n	80044b6 <_free_r+0x26>
 8004500:	d902      	bls.n	8004508 <_free_r+0x78>
 8004502:	230c      	movs	r3, #12
 8004504:	6003      	str	r3, [r0, #0]
 8004506:	e7d6      	b.n	80044b6 <_free_r+0x26>
 8004508:	6825      	ldr	r5, [r4, #0]
 800450a:	1961      	adds	r1, r4, r5
 800450c:	428b      	cmp	r3, r1
 800450e:	bf04      	itt	eq
 8004510:	6819      	ldreq	r1, [r3, #0]
 8004512:	685b      	ldreq	r3, [r3, #4]
 8004514:	6063      	str	r3, [r4, #4]
 8004516:	bf04      	itt	eq
 8004518:	1949      	addeq	r1, r1, r5
 800451a:	6021      	streq	r1, [r4, #0]
 800451c:	6054      	str	r4, [r2, #4]
 800451e:	e7ca      	b.n	80044b6 <_free_r+0x26>
 8004520:	b003      	add	sp, #12
 8004522:	bd30      	pop	{r4, r5, pc}
 8004524:	20000120 	.word	0x20000120

08004528 <sbrk_aligned>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4e0e      	ldr	r6, [pc, #56]	; (8004564 <sbrk_aligned+0x3c>)
 800452c:	460c      	mov	r4, r1
 800452e:	6831      	ldr	r1, [r6, #0]
 8004530:	4605      	mov	r5, r0
 8004532:	b911      	cbnz	r1, 800453a <sbrk_aligned+0x12>
 8004534:	f000 f8bc 	bl	80046b0 <_sbrk_r>
 8004538:	6030      	str	r0, [r6, #0]
 800453a:	4621      	mov	r1, r4
 800453c:	4628      	mov	r0, r5
 800453e:	f000 f8b7 	bl	80046b0 <_sbrk_r>
 8004542:	1c43      	adds	r3, r0, #1
 8004544:	d00a      	beq.n	800455c <sbrk_aligned+0x34>
 8004546:	1cc4      	adds	r4, r0, #3
 8004548:	f024 0403 	bic.w	r4, r4, #3
 800454c:	42a0      	cmp	r0, r4
 800454e:	d007      	beq.n	8004560 <sbrk_aligned+0x38>
 8004550:	1a21      	subs	r1, r4, r0
 8004552:	4628      	mov	r0, r5
 8004554:	f000 f8ac 	bl	80046b0 <_sbrk_r>
 8004558:	3001      	adds	r0, #1
 800455a:	d101      	bne.n	8004560 <sbrk_aligned+0x38>
 800455c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004560:	4620      	mov	r0, r4
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	20000124 	.word	0x20000124

08004568 <_malloc_r>:
 8004568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456c:	1ccd      	adds	r5, r1, #3
 800456e:	f025 0503 	bic.w	r5, r5, #3
 8004572:	3508      	adds	r5, #8
 8004574:	2d0c      	cmp	r5, #12
 8004576:	bf38      	it	cc
 8004578:	250c      	movcc	r5, #12
 800457a:	2d00      	cmp	r5, #0
 800457c:	4607      	mov	r7, r0
 800457e:	db01      	blt.n	8004584 <_malloc_r+0x1c>
 8004580:	42a9      	cmp	r1, r5
 8004582:	d905      	bls.n	8004590 <_malloc_r+0x28>
 8004584:	230c      	movs	r3, #12
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	2600      	movs	r6, #0
 800458a:	4630      	mov	r0, r6
 800458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004590:	4e2e      	ldr	r6, [pc, #184]	; (800464c <_malloc_r+0xe4>)
 8004592:	f000 f89d 	bl	80046d0 <__malloc_lock>
 8004596:	6833      	ldr	r3, [r6, #0]
 8004598:	461c      	mov	r4, r3
 800459a:	bb34      	cbnz	r4, 80045ea <_malloc_r+0x82>
 800459c:	4629      	mov	r1, r5
 800459e:	4638      	mov	r0, r7
 80045a0:	f7ff ffc2 	bl	8004528 <sbrk_aligned>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	4604      	mov	r4, r0
 80045a8:	d14d      	bne.n	8004646 <_malloc_r+0xde>
 80045aa:	6834      	ldr	r4, [r6, #0]
 80045ac:	4626      	mov	r6, r4
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	d140      	bne.n	8004634 <_malloc_r+0xcc>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4631      	mov	r1, r6
 80045b6:	4638      	mov	r0, r7
 80045b8:	eb04 0803 	add.w	r8, r4, r3
 80045bc:	f000 f878 	bl	80046b0 <_sbrk_r>
 80045c0:	4580      	cmp	r8, r0
 80045c2:	d13a      	bne.n	800463a <_malloc_r+0xd2>
 80045c4:	6821      	ldr	r1, [r4, #0]
 80045c6:	3503      	adds	r5, #3
 80045c8:	1a6d      	subs	r5, r5, r1
 80045ca:	f025 0503 	bic.w	r5, r5, #3
 80045ce:	3508      	adds	r5, #8
 80045d0:	2d0c      	cmp	r5, #12
 80045d2:	bf38      	it	cc
 80045d4:	250c      	movcc	r5, #12
 80045d6:	4629      	mov	r1, r5
 80045d8:	4638      	mov	r0, r7
 80045da:	f7ff ffa5 	bl	8004528 <sbrk_aligned>
 80045de:	3001      	adds	r0, #1
 80045e0:	d02b      	beq.n	800463a <_malloc_r+0xd2>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	442b      	add	r3, r5
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	e00e      	b.n	8004608 <_malloc_r+0xa0>
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	1b52      	subs	r2, r2, r5
 80045ee:	d41e      	bmi.n	800462e <_malloc_r+0xc6>
 80045f0:	2a0b      	cmp	r2, #11
 80045f2:	d916      	bls.n	8004622 <_malloc_r+0xba>
 80045f4:	1961      	adds	r1, r4, r5
 80045f6:	42a3      	cmp	r3, r4
 80045f8:	6025      	str	r5, [r4, #0]
 80045fa:	bf18      	it	ne
 80045fc:	6059      	strne	r1, [r3, #4]
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	bf08      	it	eq
 8004602:	6031      	streq	r1, [r6, #0]
 8004604:	5162      	str	r2, [r4, r5]
 8004606:	604b      	str	r3, [r1, #4]
 8004608:	4638      	mov	r0, r7
 800460a:	f104 060b 	add.w	r6, r4, #11
 800460e:	f000 f865 	bl	80046dc <__malloc_unlock>
 8004612:	f026 0607 	bic.w	r6, r6, #7
 8004616:	1d23      	adds	r3, r4, #4
 8004618:	1af2      	subs	r2, r6, r3
 800461a:	d0b6      	beq.n	800458a <_malloc_r+0x22>
 800461c:	1b9b      	subs	r3, r3, r6
 800461e:	50a3      	str	r3, [r4, r2]
 8004620:	e7b3      	b.n	800458a <_malloc_r+0x22>
 8004622:	6862      	ldr	r2, [r4, #4]
 8004624:	42a3      	cmp	r3, r4
 8004626:	bf0c      	ite	eq
 8004628:	6032      	streq	r2, [r6, #0]
 800462a:	605a      	strne	r2, [r3, #4]
 800462c:	e7ec      	b.n	8004608 <_malloc_r+0xa0>
 800462e:	4623      	mov	r3, r4
 8004630:	6864      	ldr	r4, [r4, #4]
 8004632:	e7b2      	b.n	800459a <_malloc_r+0x32>
 8004634:	4634      	mov	r4, r6
 8004636:	6876      	ldr	r6, [r6, #4]
 8004638:	e7b9      	b.n	80045ae <_malloc_r+0x46>
 800463a:	230c      	movs	r3, #12
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4638      	mov	r0, r7
 8004640:	f000 f84c 	bl	80046dc <__malloc_unlock>
 8004644:	e7a1      	b.n	800458a <_malloc_r+0x22>
 8004646:	6025      	str	r5, [r4, #0]
 8004648:	e7de      	b.n	8004608 <_malloc_r+0xa0>
 800464a:	bf00      	nop
 800464c:	20000120 	.word	0x20000120

08004650 <_realloc_r>:
 8004650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004654:	4680      	mov	r8, r0
 8004656:	4614      	mov	r4, r2
 8004658:	460e      	mov	r6, r1
 800465a:	b921      	cbnz	r1, 8004666 <_realloc_r+0x16>
 800465c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004660:	4611      	mov	r1, r2
 8004662:	f7ff bf81 	b.w	8004568 <_malloc_r>
 8004666:	b92a      	cbnz	r2, 8004674 <_realloc_r+0x24>
 8004668:	f7ff ff12 	bl	8004490 <_free_r>
 800466c:	4625      	mov	r5, r4
 800466e:	4628      	mov	r0, r5
 8004670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004674:	f000 f838 	bl	80046e8 <_malloc_usable_size_r>
 8004678:	4284      	cmp	r4, r0
 800467a:	4607      	mov	r7, r0
 800467c:	d802      	bhi.n	8004684 <_realloc_r+0x34>
 800467e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004682:	d812      	bhi.n	80046aa <_realloc_r+0x5a>
 8004684:	4621      	mov	r1, r4
 8004686:	4640      	mov	r0, r8
 8004688:	f7ff ff6e 	bl	8004568 <_malloc_r>
 800468c:	4605      	mov	r5, r0
 800468e:	2800      	cmp	r0, #0
 8004690:	d0ed      	beq.n	800466e <_realloc_r+0x1e>
 8004692:	42bc      	cmp	r4, r7
 8004694:	4622      	mov	r2, r4
 8004696:	4631      	mov	r1, r6
 8004698:	bf28      	it	cs
 800469a:	463a      	movcs	r2, r7
 800469c:	f7ff fed0 	bl	8004440 <memcpy>
 80046a0:	4631      	mov	r1, r6
 80046a2:	4640      	mov	r0, r8
 80046a4:	f7ff fef4 	bl	8004490 <_free_r>
 80046a8:	e7e1      	b.n	800466e <_realloc_r+0x1e>
 80046aa:	4635      	mov	r5, r6
 80046ac:	e7df      	b.n	800466e <_realloc_r+0x1e>
	...

080046b0 <_sbrk_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4d06      	ldr	r5, [pc, #24]	; (80046cc <_sbrk_r+0x1c>)
 80046b4:	2300      	movs	r3, #0
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	f7fc fa38 	bl	8000b30 <_sbrk>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_sbrk_r+0x1a>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_sbrk_r+0x1a>
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	20000128 	.word	0x20000128

080046d0 <__malloc_lock>:
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <__malloc_lock+0x8>)
 80046d2:	f000 b811 	b.w	80046f8 <__retarget_lock_acquire_recursive>
 80046d6:	bf00      	nop
 80046d8:	2000012c 	.word	0x2000012c

080046dc <__malloc_unlock>:
 80046dc:	4801      	ldr	r0, [pc, #4]	; (80046e4 <__malloc_unlock+0x8>)
 80046de:	f000 b80c 	b.w	80046fa <__retarget_lock_release_recursive>
 80046e2:	bf00      	nop
 80046e4:	2000012c 	.word	0x2000012c

080046e8 <_malloc_usable_size_r>:
 80046e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ec:	1f18      	subs	r0, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfbc      	itt	lt
 80046f2:	580b      	ldrlt	r3, [r1, r0]
 80046f4:	18c0      	addlt	r0, r0, r3
 80046f6:	4770      	bx	lr

080046f8 <__retarget_lock_acquire_recursive>:
 80046f8:	4770      	bx	lr

080046fa <__retarget_lock_release_recursive>:
 80046fa:	4770      	bx	lr

080046fc <_init>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	bf00      	nop
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr

08004708 <_fini>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr
