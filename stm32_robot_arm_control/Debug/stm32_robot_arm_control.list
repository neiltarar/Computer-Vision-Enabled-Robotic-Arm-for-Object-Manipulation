
stm32_robot_arm_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d9c  08006d9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006d9c  08006d9c  00016d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da4  08006da4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e053  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d82  00000000  00000000  0002e0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0002fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c50  00000000  00000000  00030b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021beb  00000000  00000000  000317a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e650  00000000  00000000  0005338b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc720  00000000  00000000  000619db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e0fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004564  00000000  00000000  0012e14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ac8 	.word	0x08006ac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006ac8 	.word	0x08006ac8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <moveRobotArmJoint>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_UART4_Init(void);
/* USER CODE BEGIN PFP */
static void moveRobotArmJoint(uint32_t angle[], CCR_Register ccr_register[], int num_joints) {
 8000d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d84:	b097      	sub	sp, #92	; 0x5c
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6378      	str	r0, [r7, #52]	; 0x34
 8000d8a:	6339      	str	r1, [r7, #48]	; 0x30
 8000d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000d8e:	466b      	mov	r3, sp
 8000d90:	461e      	mov	r6, r3
    JointMove joint_moves[num_joints];
 8000d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d94:	1e4b      	subs	r3, r1, #1
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d98:	460a      	mov	r2, r1
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623a      	str	r2, [r7, #32]
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000da0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000da4:	1890      	adds	r0, r2, r2
 8000da6:	60b8      	str	r0, [r7, #8]
 8000da8:	415b      	adcs	r3, r3
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000db0:	6a38      	ldr	r0, [r7, #32]
 8000db2:	1814      	adds	r4, r2, r0
 8000db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000db6:	eb43 0000 	adc.w	r0, r3, r0
 8000dba:	4605      	mov	r5, r0
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	016b      	lsls	r3, r5, #5
 8000dc6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000dca:	0162      	lsls	r2, r4, #5
 8000dcc:	460a      	mov	r2, r1
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61ba      	str	r2, [r7, #24]
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000dd8:	4622      	mov	r2, r4
 8000dda:	462b      	mov	r3, r5
 8000ddc:	1890      	adds	r0, r2, r2
 8000dde:	6038      	str	r0, [r7, #0]
 8000de0:	415b      	adcs	r3, r3
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000de8:	4620      	mov	r0, r4
 8000dea:	eb12 0800 	adds.w	r8, r2, r0
 8000dee:	4628      	mov	r0, r5
 8000df0:	eb43 0900 	adc.w	r9, r3, r0
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000e00:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000e04:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000e08:	460a      	mov	r2, r1
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	3307      	adds	r3, #7
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	ebad 0d03 	sub.w	sp, sp, r3
 8000e1c:	466b      	mov	r3, sp
 8000e1e:	3303      	adds	r3, #3
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
    bool joints_moving[num_joints];
 8000e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e28:	1e4b      	subs	r3, r1, #1
 8000e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613a      	str	r2, [r7, #16]
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000e40:	4628      	mov	r0, r5
 8000e42:	00c3      	lsls	r3, r0, #3
 8000e44:	4620      	mov	r0, r4
 8000e46:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	00c2      	lsls	r2, r0, #3
 8000e4e:	460a      	mov	r2, r1
 8000e50:	2300      	movs	r3, #0
 8000e52:	4692      	mov	sl, r2
 8000e54:	469b      	mov	fp, r3
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000e62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000e66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	3307      	adds	r3, #7
 8000e6e:	08db      	lsrs	r3, r3, #3
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	ebad 0d03 	sub.w	sp, sp, r3
 8000e76:	466b      	mov	r3, sp
 8000e78:	3300      	adds	r3, #0
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (int i = 0; i < num_joints; i++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e80:	e077      	b.n	8000f72 <moveRobotArmJoint+0x1f2>
        joint_moves[i].ccr_register = ccr_register[i];
 8000e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e86:	4413      	add	r3, r2
 8000e88:	7818      	ldrb	r0, [r3, #0]
 8000e8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	4602      	mov	r2, r0
 8000e9a:	701a      	strb	r2, [r3, #0]
        joint_moves[i].targetCCR = (uint32_t)((angle[i] / 180.0) * 2000 + 2000);
 8000e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ea2:	4413      	add	r3, r2
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb3c 	bl	8000524 <__aeabi_ui2d>
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b91      	ldr	r3, [pc, #580]	; (80010f8 <moveRobotArmJoint+0x378>)
 8000eb2:	f7ff fcdb 	bl	800086c <__aeabi_ddiv>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b8e      	ldr	r3, [pc, #568]	; (80010fc <moveRobotArmJoint+0x37c>)
 8000ec4:	f7ff fba8 	bl	8000618 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	4b89      	ldr	r3, [pc, #548]	; (80010fc <moveRobotArmJoint+0x37c>)
 8000ed6:	f7ff f9e9 	bl	80002ac <__adddf3>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fdab 	bl	8000a3c <__aeabi_d2uiz>
 8000ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000ee8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	6018      	str	r0, [r3, #0]
        joints_moving[i] = true;
 8000ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000efc:	4413      	add	r3, r2
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]

        switch (ccr_register[i]) {
 8000f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f06:	4413      	add	r3, r2
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d021      	beq.n	8000f52 <moveRobotArmJoint+0x1d2>
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	f300 80ea 	bgt.w	80010e8 <moveRobotArmJoint+0x368>
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d002      	beq.n	8000f1e <moveRobotArmJoint+0x19e>
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d00d      	beq.n	8000f38 <moveRobotArmJoint+0x1b8>
            case ARM4:
                joint_moves[i].currentCCR = htim2.Instance->CCR3;
                break;
            default:
                // handle error case
                return;
 8000f1c:	e0e4      	b.n	80010e8 <moveRobotArmJoint+0x368>
                joint_moves[i].currentCCR = htim2.Instance->CCR1;
 8000f1e:	4b78      	ldr	r3, [pc, #480]	; (8001100 <moveRobotArmJoint+0x380>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4403      	add	r3, r0
 8000f32:	3308      	adds	r3, #8
 8000f34:	6019      	str	r1, [r3, #0]
                break;
 8000f36:	e019      	b.n	8000f6c <moveRobotArmJoint+0x1ec>
                joint_moves[i].currentCCR = htim2.Instance->CCR2;
 8000f38:	4b71      	ldr	r3, [pc, #452]	; (8001100 <moveRobotArmJoint+0x380>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4403      	add	r3, r0
 8000f4c:	3308      	adds	r3, #8
 8000f4e:	6019      	str	r1, [r3, #0]
                break;
 8000f50:	e00c      	b.n	8000f6c <moveRobotArmJoint+0x1ec>
                joint_moves[i].currentCCR = htim2.Instance->CCR3;
 8000f52:	4b6b      	ldr	r3, [pc, #428]	; (8001100 <moveRobotArmJoint+0x380>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f58:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4403      	add	r3, r0
 8000f66:	3308      	adds	r3, #8
 8000f68:	6019      	str	r1, [r3, #0]
                break;
 8000f6a:	bf00      	nop
    for (int i = 0; i < num_joints; i++) {
 8000f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f6e:	3301      	adds	r3, #1
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	429a      	cmp	r2, r3
 8000f78:	db83      	blt.n	8000e82 <moveRobotArmJoint+0x102>
        }
    }

    bool all_joints_reached_target = false;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    while (!all_joints_reached_target) {
 8000f80:	e0a8      	b.n	80010d4 <moveRobotArmJoint+0x354>
        all_joints_reached_target = true;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        for (int i = 0; i < num_joints; i++) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8000f8c:	e09a      	b.n	80010c4 <moveRobotArmJoint+0x344>
            if (joints_moving[i]) {
 8000f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8091 	beq.w	80010be <moveRobotArmJoint+0x33e>
                if (joint_moves[i].currentCCR < joint_moves[i].targetCCR) {
 8000f9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000f9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	3308      	adds	r3, #8
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000fb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4403      	add	r3, r0
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4299      	cmp	r1, r3
 8000fc2:	d213      	bcs.n	8000fec <moveRobotArmJoint+0x26c>
                    joint_moves[i].currentCCR++;
 8000fc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000fc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	1c59      	adds	r1, r3, #1
 8000fd8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000fda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4403      	add	r3, r0
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	6019      	str	r1, [r3, #0]
 8000fea:	e02d      	b.n	8001048 <moveRobotArmJoint+0x2c8>
                } else if (joint_moves[i].currentCCR > joint_moves[i].targetCCR) {
 8000fec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000fee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4403      	add	r3, r0
 800100c:	3304      	adds	r3, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4299      	cmp	r1, r3
 8001012:	d913      	bls.n	800103c <moveRobotArmJoint+0x2bc>
                    joint_moves[i].currentCCR--;
 8001014:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001016:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3308      	adds	r3, #8
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	1e59      	subs	r1, r3, #1
 8001028:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800102a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4403      	add	r3, r0
 8001036:	3308      	adds	r3, #8
 8001038:	6019      	str	r1, [r3, #0]
 800103a:	e005      	b.n	8001048 <moveRobotArmJoint+0x2c8>
                } else {
                    joints_moving[i] = false;
 800103c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800103e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001040:	4413      	add	r3, r2
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
                    continue;
 8001046:	e03a      	b.n	80010be <moveRobotArmJoint+0x33e>
                }

                switch (joint_moves[i].ccr_register) {
 8001048:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800104a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d020      	beq.n	800109e <moveRobotArmJoint+0x31e>
 800105c:	2b02      	cmp	r3, #2
 800105e:	dc45      	bgt.n	80010ec <moveRobotArmJoint+0x36c>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <moveRobotArmJoint+0x2ea>
 8001064:	2b01      	cmp	r3, #1
 8001066:	d00d      	beq.n	8001084 <moveRobotArmJoint+0x304>
                    case ARM4:
                        htim2.Instance->CCR3 = joint_moves[i].currentCCR;
                        break;
                    default:
                        // handle error case
                        return;
 8001068:	e040      	b.n	80010ec <moveRobotArmJoint+0x36c>
                        htim2.Instance->CCR1 = joint_moves[i].currentCCR;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <moveRobotArmJoint+0x380>)
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4403      	add	r3, r0
 800107c:	3308      	adds	r3, #8
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	634b      	str	r3, [r1, #52]	; 0x34
                        break;
 8001082:	e019      	b.n	80010b8 <moveRobotArmJoint+0x338>
                        htim2.Instance->CCR2 = joint_moves[i].currentCCR;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <moveRobotArmJoint+0x380>)
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800108a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4403      	add	r3, r0
 8001096:	3308      	adds	r3, #8
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	638b      	str	r3, [r1, #56]	; 0x38
                        break;
 800109c:	e00c      	b.n	80010b8 <moveRobotArmJoint+0x338>
                        htim2.Instance->CCR3 = joint_moves[i].currentCCR;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <moveRobotArmJoint+0x380>)
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4403      	add	r3, r0
 80010b0:	3308      	adds	r3, #8
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        break;
 80010b6:	bf00      	nop
                }

                all_joints_reached_target = false;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        for (int i = 0; i < num_joints; i++) {
 80010be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c0:	3301      	adds	r3, #1
 80010c2:	657b      	str	r3, [r7, #84]	; 0x54
 80010c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f6ff af60 	blt.w	8000f8e <moveRobotArmJoint+0x20e>
            }
        }
        HAL_Delay(0.3); // Adjust the delay value to control the speed
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 fd54 	bl	8001b7c <HAL_Delay>
    while (!all_joints_reached_target) {
 80010d4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f47f af4f 	bne.w	8000f82 <moveRobotArmJoint+0x202>
 80010e4:	46b5      	mov	sp, r6
 80010e6:	e003      	b.n	80010f0 <moveRobotArmJoint+0x370>
                return;
 80010e8:	bf00      	nop
 80010ea:	e000      	b.n	80010ee <moveRobotArmJoint+0x36e>
                        return;
 80010ec:	bf00      	nop
 80010ee:	46b5      	mov	sp, r6
    }
}
 80010f0:	375c      	adds	r7, #92	; 0x5c
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010f8:	40668000 	.word	0x40668000
 80010fc:	409f4000 	.word	0x409f4000
 8001100:	2000008c 	.word	0x2000008c

08001104 <send_echo>:

static void send_echo(const char* message) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff f869 	bl	80001e4 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <send_echo+0x28>)
 800111e:	f002 fd4a 	bl	8003bb6 <HAL_UART_Transmit>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000d4 	.word	0x200000d4

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0a0      	sub	sp, #128	; 0x80
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char rx_buffer[RX_BUFFER_SIZE];
	char tx_data[TX_BUFFER_SIZE];
	uint8_t rx_data;
	int rx_index = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	67fb      	str	r3, [r7, #124]	; 0x7c
	bool start_detected = false;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f000 fcaa 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f914 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f000 fa32 	bl	80015b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800114c:	f000 f97a 	bl	8001444 <MX_TIM2_Init>
  MX_UART4_Init();
 8001150:	f000 fa04 	bl	800155c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
    // BASE 1 - PIN: PA15
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001154:	2100      	movs	r1, #0
 8001156:	487e      	ldr	r0, [pc, #504]	; (8001350 <main+0x220>)
 8001158:	f001 fdb4 	bl	8002cc4 <HAL_TIM_PWM_Start>
  	// ARM 2 - PIN: PB3
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800115c:	2104      	movs	r1, #4
 800115e:	487c      	ldr	r0, [pc, #496]	; (8001350 <main+0x220>)
 8001160:	f001 fdb0 	bl	8002cc4 <HAL_TIM_PWM_Start>
	// ARM 4 - PIN: PB10
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001164:	2108      	movs	r1, #8
 8001166:	487a      	ldr	r0, [pc, #488]	; (8001350 <main+0x220>)
 8001168:	f001 fdac 	bl	8002cc4 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	 printf("Waiting for Rx data...\n");
		// waiting for a # as the start character
	start_detected = false;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	while (!start_detected)
 8001172:	e010      	b.n	8001196 <main+0x66>
	{
		HAL_UART_Receive(&huart4, &rx_data, 1, HAL_MAX_DELAY);
 8001174:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117c:	2201      	movs	r2, #1
 800117e:	4875      	ldr	r0, [pc, #468]	; (8001354 <main+0x224>)
 8001180:	f002 fdab 	bl	8003cda <HAL_UART_Receive>
		if (rx_data == '#')
 8001184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001188:	2b23      	cmp	r3, #35	; 0x23
 800118a:	d104      	bne.n	8001196 <main+0x66>
		{
			start_detected = true;
 800118c:	2301      	movs	r3, #1
 800118e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			rx_index = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	67fb      	str	r3, [r7, #124]	; 0x7c
	while (!start_detected)
 8001196:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800119a:	f083 0301 	eor.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e7      	bne.n	8001174 <main+0x44>
		}
	}

	while(rx_data != '\n' && rx_index < RX_BUFFER_SIZE - 1 && start_detected == true) {
 80011a4:	e012      	b.n	80011cc <main+0x9c>
		// Receive next byte
		HAL_UART_Receive(&huart4, &rx_data, 1, HAL_MAX_DELAY);
 80011a6:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ae:	2201      	movs	r2, #1
 80011b0:	4868      	ldr	r0, [pc, #416]	; (8001354 <main+0x224>)
 80011b2:	f002 fd92 	bl	8003cda <HAL_UART_Receive>
		// Add byte to the buffer
		rx_buffer[rx_index] = rx_data;
 80011b6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80011ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80011be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011c0:	4413      	add	r3, r2
 80011c2:	460a      	mov	r2, r1
 80011c4:	701a      	strb	r2, [r3, #0]
		rx_index++;
 80011c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011c8:	3301      	adds	r3, #1
 80011ca:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(rx_data != '\n' && rx_index < RX_BUFFER_SIZE - 1 && start_detected == true) {
 80011cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d0:	2b0a      	cmp	r3, #10
 80011d2:	d006      	beq.n	80011e2 <main+0xb2>
 80011d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011d6:	2b1e      	cmp	r3, #30
 80011d8:	dc03      	bgt.n	80011e2 <main+0xb2>
 80011da:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1e1      	bne.n	80011a6 <main+0x76>
	}

		char *joint_split_str = strtok(rx_buffer, ",");
 80011e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e6:	495c      	ldr	r1, [pc, #368]	; (8001358 <main+0x228>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fe11 	bl	8004e10 <strtok>
 80011ee:	6778      	str	r0, [r7, #116]	; 0x74
		char JOINT[5];
		int movement_angle_int;

		uint32_t angles[NUM_JOINTS];
		CCR_Register ccr_registers[NUM_JOINTS];
		int joint_count = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	673b      	str	r3, [r7, #112]	; 0x70

		while (joint_split_str != NULL) {
 80011f4:	e08b      	b.n	800130e <main+0x1de>

		    sscanf(joint_split_str, "%[^-]-%d", my_string, &movement_angle_int);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	f107 0220 	add.w	r2, r7, #32
 80011fe:	4957      	ldr	r1, [pc, #348]	; (800135c <main+0x22c>)
 8001200:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001202:	f003 fd93 	bl	8004d2c <siscanf>

		    for(int i=0; i<sizeof(my_string);i++){
 8001206:	2300      	movs	r3, #0
 8001208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800120a:	e00d      	b.n	8001228 <main+0xf8>
		        JOINT[i] = my_string[i];
 800120c:	f107 0220 	add.w	r2, r7, #32
 8001210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001212:	4413      	add	r3, r2
 8001214:	7819      	ldrb	r1, [r3, #0]
 8001216:	f107 0218 	add.w	r2, r7, #24
 800121a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800121c:	4413      	add	r3, r2
 800121e:	460a      	mov	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
		    for(int i=0; i<sizeof(my_string);i++){
 8001222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001224:	3301      	adds	r3, #1
 8001226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800122a:	2b04      	cmp	r3, #4
 800122c:	d9ee      	bls.n	800120c <main+0xdc>
		    }
		    JOINT[sizeof(my_string)] = '\0';
 800122e:	2300      	movs	r3, #0
 8001230:	777b      	strb	r3, [r7, #29]

		    // Determine the CCR register based on joint name
		    CCR_Register ccr_register;
		    if (strcmp(JOINT, "BASE1") == 0) {
 8001232:	f107 0318 	add.w	r3, r7, #24
 8001236:	494a      	ldr	r1, [pc, #296]	; (8001360 <main+0x230>)
 8001238:	4618      	mov	r0, r3
 800123a:	f7fe ffc9 	bl	80001d0 <strcmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d103      	bne.n	800124c <main+0x11c>
		        ccr_register = BASE1;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800124a:	e018      	b.n	800127e <main+0x14e>
		    } else if (strcmp(JOINT, "ARM2") == 0) {
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	4944      	ldr	r1, [pc, #272]	; (8001364 <main+0x234>)
 8001252:	4618      	mov	r0, r3
 8001254:	f7fe ffbc 	bl	80001d0 <strcmp>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <main+0x136>
		        ccr_register = ARM2;
 800125e:	2301      	movs	r3, #1
 8001260:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8001264:	e00b      	b.n	800127e <main+0x14e>
		    } else if (strcmp(JOINT, "ARM4") == 0) {
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	493f      	ldr	r1, [pc, #252]	; (8001368 <main+0x238>)
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffaf 	bl	80001d0 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d14a      	bne.n	800130e <main+0x1de>
		        ccr_register = ARM4;
 8001278:	2302      	movs	r3, #2
 800127a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		    } else {
		        // Handle error case
		        continue; // Set to a default value
		    }

		    sprintf(tx_data, "Value: %d\n", movement_angle_int);
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001284:	4939      	ldr	r1, [pc, #228]	; (800136c <main+0x23c>)
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fd30 	bl	8004cec <siprintf>
		    tx_data[strlen(tx_data)] = '\0';
 800128c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffa7 	bl	80001e4 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	3380      	adds	r3, #128	; 0x80
 800129a:	443b      	add	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	f803 2c58 	strb.w	r2, [r3, #-88]
		    send_echo(tx_data);
 80012a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff2c 	bl	8001104 <send_echo>
		    memset(tx_data, 0, sizeof(tx_data));
 80012ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b0:	2220      	movs	r2, #32
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fd11 	bl	8004cdc <memset>
		    memset(JOINT, 0, sizeof(JOINT));
 80012ba:	f107 0318 	add.w	r3, r7, #24
 80012be:	2205      	movs	r2, #5
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fd0a 	bl	8004cdc <memset>
		    memset(my_string, 0, sizeof(my_string));
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	2205      	movs	r2, #5
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fd03 	bl	8004cdc <memset>

		    if (movement_angle_int >= 0 && movement_angle_int <= 180) { // Check if the value is within valid range
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db13      	blt.n	8001304 <main+0x1d4>
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2bb4      	cmp	r3, #180	; 0xb4
 80012e0:	dc10      	bgt.n	8001304 <main+0x1d4>
		            angles[joint_count] = movement_angle_int;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	461a      	mov	r2, r3
 80012e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	3380      	adds	r3, #128	; 0x80
 80012ec:	443b      	add	r3, r7
 80012ee:	f843 2c7c 	str.w	r2, [r3, #-124]
		            ccr_registers[joint_count] = ccr_register;
 80012f2:	463a      	mov	r2, r7
 80012f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012f6:	4413      	add	r3, r2
 80012f8:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80012fc:	701a      	strb	r2, [r3, #0]
		            joint_count++;
 80012fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001300:	3301      	adds	r3, #1
 8001302:	673b      	str	r3, [r7, #112]	; 0x70
		    }


		    joint_split_str = strtok(NULL, ",");
 8001304:	4914      	ldr	r1, [pc, #80]	; (8001358 <main+0x228>)
 8001306:	2000      	movs	r0, #0
 8001308:	f003 fd82 	bl	8004e10 <strtok>
 800130c:	6778      	str	r0, [r7, #116]	; 0x74
		while (joint_split_str != NULL) {
 800130e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f af70 	bne.w	80011f6 <main+0xc6>
		}

	if (joint_count > 0) {
 8001316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd05      	ble.n	8001328 <main+0x1f8>
		moveRobotArmJoint(angles, ccr_registers, joint_count);
 800131c:	4639      	mov	r1, r7
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fd2c 	bl	8000d80 <moveRobotArmJoint>
	}
	rx_index = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	67fb      	str	r3, [r7, #124]	; 0x7c
	rx_buffer[rx_index] = '\0';
 800132c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001332:	4413      	add	r3, r2
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, sizeof(rx_buffer));
 8001338:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800133c:	2220      	movs	r2, #32
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fccb 	bl	8004cdc <memset>
	start_detected = false;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  {
 800134c:	e70e      	b.n	800116c <main+0x3c>
 800134e:	bf00      	nop
 8001350:	2000008c 	.word	0x2000008c
 8001354:	200000d4 	.word	0x200000d4
 8001358:	08006ae0 	.word	0x08006ae0
 800135c:	08006ae4 	.word	0x08006ae4
 8001360:	08006af0 	.word	0x08006af0
 8001364:	08006af8 	.word	0x08006af8
 8001368:	08006b00 	.word	0x08006b00
 800136c:	08006b08 	.word	0x08006b08

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2230      	movs	r2, #48	; 0x30
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fcac 	bl	8004cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <SystemClock_Config+0xcc>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a27      	ldr	r2, [pc, #156]	; (800143c <SystemClock_Config+0xcc>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <SystemClock_Config+0xcc>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <SystemClock_Config+0xd0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <SystemClock_Config+0xd0>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <SystemClock_Config+0xd0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d4:	2310      	movs	r3, #16
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013dc:	2300      	movs	r3, #0
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e0:	2308      	movs	r3, #8
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80013e4:	2354      	movs	r3, #84	; 0x54
 80013e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ec:	2307      	movs	r3, #7
 80013ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 ff25 	bl	8002244 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001400:	f000 f90c 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001404:	230f      	movs	r3, #15
 8001406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2302      	movs	r3, #2
 800140a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f001 f986 	bl	8002734 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800142e:	f000 f8f5 	bl	800161c <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3750      	adds	r7, #80	; 0x50
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	; 0x38
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <MX_TIM2_Init+0x114>)
 8001476:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800147a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <MX_TIM2_Init+0x114>)
 800147e:	2229      	movs	r2, #41	; 0x29
 8001480:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <MX_TIM2_Init+0x114>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <MX_TIM2_Init+0x114>)
 800148a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800148e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001490:	4b31      	ldr	r3, [pc, #196]	; (8001558 <MX_TIM2_Init+0x114>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <MX_TIM2_Init+0x114>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149c:	482e      	ldr	r0, [pc, #184]	; (8001558 <MX_TIM2_Init+0x114>)
 800149e:	f001 fb69 	bl	8002b74 <HAL_TIM_Base_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014a8:	f000 f8b8 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4827      	ldr	r0, [pc, #156]	; (8001558 <MX_TIM2_Init+0x114>)
 80014ba:	f001 fe95 	bl	80031e8 <HAL_TIM_ConfigClockSource>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014c4:	f000 f8aa 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c8:	4823      	ldr	r0, [pc, #140]	; (8001558 <MX_TIM2_Init+0x114>)
 80014ca:	f001 fba2 	bl	8002c12 <HAL_TIM_PWM_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014d4:	f000 f8a2 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4619      	mov	r1, r3
 80014e6:	481c      	ldr	r0, [pc, #112]	; (8001558 <MX_TIM2_Init+0x114>)
 80014e8:	f002 fa88 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014f2:	f000 f893 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f6:	2360      	movs	r3, #96	; 0x60
 80014f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	4619      	mov	r1, r3
 800150c:	4812      	ldr	r0, [pc, #72]	; (8001558 <MX_TIM2_Init+0x114>)
 800150e:	f001 fda9 	bl	8003064 <HAL_TIM_PWM_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001518:	f000 f880 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2204      	movs	r2, #4
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_TIM2_Init+0x114>)
 8001524:	f001 fd9e 	bl	8003064 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800152e:	f000 f875 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2208      	movs	r2, #8
 8001536:	4619      	mov	r1, r3
 8001538:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM2_Init+0x114>)
 800153a:	f001 fd93 	bl	8003064 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001544:	f000 f86a 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM2_Init+0x114>)
 800154a:	f000 f8bb 	bl	80016c4 <HAL_TIM_MspPostInit>

}
 800154e:	bf00      	nop
 8001550:	3738      	adds	r7, #56	; 0x38
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000008c 	.word	0x2000008c

0800155c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_UART4_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <MX_UART4_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_UART4_Init+0x4c>)
 8001568:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800156c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_UART4_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_UART4_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_UART4_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_UART4_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_UART4_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_UART4_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_UART4_Init+0x4c>)
 8001594:	f002 fac2 	bl	8003b1c <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800159e:	f000 f83d 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200000d4 	.word	0x200000d4
 80015ac:	40004c00 	.word	0x40004c00

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_GPIO_Init+0x68>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a16      	ldr	r2, [pc, #88]	; (8001618 <MX_GPIO_Init+0x68>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_GPIO_Init+0x68>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_GPIO_Init+0x68>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <MX_GPIO_Init+0x68>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <MX_GPIO_Init+0x68>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_GPIO_Init+0x68>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <MX_GPIO_Init+0x68>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_GPIO_Init+0x68>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>
	...

08001628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_MspInit+0x4c>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_MspInit+0x4c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001666:	2007      	movs	r0, #7
 8001668:	f000 fb7c 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d115      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_TIM_Base_MspInit+0x48>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_TIM_Base_MspInit+0x48>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_TIM_Base_MspInit+0x48>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	201c      	movs	r0, #28
 80016ac:	f000 fb65 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b0:	201c      	movs	r0, #28
 80016b2:	f000 fb7e 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800

080016c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e4:	d13d      	bne.n	8001762 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_TIM_MspPostInit+0xa8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_TIM_MspPostInit+0xa8>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_TIM_MspPostInit+0xa8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_TIM_MspPostInit+0xa8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_TIM_MspPostInit+0xa8>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_TIM_MspPostInit+0xa8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ARM2_TIM2_CH3_Pin|ARM3_TIM2_CH2_Pin;
 800171e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001730:	2301      	movs	r3, #1
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <HAL_TIM_MspPostInit+0xac>)
 800173c:	f000 fbe6 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BASE1_TIM2_CH1_Pin;
 8001740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001752:	2301      	movs	r3, #1
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BASE1_TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <HAL_TIM_MspPostInit+0xb0>)
 800175e:	f000 fbd5 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40020400 	.word	0x40020400
 8001774:	40020000 	.word	0x40020000

08001778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1d      	ldr	r2, [pc, #116]	; (800180c <HAL_UART_MspInit+0x94>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d133      	bne.n	8001802 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_UART_MspInit+0x98>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_UART_MspInit+0x98>)
 80017a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_UART_MspInit+0x98>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_UART_MspInit+0x98>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_UART_MspInit+0x98>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_UART_MspInit+0x98>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017d2:	2303      	movs	r3, #3
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017e2:	2308      	movs	r3, #8
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4809      	ldr	r0, [pc, #36]	; (8001814 <HAL_UART_MspInit+0x9c>)
 80017ee:	f000 fb8d 	bl	8001f0c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2034      	movs	r0, #52	; 0x34
 80017f8:	f000 fabf 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80017fc:	2034      	movs	r0, #52	; 0x34
 80017fe:	f000 fad8 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40004c00 	.word	0x40004c00
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800181c:	e7fe      	b.n	800181c <NMI_Handler+0x4>

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 f96a 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <TIM2_IRQHandler+0x10>)
 8001872:	f001 faef 	bl	8002e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000008c 	.word	0x2000008c

08001880 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <UART4_IRQHandler+0x10>)
 8001886:	f002 facb 	bl	8003e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000d4 	.word	0x200000d4

08001894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_kill>:

int _kill(int pid, int sig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ae:	f003 f9eb 	bl	8004c88 <__errno>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2216      	movs	r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
  return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_exit>:

void _exit (int status)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffe7 	bl	80018a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d6:	e7fe      	b.n	80018d6 <_exit+0x12>

080018d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e00a      	b.n	8001900 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ea:	f3af 8000 	nop.w
 80018ee:	4601      	mov	r1, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf0      	blt.n	80018ea <_read+0x12>
  }

  return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e009      	b.n	8001938 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	dbf1      	blt.n	8001924 <_write+0x12>
  }
  return len;
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_close>:

int _close(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001972:	605a      	str	r2, [r3, #4]
  return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_isatty>:

int _isatty(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f003 f950 	bl	8004c88 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20020000 	.word	0x20020000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	20000118 	.word	0x20000118
 8001a1c:	20000130 	.word	0x20000130

08001a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a4a:	490e      	ldr	r1, [pc, #56]	; (8001a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a60:	4c0b      	ldr	r4, [pc, #44]	; (8001a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a6e:	f7ff ffd7 	bl	8001a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a72:	f003 f90f 	bl	8004c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a76:	f7ff fb5b 	bl	8001130 <main>
  bx  lr    
 8001a7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a88:	08006dac 	.word	0x08006dac
  ldr r2, =_sbss
 8001a8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a90:	20000130 	.word	0x20000130

08001a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <HAL_Init+0x40>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_Init+0x40>)
 8001aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_Init+0x40>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f94f 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f808 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff fdac 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f967 	bl	8001dce <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b18:	f000 f92f 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_InitTick+0x5c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000008 	.word	0x20000008
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	2000011c 	.word	0x2000011c

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000011c 	.word	0x2000011c

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_Delay+0x44>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0b      	blt.n	8001c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <__NVIC_EnableIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d44:	f7ff ff8e 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff29 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff3e 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff8e 	bl	8001cb8 <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5d 	bl	8001c64 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff31 	bl	8001c28 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff feb6 	bl	8001b64 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d008      	beq.n	8001e18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e052      	b.n	8001ebe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0216 	bic.w	r2, r2, #22
 8001e26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d103      	bne.n	8001e48 <HAL_DMA_Abort+0x62>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0208 	bic.w	r2, r2, #8
 8001e56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e68:	e013      	b.n	8001e92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e6a:	f7ff fe7b 	bl	8001b64 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d90c      	bls.n	8001e92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2203      	movs	r2, #3
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e015      	b.n	8001ebe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e4      	bne.n	8001e6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	223f      	movs	r2, #63	; 0x3f
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d004      	beq.n	8001ee4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e00c      	b.n	8001efe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	e16b      	b.n	8002200 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 815a 	bne.w	80021fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d005      	beq.n	8001f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d130      	bne.n	8001fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d017      	beq.n	8001ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d123      	bne.n	8002050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80b4 	beq.w	80021fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b60      	ldr	r3, [pc, #384]	; (8002218 <HAL_GPIO_Init+0x30c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a5f      	ldr	r2, [pc, #380]	; (8002218 <HAL_GPIO_Init+0x30c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_GPIO_Init+0x30c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ae:	4a5b      	ldr	r2, [pc, #364]	; (800221c <HAL_GPIO_Init+0x310>)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_GPIO_Init+0x314>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02b      	beq.n	8002132 <HAL_GPIO_Init+0x226>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_GPIO_Init+0x318>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d025      	beq.n	800212e <HAL_GPIO_Init+0x222>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a50      	ldr	r2, [pc, #320]	; (8002228 <HAL_GPIO_Init+0x31c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <HAL_GPIO_Init+0x21e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4f      	ldr	r2, [pc, #316]	; (800222c <HAL_GPIO_Init+0x320>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d019      	beq.n	8002126 <HAL_GPIO_Init+0x21a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4e      	ldr	r2, [pc, #312]	; (8002230 <HAL_GPIO_Init+0x324>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <HAL_GPIO_Init+0x216>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4d      	ldr	r2, [pc, #308]	; (8002234 <HAL_GPIO_Init+0x328>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00d      	beq.n	800211e <HAL_GPIO_Init+0x212>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4c      	ldr	r2, [pc, #304]	; (8002238 <HAL_GPIO_Init+0x32c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x20e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4b      	ldr	r2, [pc, #300]	; (800223c <HAL_GPIO_Init+0x330>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_GPIO_Init+0x20a>
 8002112:	2307      	movs	r3, #7
 8002114:	e00e      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002116:	2308      	movs	r3, #8
 8002118:	e00c      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800211a:	2306      	movs	r3, #6
 800211c:	e00a      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800211e:	2305      	movs	r3, #5
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002122:	2304      	movs	r3, #4
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002132:	2300      	movs	r3, #0
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f002 0203 	and.w	r2, r2, #3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	; (800221c <HAL_GPIO_Init+0x310>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_GPIO_Init+0x334>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a32      	ldr	r2, [pc, #200]	; (8002240 <HAL_GPIO_Init+0x334>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <HAL_GPIO_Init+0x334>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a27      	ldr	r2, [pc, #156]	; (8002240 <HAL_GPIO_Init+0x334>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_GPIO_Init+0x334>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ca:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_GPIO_Init+0x334>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_GPIO_Init+0x334>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f4:	4a12      	ldr	r2, [pc, #72]	; (8002240 <HAL_GPIO_Init+0x334>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	f67f ae90 	bls.w	8001f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40013800 	.word	0x40013800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	40020800 	.word	0x40020800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40021000 	.word	0x40021000
 8002234:	40021400 	.word	0x40021400
 8002238:	40021800 	.word	0x40021800
 800223c:	40021c00 	.word	0x40021c00
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e267      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d075      	beq.n	800234e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002262:	4b88      	ldr	r3, [pc, #544]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d00c      	beq.n	8002288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226e:	4b85      	ldr	r3, [pc, #532]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002276:	2b08      	cmp	r3, #8
 8002278:	d112      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002286:	d10b      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	4b7e      	ldr	r3, [pc, #504]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d05b      	beq.n	800234c <HAL_RCC_OscConfig+0x108>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d157      	bne.n	800234c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e242      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d106      	bne.n	80022b8 <HAL_RCC_OscConfig+0x74>
 80022aa:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a75      	ldr	r2, [pc, #468]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xb0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x98>
 80022c2:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6f      	ldr	r2, [pc, #444]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b6d      	ldr	r3, [pc, #436]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6c      	ldr	r2, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xb0>
 80022dc:	4b69      	ldr	r3, [pc, #420]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a68      	ldr	r2, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fc32 	bl	8001b64 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fc2e 	bl	8001b64 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e207      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xc0>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fc1e 	bl	8001b64 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fc1a 	bl	8001b64 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1f3      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	4b51      	ldr	r3, [pc, #324]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0xe8>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235a:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11c      	bne.n	80023ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d116      	bne.n	80023ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_RCC_OscConfig+0x152>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e1c7      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4937      	ldr	r1, [pc, #220]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	e03a      	b.n	8002422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x244>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7ff fbd3 	bl	8001b64 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c2:	f7ff fbcf 	bl	8001b64 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1a8      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4925      	ldr	r1, [pc, #148]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
 80023f4:	e015      	b.n	8002422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_OscConfig+0x244>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fbb2 	bl	8001b64 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff fbae 	bl	8001b64 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e187      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d036      	beq.n	800249c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_RCC_OscConfig+0x248>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7ff fb92 	bl	8001b64 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002444:	f7ff fb8e 	bl	8001b64 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e167      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x200>
 8002462:	e01b      	b.n	800249c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_OscConfig+0x248>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7ff fb7b 	bl	8001b64 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	e00e      	b.n	8002490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002472:	f7ff fb77 	bl	8001b64 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d907      	bls.n	8002490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e150      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
 8002484:	40023800 	.word	0x40023800
 8002488:	42470000 	.word	0x42470000
 800248c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ea      	bne.n	8002472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8097 	beq.w	80025d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b7d      	ldr	r3, [pc, #500]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a7c      	ldr	r2, [pc, #496]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b7a      	ldr	r3, [pc, #488]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e6:	4b74      	ldr	r3, [pc, #464]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a73      	ldr	r2, [pc, #460]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fb37 	bl	8001b64 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7ff fb33 	bl	8001b64 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e10c      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x2ea>
 8002520:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a63      	ldr	r2, [pc, #396]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
 800252c:	e01c      	b.n	8002568 <HAL_RCC_OscConfig+0x324>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b05      	cmp	r3, #5
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x30c>
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a5e      	ldr	r2, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a5b      	ldr	r2, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
 800254e:	e00b      	b.n	8002568 <HAL_RCC_OscConfig+0x324>
 8002550:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	4b55      	ldr	r3, [pc, #340]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002562:	f023 0304 	bic.w	r3, r3, #4
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d015      	beq.n	800259c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7ff faf8 	bl	8001b64 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7ff faf4 	bl	8001b64 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e0cb      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ee      	beq.n	8002578 <HAL_RCC_OscConfig+0x334>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff fae2 	bl	8001b64 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7ff fade 	bl	8001b64 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0b5      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ee      	bne.n	80025a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a38      	ldr	r2, [pc, #224]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a1 	beq.w	8002724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d05c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d141      	bne.n	800267a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_OscConfig+0x478>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff fab2 	bl	8001b64 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff faae 	bl	8001b64 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e087      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	019b      	lsls	r3, r3, #6
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	491b      	ldr	r1, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x478>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff fa87 	bl	8001b64 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fa83 	bl	8001b64 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e05c      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x416>
 8002678:	e054      	b.n	8002724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_OscConfig+0x478>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff fa70 	bl	8001b64 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff fa6c 	bl	8001b64 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e045      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x444>
 80026a6:	e03d      	b.n	8002724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e038      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40007000 	.word	0x40007000
 80026bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x4ec>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d028      	beq.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d121      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d11a      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026f0:	4013      	ands	r3, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d107      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0cc      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d90c      	bls.n	8002770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d044      	beq.n	8002854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d119      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e067      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4934      	ldr	r1, [pc, #208]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7ff f99e 	bl	8001b64 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7ff f99a 	bl	8001b64 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e04f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d20c      	bcs.n	800287c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff f8fe 	bl	8001adc <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023c00 	.word	0x40023c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	08006b20 	.word	0x08006b20
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000004 	.word	0x20000004

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002904:	b094      	sub	sp, #80	; 0x50
 8002906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	647b      	str	r3, [r7, #68]	; 0x44
 800290c:	2300      	movs	r3, #0
 800290e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002910:	2300      	movs	r3, #0
 8002912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002918:	4b79      	ldr	r3, [pc, #484]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d00d      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x40>
 8002924:	2b08      	cmp	r3, #8
 8002926:	f200 80e1 	bhi.w	8002aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x34>
 800292e:	2b04      	cmp	r3, #4
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x3a>
 8002932:	e0db      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b73      	ldr	r3, [pc, #460]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002938:	e0db      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800293a:	4b73      	ldr	r3, [pc, #460]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800293e:	e0d8      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002940:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002948:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294a:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d063      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002956:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	2200      	movs	r2, #0
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
 800296e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002972:	4622      	mov	r2, r4
 8002974:	462b      	mov	r3, r5
 8002976:	f04f 0000 	mov.w	r0, #0
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	0159      	lsls	r1, r3, #5
 8002980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002984:	0150      	lsls	r0, r2, #5
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4621      	mov	r1, r4
 800298c:	1a51      	subs	r1, r2, r1
 800298e:	6139      	str	r1, [r7, #16]
 8002990:	4629      	mov	r1, r5
 8002992:	eb63 0301 	sbc.w	r3, r3, r1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a4:	4659      	mov	r1, fp
 80029a6:	018b      	lsls	r3, r1, #6
 80029a8:	4651      	mov	r1, sl
 80029aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ae:	4651      	mov	r1, sl
 80029b0:	018a      	lsls	r2, r1, #6
 80029b2:	4651      	mov	r1, sl
 80029b4:	ebb2 0801 	subs.w	r8, r2, r1
 80029b8:	4659      	mov	r1, fp
 80029ba:	eb63 0901 	sbc.w	r9, r3, r1
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d2:	4690      	mov	r8, r2
 80029d4:	4699      	mov	r9, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	eb18 0303 	adds.w	r3, r8, r3
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	462b      	mov	r3, r5
 80029e0:	eb49 0303 	adc.w	r3, r9, r3
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029f2:	4629      	mov	r1, r5
 80029f4:	024b      	lsls	r3, r1, #9
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029fc:	4621      	mov	r1, r4
 80029fe:	024a      	lsls	r2, r1, #9
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a06:	2200      	movs	r2, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a10:	f7fe f834 	bl	8000a7c <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a1c:	e058      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	2200      	movs	r2, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	4611      	mov	r1, r2
 8002a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a38:	4642      	mov	r2, r8
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0159      	lsls	r1, r3, #5
 8002a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4a:	0150      	lsls	r0, r2, #5
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4641      	mov	r1, r8
 8002a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a56:	4649      	mov	r1, r9
 8002a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a70:	ebb2 040a 	subs.w	r4, r2, sl
 8002a74:	eb63 050b 	sbc.w	r5, r3, fp
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	00eb      	lsls	r3, r5, #3
 8002a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a86:	00e2      	lsls	r2, r4, #3
 8002a88:	4614      	mov	r4, r2
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	4643      	mov	r3, r8
 8002a8e:	18e3      	adds	r3, r4, r3
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	464b      	mov	r3, r9
 8002a94:	eb45 0303 	adc.w	r3, r5, r3
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	028b      	lsls	r3, r1, #10
 8002aaa:	4621      	mov	r1, r4
 8002aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	028a      	lsls	r2, r1, #10
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aba:	2200      	movs	r2, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	61fa      	str	r2, [r7, #28]
 8002ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac4:	f7fd ffda 	bl	8000a7c <__aeabi_uldivmod>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4613      	mov	r3, r2
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3750      	adds	r7, #80	; 0x50
 8002af8:	46bd      	mov	sp, r7
 8002afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	00f42400 	.word	0x00f42400
 8002b08:	007a1200 	.word	0x007a1200

08002b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000000 	.word	0x20000000

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b28:	f7ff fff0 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	0a9b      	lsrs	r3, r3, #10
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4903      	ldr	r1, [pc, #12]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08006b30 	.word	0x08006b30

08002b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b50:	f7ff ffdc 	bl	8002b0c <HAL_RCC_GetHCLKFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	0b5b      	lsrs	r3, r3, #13
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	08006b30 	.word	0x08006b30

08002b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e041      	b.n	8002c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe fd6c 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f000 fc12 	bl	80033dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e041      	b.n	8002ca8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f839 	bl	8002cb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f000 fbc3 	bl	80033dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_TIM_PWM_Start+0x24>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e022      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d109      	bne.n	8002d02 <HAL_TIM_PWM_Start+0x3e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e015      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d109      	bne.n	8002d1c <HAL_TIM_PWM_Start+0x58>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e008      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07c      	b.n	8002e30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_PWM_Start+0x82>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d44:	e013      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_PWM_Start+0x92>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d54:	e00b      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_PWM_Start+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d64:	e003      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2201      	movs	r2, #1
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fe1a 	bl	80039b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <HAL_TIM_PWM_Start+0x174>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIM_PWM_Start+0xcc>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2c      	ldr	r2, [pc, #176]	; (8002e3c <HAL_TIM_PWM_Start+0x178>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_TIM_PWM_Start+0xd0>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_TIM_PWM_Start+0xd2>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_TIM_PWM_Start+0x174>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d01d      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <HAL_TIM_PWM_Start+0x17c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <HAL_TIM_PWM_Start+0x180>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <HAL_TIM_PWM_Start+0x184>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <HAL_TIM_PWM_Start+0x178>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <HAL_TIM_PWM_Start+0x188>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x136>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <HAL_TIM_PWM_Start+0x18c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d111      	bne.n	8002e1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d010      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1c:	e007      	b.n	8002e2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	40010400 	.word	0x40010400
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800
 8002e48:	40000c00 	.word	0x40000c00
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40001800 	.word	0x40001800

08002e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0202 	mvn.w	r2, #2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa81 	bl	800339e <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa73 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa84 	bl	80033b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0204 	mvn.w	r2, #4
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa57 	bl	800339e <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa49 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa5a 	bl	80033b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0208 	mvn.w	r2, #8
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa2d 	bl	800339e <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa1f 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa30 	bl	80033b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa03 	bl	800339e <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f9f5 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fa06 	bl	80033b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0201 	mvn.w	r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f9cf 	bl	8003376 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fd82 	bl	8003b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9cb 	bl	80033c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b20      	cmp	r3, #32
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0220 	mvn.w	r2, #32
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fd4c 	bl	8003af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800307e:	2302      	movs	r3, #2
 8003080:	e0ae      	b.n	80031e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	f200 809f 	bhi.w	80031d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080031d1 	.word	0x080031d1
 80030a0:	080031d1 	.word	0x080031d1
 80030a4:	080031d1 	.word	0x080031d1
 80030a8:	0800310d 	.word	0x0800310d
 80030ac:	080031d1 	.word	0x080031d1
 80030b0:	080031d1 	.word	0x080031d1
 80030b4:	080031d1 	.word	0x080031d1
 80030b8:	0800314f 	.word	0x0800314f
 80030bc:	080031d1 	.word	0x080031d1
 80030c0:	080031d1 	.word	0x080031d1
 80030c4:	080031d1 	.word	0x080031d1
 80030c8:	0800318f 	.word	0x0800318f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fa22 	bl	800351c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0208 	orr.w	r2, r2, #8
 80030e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0204 	bic.w	r2, r2, #4
 80030f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6999      	ldr	r1, [r3, #24]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	619a      	str	r2, [r3, #24]
      break;
 800310a:	e064      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fa72 	bl	80035fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6999      	ldr	r1, [r3, #24]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	021a      	lsls	r2, r3, #8
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	619a      	str	r2, [r3, #24]
      break;
 800314c:	e043      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fac7 	bl	80036e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0208 	orr.w	r2, r2, #8
 8003168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0204 	bic.w	r2, r2, #4
 8003178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69d9      	ldr	r1, [r3, #28]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	61da      	str	r2, [r3, #28]
      break;
 800318c:	e023      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fb1b 	bl	80037d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	021a      	lsls	r2, r3, #8
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	61da      	str	r2, [r3, #28]
      break;
 80031ce:	e002      	b.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
      break;
 80031d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_TIM_ConfigClockSource+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e0b4      	b.n	800336e <HAL_TIM_ConfigClockSource+0x186>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323c:	d03e      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0xd4>
 800323e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003242:	f200 8087 	bhi.w	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	f000 8086 	beq.w	800335a <HAL_TIM_ConfigClockSource+0x172>
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003252:	d87f      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b70      	cmp	r3, #112	; 0x70
 8003256:	d01a      	beq.n	800328e <HAL_TIM_ConfigClockSource+0xa6>
 8003258:	2b70      	cmp	r3, #112	; 0x70
 800325a:	d87b      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b60      	cmp	r3, #96	; 0x60
 800325e:	d050      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x11a>
 8003260:	2b60      	cmp	r3, #96	; 0x60
 8003262:	d877      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b50      	cmp	r3, #80	; 0x50
 8003266:	d03c      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003268:	2b50      	cmp	r3, #80	; 0x50
 800326a:	d873      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d058      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x13a>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d86f      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b30      	cmp	r3, #48	; 0x30
 8003276:	d064      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003278:	2b30      	cmp	r3, #48	; 0x30
 800327a:	d86b      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b20      	cmp	r3, #32
 800327e:	d060      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003280:	2b20      	cmp	r3, #32
 8003282:	d867      	bhi.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d05c      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	2b10      	cmp	r3, #16
 800328a:	d05a      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	e062      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6899      	ldr	r1, [r3, #8]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f000 fb67 	bl	8003970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	609a      	str	r2, [r3, #8]
      break;
 80032ba:	e04f      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6899      	ldr	r1, [r3, #8]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f000 fb50 	bl	8003970 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032de:	609a      	str	r2, [r3, #8]
      break;
 80032e0:	e03c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f000 fac4 	bl	800387c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2150      	movs	r1, #80	; 0x50
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fb1d 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003300:	e02c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	461a      	mov	r2, r3
 8003310:	f000 fae3 	bl	80038da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2160      	movs	r1, #96	; 0x60
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fb0d 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003320:	e01c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	461a      	mov	r2, r3
 8003330:	f000 faa4 	bl	800387c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2140      	movs	r1, #64	; 0x40
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fafd 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003340:	e00c      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f000 faf4 	bl	800393a <TIM_ITRx_SetConfig>
      break;
 8003352:	e003      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e000      	b.n	800335c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800335a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a40      	ldr	r2, [pc, #256]	; (80034f0 <TIM_Base_SetConfig+0x114>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d013      	beq.n	800341c <TIM_Base_SetConfig+0x40>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fa:	d00f      	beq.n	800341c <TIM_Base_SetConfig+0x40>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a3d      	ldr	r2, [pc, #244]	; (80034f4 <TIM_Base_SetConfig+0x118>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00b      	beq.n	800341c <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a3c      	ldr	r2, [pc, #240]	; (80034f8 <TIM_Base_SetConfig+0x11c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d007      	beq.n	800341c <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3b      	ldr	r2, [pc, #236]	; (80034fc <TIM_Base_SetConfig+0x120>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3a      	ldr	r2, [pc, #232]	; (8003500 <TIM_Base_SetConfig+0x124>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d108      	bne.n	800342e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <TIM_Base_SetConfig+0x114>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d02b      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d027      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a2c      	ldr	r2, [pc, #176]	; (80034f4 <TIM_Base_SetConfig+0x118>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d023      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2b      	ldr	r2, [pc, #172]	; (80034f8 <TIM_Base_SetConfig+0x11c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01f      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <TIM_Base_SetConfig+0x120>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01b      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a29      	ldr	r2, [pc, #164]	; (8003500 <TIM_Base_SetConfig+0x124>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d017      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <TIM_Base_SetConfig+0x128>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a27      	ldr	r2, [pc, #156]	; (8003508 <TIM_Base_SetConfig+0x12c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00f      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a26      	ldr	r2, [pc, #152]	; (800350c <TIM_Base_SetConfig+0x130>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00b      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a25      	ldr	r2, [pc, #148]	; (8003510 <TIM_Base_SetConfig+0x134>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a24      	ldr	r2, [pc, #144]	; (8003514 <TIM_Base_SetConfig+0x138>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d003      	beq.n	800348e <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a23      	ldr	r2, [pc, #140]	; (8003518 <TIM_Base_SetConfig+0x13c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d108      	bne.n	80034a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <TIM_Base_SetConfig+0x114>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0xf8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <TIM_Base_SetConfig+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d103      	bne.n	80034dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	615a      	str	r2, [r3, #20]
}
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40010000 	.word	0x40010000
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800
 80034fc:	40000c00 	.word	0x40000c00
 8003500:	40010400 	.word	0x40010400
 8003504:	40014000 	.word	0x40014000
 8003508:	40014400 	.word	0x40014400
 800350c:	40014800 	.word	0x40014800
 8003510:	40001800 	.word	0x40001800
 8003514:	40001c00 	.word	0x40001c00
 8003518:	40002000 	.word	0x40002000

0800351c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f023 0201 	bic.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f023 0302 	bic.w	r3, r3, #2
 8003564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a20      	ldr	r2, [pc, #128]	; (80035f4 <TIM_OC1_SetConfig+0xd8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_OC1_SetConfig+0x64>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a1f      	ldr	r2, [pc, #124]	; (80035f8 <TIM_OC1_SetConfig+0xdc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10c      	bne.n	800359a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0308 	bic.w	r3, r3, #8
 8003586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 0304 	bic.w	r3, r3, #4
 8003598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <TIM_OC1_SetConfig+0xd8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <TIM_OC1_SetConfig+0x8e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <TIM_OC1_SetConfig+0xdc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d111      	bne.n	80035ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	621a      	str	r2, [r3, #32]
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40010400 	.word	0x40010400

080035fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0210 	bic.w	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 0320 	bic.w	r3, r3, #32
 8003646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a22      	ldr	r2, [pc, #136]	; (80036e0 <TIM_OC2_SetConfig+0xe4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_OC2_SetConfig+0x68>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <TIM_OC2_SetConfig+0xe8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10d      	bne.n	8003680 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800366a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <TIM_OC2_SetConfig+0xe4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_OC2_SetConfig+0x94>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a16      	ldr	r2, [pc, #88]	; (80036e4 <TIM_OC2_SetConfig+0xe8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d113      	bne.n	80036b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40010000 	.word	0x40010000
 80036e4:	40010400 	.word	0x40010400

080036e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <TIM_OC3_SetConfig+0xe0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_OC3_SetConfig+0x66>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a20      	ldr	r2, [pc, #128]	; (80037cc <TIM_OC3_SetConfig+0xe4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10d      	bne.n	800376a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <TIM_OC3_SetConfig+0xe0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <TIM_OC3_SetConfig+0x92>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a15      	ldr	r2, [pc, #84]	; (80037cc <TIM_OC3_SetConfig+0xe4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d113      	bne.n	80037a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	621a      	str	r2, [r3, #32]
}
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40010400 	.word	0x40010400

080037d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800381a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a12      	ldr	r2, [pc, #72]	; (8003874 <TIM_OC4_SetConfig+0xa4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_OC4_SetConfig+0x68>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a11      	ldr	r2, [pc, #68]	; (8003878 <TIM_OC4_SetConfig+0xa8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d109      	bne.n	800384c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800383e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	019b      	lsls	r3, r3, #6
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010000 	.word	0x40010000
 8003878:	40010400 	.word	0x40010400

0800387c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0201 	bic.w	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 030a 	bic.w	r3, r3, #10
 80038b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038da:	b480      	push	{r7}
 80038dc:	b087      	sub	sp, #28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f023 0210 	bic.w	r2, r3, #16
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003904:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	031b      	lsls	r3, r3, #12
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003916:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003950:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	f043 0307 	orr.w	r3, r3, #7
 800395c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	021a      	lsls	r2, r3, #8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	431a      	orrs	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2201      	movs	r2, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a1a      	ldr	r2, [r3, #32]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	401a      	ands	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e05a      	b.n	8003aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d01d      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a17      	ldr	r2, [pc, #92]	; (8003aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a15      	ldr	r2, [pc, #84]	; (8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	40000c00 	.word	0x40000c00
 8003ae8:	40010400 	.word	0x40010400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40001800 	.word	0x40001800

08003af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e03f      	b.n	8003bae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd fe18 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2224      	movs	r2, #36	; 0x24
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fe1d 	bl	80047a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b08a      	sub	sp, #40	; 0x28
 8003bba:	af02      	add	r7, sp, #8
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d17c      	bne.n	8003cd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_UART_Transmit+0x2c>
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e075      	b.n	8003cd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_UART_Transmit+0x3e>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e06e      	b.n	8003cd2 <HAL_UART_Transmit+0x11c>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2221      	movs	r2, #33	; 0x21
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c0a:	f7fd ffab 	bl	8001b64 <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	88fa      	ldrh	r2, [r7, #6]
 8003c14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	88fa      	ldrh	r2, [r7, #6]
 8003c1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d108      	bne.n	8003c38 <HAL_UART_Transmit+0x82>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e003      	b.n	8003c40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c48:	e02a      	b.n	8003ca0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	2180      	movs	r1, #128	; 0x80
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fb9b 	bl	8004390 <UART_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e036      	b.n	8003cd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	e007      	b.n	8003c92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1cf      	bne.n	8003c4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2140      	movs	r1, #64	; 0x40
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fb6b 	bl	8004390 <UART_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e006      	b.n	8003cd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b08a      	sub	sp, #40	; 0x28
 8003cde:	af02      	add	r7, sp, #8
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	f040 808c 	bne.w	8003e14 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_UART_Receive+0x2e>
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e084      	b.n	8003e16 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Receive+0x40>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e07d      	b.n	8003e16 <HAL_UART_Receive+0x13c>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2222      	movs	r2, #34	; 0x22
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d36:	f7fd ff15 	bl	8001b64 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d108      	bne.n	8003d64 <HAL_UART_Receive+0x8a>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e003      	b.n	8003d6c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d74:	e043      	b.n	8003dfe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2120      	movs	r1, #32
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fb05 	bl	8004390 <UART_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e042      	b.n	8003e16 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10c      	bne.n	8003db0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	3302      	adds	r3, #2
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e01f      	b.n	8003df0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db8:	d007      	beq.n	8003dca <HAL_UART_Receive+0xf0>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <HAL_UART_Receive+0xfe>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e008      	b.n	8003dea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1b6      	bne.n	8003d76 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
  }
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b0ba      	sub	sp, #232	; 0xe8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_UART_IRQHandler+0x66>
 8003e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fbd3 	bl	800462a <UART_Receive_IT>
      return;
 8003e84:	e256      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 80de 	beq.w	800404c <HAL_UART_IRQHandler+0x22c>
 8003e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80d1 	beq.w	800404c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_UART_IRQHandler+0xae>
 8003eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xd2>
 8003eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f043 0202 	orr.w	r2, r3, #2
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_UART_IRQHandler+0xf6>
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0204 	orr.w	r2, r3, #4
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d011      	beq.n	8003f46 <HAL_UART_IRQHandler+0x126>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0208 	orr.w	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 81ed 	beq.w	800432a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_UART_IRQHandler+0x14e>
 8003f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fb5e 	bl	800462a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <HAL_UART_IRQHandler+0x17a>
 8003f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04f      	beq.n	800403a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa66 	bl	800446c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b40      	cmp	r3, #64	; 0x40
 8003fac:	d141      	bne.n	8004032 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1d9      	bne.n	8003fae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d013      	beq.n	800402a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	4a7d      	ldr	r2, [pc, #500]	; (80041fc <HAL_UART_IRQHandler+0x3dc>)
 8004008:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd ff59 	bl	8001ec6 <HAL_DMA_Abort_IT>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d016      	beq.n	8004048 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004024:	4610      	mov	r0, r2
 8004026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	e00e      	b.n	8004048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f99a 	bl	8004364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004030:	e00a      	b.n	8004048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f996 	bl	8004364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004038:	e006      	b.n	8004048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f992 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004046:	e170      	b.n	800432a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	bf00      	nop
    return;
 800404a:	e16e      	b.n	800432a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 814a 	bne.w	80042ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8143 	beq.w	80042ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 813c 	beq.w	80042ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	f040 80b4 	bne.w	8004200 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8140 	beq.w	800432e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040b6:	429a      	cmp	r2, r3
 80040b8:	f080 8139 	bcs.w	800432e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ce:	f000 8088 	beq.w	80041e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800410a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1d9      	bne.n	80040d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3314      	adds	r3, #20
 8004124:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800412e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004142:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004146:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800414a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e1      	bne.n	800411e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3314      	adds	r3, #20
 8004160:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800416a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800416c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800417e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004180:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004184:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800418c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e3      	bne.n	800415a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b2:	f023 0310 	bic.w	r3, r3, #16
 80041b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80041c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e3      	bne.n	80041a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd fe02 	bl	8001de6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8c0 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041f8:	e099      	b.n	800432e <HAL_UART_IRQHandler+0x50e>
 80041fa:	bf00      	nop
 80041fc:	08004533 	.word	0x08004533
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004208:	b29b      	uxth	r3, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 808b 	beq.w	8004332 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800421c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8086 	beq.w	8004332 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800423c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800424a:	647a      	str	r2, [r7, #68]	; 0x44
 800424c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e3      	bne.n	8004226 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	623b      	str	r3, [r7, #32]
   return(result);
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004282:	633a      	str	r2, [r7, #48]	; 0x30
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e3      	bne.n	800425e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0310 	bic.w	r3, r3, #16
 80042ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042c8:	61fa      	str	r2, [r7, #28]
 80042ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	617b      	str	r3, [r7, #20]
   return(result);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e3      	bne.n	80042a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f848 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042e8:	e023      	b.n	8004332 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_UART_IRQHandler+0x4ea>
 80042f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f929 	bl	800455a <UART_Transmit_IT>
    return;
 8004308:	e014      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00e      	beq.n	8004334 <HAL_UART_IRQHandler+0x514>
 8004316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f969 	bl	80045fa <UART_EndTransmit_IT>
    return;
 8004328:	e004      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
    return;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
      return;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
      return;
 8004332:	bf00      	nop
  }
}
 8004334:	37e8      	adds	r7, #232	; 0xe8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop

0800433c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b090      	sub	sp, #64	; 0x40
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a0:	e050      	b.n	8004444 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a8:	d04c      	beq.n	8004444 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043b0:	f7fd fbd8 	bl	8001b64 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043bc:	429a      	cmp	r2, r3
 80043be:	d241      	bcs.n	8004444 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043e0:	637a      	str	r2, [r7, #52]	; 0x34
 80043e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	613b      	str	r3, [r7, #16]
   return(result);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	63bb      	str	r3, [r7, #56]	; 0x38
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3314      	adds	r3, #20
 8004412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004414:	623a      	str	r2, [r7, #32]
 8004416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	69f9      	ldr	r1, [r7, #28]
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	61bb      	str	r3, [r7, #24]
   return(result);
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e00f      	b.n	8004464 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4013      	ands	r3, r2
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	429a      	cmp	r2, r3
 8004460:	d09f      	beq.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3740      	adds	r7, #64	; 0x40
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b095      	sub	sp, #84	; 0x54
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004494:	643a      	str	r2, [r7, #64]	; 0x40
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800449a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3314      	adds	r3, #20
 80044c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e5      	bne.n	80044a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d119      	bne.n	8004518 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f023 0310 	bic.w	r3, r3, #16
 80044fa:	647b      	str	r3, [r7, #68]	; 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004504:	61ba      	str	r2, [r7, #24]
 8004506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6979      	ldr	r1, [r7, #20]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	613b      	str	r3, [r7, #16]
   return(result);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e5      	bne.n	80044e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004526:	bf00      	nop
 8004528:	3754      	adds	r7, #84	; 0x54
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff ff09 	bl	8004364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b21      	cmp	r3, #33	; 0x21
 800456c:	d13e      	bne.n	80045ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004576:	d114      	bne.n	80045a2 <UART_Transmit_IT+0x48>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d110      	bne.n	80045a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004594:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]
 80045a0:	e008      	b.n	80045b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	1c59      	adds	r1, r3, #1
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6211      	str	r1, [r2, #32]
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29b      	uxth	r3, r3
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4619      	mov	r1, r3
 80045c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10f      	bne.n	80045e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004610:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fe8e 	bl	800433c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b08c      	sub	sp, #48	; 0x30
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b22      	cmp	r3, #34	; 0x22
 800463c:	f040 80ab 	bne.w	8004796 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d117      	bne.n	800467a <UART_Receive_IT+0x50>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d113      	bne.n	800467a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	b29a      	uxth	r2, r3
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	1c9a      	adds	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
 8004678:	e026      	b.n	80046c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468c:	d007      	beq.n	800469e <UART_Receive_IT+0x74>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <UART_Receive_IT+0x82>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e008      	b.n	80046be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4619      	mov	r1, r3
 80046d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d15a      	bne.n	8004792 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0220 	bic.w	r2, r2, #32
 80046ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	2b01      	cmp	r3, #1
 800471a:	d135      	bne.n	8004788 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	613b      	str	r3, [r7, #16]
   return(result);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f023 0310 	bic.w	r3, r3, #16
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	623a      	str	r2, [r7, #32]
 8004744:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	69f9      	ldr	r1, [r7, #28]
 8004748:	6a3a      	ldr	r2, [r7, #32]
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e5      	bne.n	8004722 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b10      	cmp	r3, #16
 8004762:	d10a      	bne.n	800477a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fdf9 	bl	8004378 <HAL_UARTEx_RxEventCallback>
 8004786:	e002      	b.n	800478e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fde1 	bl	8004350 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e002      	b.n	8004798 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3730      	adds	r7, #48	; 0x30
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a4:	b0c0      	sub	sp, #256	; 0x100
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047bc:	68d9      	ldr	r1, [r3, #12]
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	ea40 0301 	orr.w	r3, r0, r1
 80047c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	431a      	orrs	r2, r3
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047f8:	f021 010c 	bic.w	r1, r1, #12
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004806:	430b      	orrs	r3, r1
 8004808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	6999      	ldr	r1, [r3, #24]
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	ea40 0301 	orr.w	r3, r0, r1
 8004826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b8f      	ldr	r3, [pc, #572]	; (8004a6c <UART_SetConfig+0x2cc>)
 8004830:	429a      	cmp	r2, r3
 8004832:	d005      	beq.n	8004840 <UART_SetConfig+0xa0>
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b8d      	ldr	r3, [pc, #564]	; (8004a70 <UART_SetConfig+0x2d0>)
 800483c:	429a      	cmp	r2, r3
 800483e:	d104      	bne.n	800484a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7fe f984 	bl	8002b4c <HAL_RCC_GetPCLK2Freq>
 8004844:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004848:	e003      	b.n	8004852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800484a:	f7fe f96b 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 800484e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485c:	f040 810c 	bne.w	8004a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800486a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800486e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004872:	4622      	mov	r2, r4
 8004874:	462b      	mov	r3, r5
 8004876:	1891      	adds	r1, r2, r2
 8004878:	65b9      	str	r1, [r7, #88]	; 0x58
 800487a:	415b      	adcs	r3, r3
 800487c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800487e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004882:	4621      	mov	r1, r4
 8004884:	eb12 0801 	adds.w	r8, r2, r1
 8004888:	4629      	mov	r1, r5
 800488a:	eb43 0901 	adc.w	r9, r3, r1
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800489e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a2:	4690      	mov	r8, r2
 80048a4:	4699      	mov	r9, r3
 80048a6:	4623      	mov	r3, r4
 80048a8:	eb18 0303 	adds.w	r3, r8, r3
 80048ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048b0:	462b      	mov	r3, r5
 80048b2:	eb49 0303 	adc.w	r3, r9, r3
 80048b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048ce:	460b      	mov	r3, r1
 80048d0:	18db      	adds	r3, r3, r3
 80048d2:	653b      	str	r3, [r7, #80]	; 0x50
 80048d4:	4613      	mov	r3, r2
 80048d6:	eb42 0303 	adc.w	r3, r2, r3
 80048da:	657b      	str	r3, [r7, #84]	; 0x54
 80048dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048e4:	f7fc f8ca 	bl	8000a7c <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4b61      	ldr	r3, [pc, #388]	; (8004a74 <UART_SetConfig+0x2d4>)
 80048ee:	fba3 2302 	umull	r2, r3, r3, r2
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	011c      	lsls	r4, r3, #4
 80048f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004900:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004908:	4642      	mov	r2, r8
 800490a:	464b      	mov	r3, r9
 800490c:	1891      	adds	r1, r2, r2
 800490e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004910:	415b      	adcs	r3, r3
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004918:	4641      	mov	r1, r8
 800491a:	eb12 0a01 	adds.w	sl, r2, r1
 800491e:	4649      	mov	r1, r9
 8004920:	eb43 0b01 	adc.w	fp, r3, r1
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004938:	4692      	mov	sl, r2
 800493a:	469b      	mov	fp, r3
 800493c:	4643      	mov	r3, r8
 800493e:	eb1a 0303 	adds.w	r3, sl, r3
 8004942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004946:	464b      	mov	r3, r9
 8004948:	eb4b 0303 	adc.w	r3, fp, r3
 800494c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800495c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004964:	460b      	mov	r3, r1
 8004966:	18db      	adds	r3, r3, r3
 8004968:	643b      	str	r3, [r7, #64]	; 0x40
 800496a:	4613      	mov	r3, r2
 800496c:	eb42 0303 	adc.w	r3, r2, r3
 8004970:	647b      	str	r3, [r7, #68]	; 0x44
 8004972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800497a:	f7fc f87f 	bl	8000a7c <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4611      	mov	r1, r2
 8004984:	4b3b      	ldr	r3, [pc, #236]	; (8004a74 <UART_SetConfig+0x2d4>)
 8004986:	fba3 2301 	umull	r2, r3, r3, r1
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	2264      	movs	r2, #100	; 0x64
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	1acb      	subs	r3, r1, r3
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800499a:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <UART_SetConfig+0x2d4>)
 800499c:	fba3 2302 	umull	r2, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049a8:	441c      	add	r4, r3
 80049aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049bc:	4642      	mov	r2, r8
 80049be:	464b      	mov	r3, r9
 80049c0:	1891      	adds	r1, r2, r2
 80049c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049c4:	415b      	adcs	r3, r3
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049cc:	4641      	mov	r1, r8
 80049ce:	1851      	adds	r1, r2, r1
 80049d0:	6339      	str	r1, [r7, #48]	; 0x30
 80049d2:	4649      	mov	r1, r9
 80049d4:	414b      	adcs	r3, r1
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049e4:	4659      	mov	r1, fp
 80049e6:	00cb      	lsls	r3, r1, #3
 80049e8:	4651      	mov	r1, sl
 80049ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ee:	4651      	mov	r1, sl
 80049f0:	00ca      	lsls	r2, r1, #3
 80049f2:	4610      	mov	r0, r2
 80049f4:	4619      	mov	r1, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	4642      	mov	r2, r8
 80049fa:	189b      	adds	r3, r3, r2
 80049fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a00:	464b      	mov	r3, r9
 8004a02:	460a      	mov	r2, r1
 8004a04:	eb42 0303 	adc.w	r3, r2, r3
 8004a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a20:	460b      	mov	r3, r1
 8004a22:	18db      	adds	r3, r3, r3
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a26:	4613      	mov	r3, r2
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a36:	f7fc f821 	bl	8000a7c <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <UART_SetConfig+0x2d4>)
 8004a40:	fba3 1302 	umull	r1, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	2164      	movs	r1, #100	; 0x64
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	3332      	adds	r3, #50	; 0x32
 8004a52:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <UART_SetConfig+0x2d4>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4422      	add	r2, r4
 8004a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a68:	e105      	b.n	8004c76 <UART_SetConfig+0x4d6>
 8004a6a:	bf00      	nop
 8004a6c:	40011000 	.word	0x40011000
 8004a70:	40011400 	.word	0x40011400
 8004a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	1891      	adds	r1, r2, r2
 8004a90:	6239      	str	r1, [r7, #32]
 8004a92:	415b      	adcs	r3, r3
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
 8004a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	1854      	adds	r4, r2, r1
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	eb43 0501 	adc.w	r5, r3, r1
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	00eb      	lsls	r3, r5, #3
 8004aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ab2:	00e2      	lsls	r2, r4, #3
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	461d      	mov	r5, r3
 8004ab8:	4643      	mov	r3, r8
 8004aba:	18e3      	adds	r3, r4, r3
 8004abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	eb45 0303 	adc.w	r3, r5, r3
 8004ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	008b      	lsls	r3, r1, #2
 8004aea:	4621      	mov	r1, r4
 8004aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004af0:	4621      	mov	r1, r4
 8004af2:	008a      	lsls	r2, r1, #2
 8004af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004af8:	f7fb ffc0 	bl	8000a7c <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4b60      	ldr	r3, [pc, #384]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004b02:	fba3 2302 	umull	r2, r3, r3, r2
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	011c      	lsls	r4, r3, #4
 8004b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	464b      	mov	r3, r9
 8004b20:	1891      	adds	r1, r2, r2
 8004b22:	61b9      	str	r1, [r7, #24]
 8004b24:	415b      	adcs	r3, r3
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	1851      	adds	r1, r2, r1
 8004b30:	6139      	str	r1, [r7, #16]
 8004b32:	4649      	mov	r1, r9
 8004b34:	414b      	adcs	r3, r1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b44:	4659      	mov	r1, fp
 8004b46:	00cb      	lsls	r3, r1, #3
 8004b48:	4651      	mov	r1, sl
 8004b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b4e:	4651      	mov	r1, sl
 8004b50:	00ca      	lsls	r2, r1, #3
 8004b52:	4610      	mov	r0, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	4642      	mov	r2, r8
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b60:	464b      	mov	r3, r9
 8004b62:	460a      	mov	r2, r1
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b84:	4649      	mov	r1, r9
 8004b86:	008b      	lsls	r3, r1, #2
 8004b88:	4641      	mov	r1, r8
 8004b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b8e:	4641      	mov	r1, r8
 8004b90:	008a      	lsls	r2, r1, #2
 8004b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b96:	f7fb ff71 	bl	8000a7c <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	2164      	movs	r1, #100	; 0x64
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	3332      	adds	r3, #50	; 0x32
 8004bb2:	4a34      	ldr	r2, [pc, #208]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bbe:	441c      	add	r4, r3
 8004bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8004bc8:	677a      	str	r2, [r7, #116]	; 0x74
 8004bca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bce:	4642      	mov	r2, r8
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	1891      	adds	r1, r2, r2
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	415b      	adcs	r3, r3
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bde:	4641      	mov	r1, r8
 8004be0:	1851      	adds	r1, r2, r1
 8004be2:	6039      	str	r1, [r7, #0]
 8004be4:	4649      	mov	r1, r9
 8004be6:	414b      	adcs	r3, r1
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bf6:	4659      	mov	r1, fp
 8004bf8:	00cb      	lsls	r3, r1, #3
 8004bfa:	4651      	mov	r1, sl
 8004bfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c00:	4651      	mov	r1, sl
 8004c02:	00ca      	lsls	r2, r1, #3
 8004c04:	4610      	mov	r0, r2
 8004c06:	4619      	mov	r1, r3
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4642      	mov	r2, r8
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c10:	464b      	mov	r3, r9
 8004c12:	460a      	mov	r2, r1
 8004c14:	eb42 0303 	adc.w	r3, r2, r3
 8004c18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	663b      	str	r3, [r7, #96]	; 0x60
 8004c24:	667a      	str	r2, [r7, #100]	; 0x64
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c32:	4649      	mov	r1, r9
 8004c34:	008b      	lsls	r3, r1, #2
 8004c36:	4641      	mov	r1, r8
 8004c38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	008a      	lsls	r2, r1, #2
 8004c40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c44:	f7fb ff1a 	bl	8000a7c <__aeabi_uldivmod>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	2164      	movs	r1, #100	; 0x64
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	3332      	adds	r3, #50	; 0x32
 8004c60:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <UART_SetConfig+0x4e4>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	f003 020f 	and.w	r2, r3, #15
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4422      	add	r2, r4
 8004c74:	609a      	str	r2, [r3, #8]
}
 8004c76:	bf00      	nop
 8004c78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c82:	bf00      	nop
 8004c84:	51eb851f 	.word	0x51eb851f

08004c88 <__errno>:
 8004c88:	4b01      	ldr	r3, [pc, #4]	; (8004c90 <__errno+0x8>)
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	2000000c 	.word	0x2000000c

08004c94 <__libc_init_array>:
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	4d0d      	ldr	r5, [pc, #52]	; (8004ccc <__libc_init_array+0x38>)
 8004c98:	4c0d      	ldr	r4, [pc, #52]	; (8004cd0 <__libc_init_array+0x3c>)
 8004c9a:	1b64      	subs	r4, r4, r5
 8004c9c:	10a4      	asrs	r4, r4, #2
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	42a6      	cmp	r6, r4
 8004ca2:	d109      	bne.n	8004cb8 <__libc_init_array+0x24>
 8004ca4:	4d0b      	ldr	r5, [pc, #44]	; (8004cd4 <__libc_init_array+0x40>)
 8004ca6:	4c0c      	ldr	r4, [pc, #48]	; (8004cd8 <__libc_init_array+0x44>)
 8004ca8:	f001 ff0e 	bl	8006ac8 <_init>
 8004cac:	1b64      	subs	r4, r4, r5
 8004cae:	10a4      	asrs	r4, r4, #2
 8004cb0:	2600      	movs	r6, #0
 8004cb2:	42a6      	cmp	r6, r4
 8004cb4:	d105      	bne.n	8004cc2 <__libc_init_array+0x2e>
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}
 8004cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbc:	4798      	blx	r3
 8004cbe:	3601      	adds	r6, #1
 8004cc0:	e7ee      	b.n	8004ca0 <__libc_init_array+0xc>
 8004cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc6:	4798      	blx	r3
 8004cc8:	3601      	adds	r6, #1
 8004cca:	e7f2      	b.n	8004cb2 <__libc_init_array+0x1e>
 8004ccc:	08006da4 	.word	0x08006da4
 8004cd0:	08006da4 	.word	0x08006da4
 8004cd4:	08006da4 	.word	0x08006da4
 8004cd8:	08006da8 	.word	0x08006da8

08004cdc <memset>:
 8004cdc:	4402      	add	r2, r0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <memset+0xa>
 8004ce4:	4770      	bx	lr
 8004ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cea:	e7f9      	b.n	8004ce0 <memset+0x4>

08004cec <siprintf>:
 8004cec:	b40e      	push	{r1, r2, r3}
 8004cee:	b500      	push	{lr}
 8004cf0:	b09c      	sub	sp, #112	; 0x70
 8004cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cf4:	9002      	str	r0, [sp, #8]
 8004cf6:	9006      	str	r0, [sp, #24]
 8004cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cfc:	4809      	ldr	r0, [pc, #36]	; (8004d24 <siprintf+0x38>)
 8004cfe:	9107      	str	r1, [sp, #28]
 8004d00:	9104      	str	r1, [sp, #16]
 8004d02:	4909      	ldr	r1, [pc, #36]	; (8004d28 <siprintf+0x3c>)
 8004d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d08:	9105      	str	r1, [sp, #20]
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	a902      	add	r1, sp, #8
 8004d10:	f000 fa82 	bl	8005218 <_svfiprintf_r>
 8004d14:	9b02      	ldr	r3, [sp, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	b01c      	add	sp, #112	; 0x70
 8004d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d20:	b003      	add	sp, #12
 8004d22:	4770      	bx	lr
 8004d24:	2000000c 	.word	0x2000000c
 8004d28:	ffff0208 	.word	0xffff0208

08004d2c <siscanf>:
 8004d2c:	b40e      	push	{r1, r2, r3}
 8004d2e:	b510      	push	{r4, lr}
 8004d30:	b09f      	sub	sp, #124	; 0x7c
 8004d32:	ac21      	add	r4, sp, #132	; 0x84
 8004d34:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004d38:	f854 2b04 	ldr.w	r2, [r4], #4
 8004d3c:	9201      	str	r2, [sp, #4]
 8004d3e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004d42:	9004      	str	r0, [sp, #16]
 8004d44:	9008      	str	r0, [sp, #32]
 8004d46:	f7fb fa4d 	bl	80001e4 <strlen>
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <siscanf+0x50>)
 8004d4c:	9005      	str	r0, [sp, #20]
 8004d4e:	9009      	str	r0, [sp, #36]	; 0x24
 8004d50:	930d      	str	r3, [sp, #52]	; 0x34
 8004d52:	480b      	ldr	r0, [pc, #44]	; (8004d80 <siscanf+0x54>)
 8004d54:	9a01      	ldr	r2, [sp, #4]
 8004d56:	6800      	ldr	r0, [r0, #0]
 8004d58:	9403      	str	r4, [sp, #12]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9311      	str	r3, [sp, #68]	; 0x44
 8004d5e:	9316      	str	r3, [sp, #88]	; 0x58
 8004d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d64:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004d68:	a904      	add	r1, sp, #16
 8004d6a:	4623      	mov	r3, r4
 8004d6c:	f000 fbae 	bl	80054cc <__ssvfiscanf_r>
 8004d70:	b01f      	add	sp, #124	; 0x7c
 8004d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d76:	b003      	add	sp, #12
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	08004da7 	.word	0x08004da7
 8004d80:	2000000c 	.word	0x2000000c

08004d84 <__sread>:
 8004d84:	b510      	push	{r4, lr}
 8004d86:	460c      	mov	r4, r1
 8004d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8c:	f001 f956 	bl	800603c <_read_r>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	bfab      	itete	ge
 8004d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d96:	89a3      	ldrhlt	r3, [r4, #12]
 8004d98:	181b      	addge	r3, r3, r0
 8004d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d9e:	bfac      	ite	ge
 8004da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004da2:	81a3      	strhlt	r3, [r4, #12]
 8004da4:	bd10      	pop	{r4, pc}

08004da6 <__seofread>:
 8004da6:	2000      	movs	r0, #0
 8004da8:	4770      	bx	lr

08004daa <__swrite>:
 8004daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dae:	461f      	mov	r7, r3
 8004db0:	898b      	ldrh	r3, [r1, #12]
 8004db2:	05db      	lsls	r3, r3, #23
 8004db4:	4605      	mov	r5, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4616      	mov	r6, r2
 8004dba:	d505      	bpl.n	8004dc8 <__swrite+0x1e>
 8004dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f000 f8d2 	bl	8004f6c <_lseek_r>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	4628      	mov	r0, r5
 8004dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dde:	f000 b873 	b.w	8004ec8 <_write_r>

08004de2 <__sseek>:
 8004de2:	b510      	push	{r4, lr}
 8004de4:	460c      	mov	r4, r1
 8004de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dea:	f000 f8bf 	bl	8004f6c <_lseek_r>
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	bf15      	itete	ne
 8004df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dfe:	81a3      	strheq	r3, [r4, #12]
 8004e00:	bf18      	it	ne
 8004e02:	81a3      	strhne	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__sclose>:
 8004e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0a:	f000 b88d 	b.w	8004f28 <_close_r>
	...

08004e10 <strtok>:
 8004e10:	4b16      	ldr	r3, [pc, #88]	; (8004e6c <strtok+0x5c>)
 8004e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e14:	681e      	ldr	r6, [r3, #0]
 8004e16:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004e18:	4605      	mov	r5, r0
 8004e1a:	b9fc      	cbnz	r4, 8004e5c <strtok+0x4c>
 8004e1c:	2050      	movs	r0, #80	; 0x50
 8004e1e:	9101      	str	r1, [sp, #4]
 8004e20:	f000 f8b6 	bl	8004f90 <malloc>
 8004e24:	9901      	ldr	r1, [sp, #4]
 8004e26:	65b0      	str	r0, [r6, #88]	; 0x58
 8004e28:	4602      	mov	r2, r0
 8004e2a:	b920      	cbnz	r0, 8004e36 <strtok+0x26>
 8004e2c:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <strtok+0x60>)
 8004e2e:	4811      	ldr	r0, [pc, #68]	; (8004e74 <strtok+0x64>)
 8004e30:	2157      	movs	r1, #87	; 0x57
 8004e32:	f000 f85b 	bl	8004eec <__assert_func>
 8004e36:	e9c0 4400 	strd	r4, r4, [r0]
 8004e3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e42:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e46:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e52:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004e56:	6184      	str	r4, [r0, #24]
 8004e58:	7704      	strb	r4, [r0, #28]
 8004e5a:	6244      	str	r4, [r0, #36]	; 0x24
 8004e5c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4628      	mov	r0, r5
 8004e62:	b002      	add	sp, #8
 8004e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e68:	f000 b806 	b.w	8004e78 <__strtok_r>
 8004e6c:	2000000c 	.word	0x2000000c
 8004e70:	08006b3c 	.word	0x08006b3c
 8004e74:	08006b53 	.word	0x08006b53

08004e78 <__strtok_r>:
 8004e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7a:	b908      	cbnz	r0, 8004e80 <__strtok_r+0x8>
 8004e7c:	6810      	ldr	r0, [r2, #0]
 8004e7e:	b188      	cbz	r0, 8004ea4 <__strtok_r+0x2c>
 8004e80:	4604      	mov	r4, r0
 8004e82:	4620      	mov	r0, r4
 8004e84:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004e88:	460f      	mov	r7, r1
 8004e8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004e8e:	b91e      	cbnz	r6, 8004e98 <__strtok_r+0x20>
 8004e90:	b965      	cbnz	r5, 8004eac <__strtok_r+0x34>
 8004e92:	6015      	str	r5, [r2, #0]
 8004e94:	4628      	mov	r0, r5
 8004e96:	e005      	b.n	8004ea4 <__strtok_r+0x2c>
 8004e98:	42b5      	cmp	r5, r6
 8004e9a:	d1f6      	bne.n	8004e8a <__strtok_r+0x12>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <__strtok_r+0xa>
 8004ea0:	6014      	str	r4, [r2, #0]
 8004ea2:	7003      	strb	r3, [r0, #0]
 8004ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea6:	461c      	mov	r4, r3
 8004ea8:	e00c      	b.n	8004ec4 <__strtok_r+0x4c>
 8004eaa:	b915      	cbnz	r5, 8004eb2 <__strtok_r+0x3a>
 8004eac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004eb0:	460e      	mov	r6, r1
 8004eb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004eb6:	42ab      	cmp	r3, r5
 8004eb8:	d1f7      	bne.n	8004eaa <__strtok_r+0x32>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f3      	beq.n	8004ea6 <__strtok_r+0x2e>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ec4:	6014      	str	r4, [r2, #0]
 8004ec6:	e7ed      	b.n	8004ea4 <__strtok_r+0x2c>

08004ec8 <_write_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	4d07      	ldr	r5, [pc, #28]	; (8004ee8 <_write_r+0x20>)
 8004ecc:	4604      	mov	r4, r0
 8004ece:	4608      	mov	r0, r1
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	602a      	str	r2, [r5, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f7fc fd1b 	bl	8001912 <_write>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d102      	bne.n	8004ee6 <_write_r+0x1e>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	b103      	cbz	r3, 8004ee6 <_write_r+0x1e>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	20000128 	.word	0x20000128

08004eec <__assert_func>:
 8004eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004eee:	4614      	mov	r4, r2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <__assert_func+0x2c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	68d8      	ldr	r0, [r3, #12]
 8004efa:	b14c      	cbz	r4, 8004f10 <__assert_func+0x24>
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <__assert_func+0x30>)
 8004efe:	9100      	str	r1, [sp, #0]
 8004f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f04:	4906      	ldr	r1, [pc, #24]	; (8004f20 <__assert_func+0x34>)
 8004f06:	462b      	mov	r3, r5
 8004f08:	f000 f81e 	bl	8004f48 <fiprintf>
 8004f0c:	f001 fae2 	bl	80064d4 <abort>
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <__assert_func+0x38>)
 8004f12:	461c      	mov	r4, r3
 8004f14:	e7f3      	b.n	8004efe <__assert_func+0x12>
 8004f16:	bf00      	nop
 8004f18:	2000000c 	.word	0x2000000c
 8004f1c:	08006bb0 	.word	0x08006bb0
 8004f20:	08006bbd 	.word	0x08006bbd
 8004f24:	08006beb 	.word	0x08006beb

08004f28 <_close_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4d06      	ldr	r5, [pc, #24]	; (8004f44 <_close_r+0x1c>)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4608      	mov	r0, r1
 8004f32:	602b      	str	r3, [r5, #0]
 8004f34:	f7fc fd09 	bl	800194a <_close>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_close_r+0x1a>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_close_r+0x1a>
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	20000128 	.word	0x20000128

08004f48 <fiprintf>:
 8004f48:	b40e      	push	{r1, r2, r3}
 8004f4a:	b503      	push	{r0, r1, lr}
 8004f4c:	4601      	mov	r1, r0
 8004f4e:	ab03      	add	r3, sp, #12
 8004f50:	4805      	ldr	r0, [pc, #20]	; (8004f68 <fiprintf+0x20>)
 8004f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f56:	6800      	ldr	r0, [r0, #0]
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	f000 fc59 	bl	8005810 <_vfiprintf_r>
 8004f5e:	b002      	add	sp, #8
 8004f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f64:	b003      	add	sp, #12
 8004f66:	4770      	bx	lr
 8004f68:	2000000c 	.word	0x2000000c

08004f6c <_lseek_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4d07      	ldr	r5, [pc, #28]	; (8004f8c <_lseek_r+0x20>)
 8004f70:	4604      	mov	r4, r0
 8004f72:	4608      	mov	r0, r1
 8004f74:	4611      	mov	r1, r2
 8004f76:	2200      	movs	r2, #0
 8004f78:	602a      	str	r2, [r5, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f7fc fd0c 	bl	8001998 <_lseek>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_lseek_r+0x1e>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_lseek_r+0x1e>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	20000128 	.word	0x20000128

08004f90 <malloc>:
 8004f90:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <malloc+0xc>)
 8004f92:	4601      	mov	r1, r0
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	f000 b86f 	b.w	8005078 <_malloc_r>
 8004f9a:	bf00      	nop
 8004f9c:	2000000c 	.word	0x2000000c

08004fa0 <_free_r>:
 8004fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	d044      	beq.n	8005030 <_free_r+0x90>
 8004fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004faa:	9001      	str	r0, [sp, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f1a1 0404 	sub.w	r4, r1, #4
 8004fb2:	bfb8      	it	lt
 8004fb4:	18e4      	addlt	r4, r4, r3
 8004fb6:	f001 fcdd 	bl	8006974 <__malloc_lock>
 8004fba:	4a1e      	ldr	r2, [pc, #120]	; (8005034 <_free_r+0x94>)
 8004fbc:	9801      	ldr	r0, [sp, #4]
 8004fbe:	6813      	ldr	r3, [r2, #0]
 8004fc0:	b933      	cbnz	r3, 8004fd0 <_free_r+0x30>
 8004fc2:	6063      	str	r3, [r4, #4]
 8004fc4:	6014      	str	r4, [r2, #0]
 8004fc6:	b003      	add	sp, #12
 8004fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fcc:	f001 bcd8 	b.w	8006980 <__malloc_unlock>
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d908      	bls.n	8004fe6 <_free_r+0x46>
 8004fd4:	6825      	ldr	r5, [r4, #0]
 8004fd6:	1961      	adds	r1, r4, r5
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	bf01      	itttt	eq
 8004fdc:	6819      	ldreq	r1, [r3, #0]
 8004fde:	685b      	ldreq	r3, [r3, #4]
 8004fe0:	1949      	addeq	r1, r1, r5
 8004fe2:	6021      	streq	r1, [r4, #0]
 8004fe4:	e7ed      	b.n	8004fc2 <_free_r+0x22>
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	b10b      	cbz	r3, 8004ff0 <_free_r+0x50>
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	d9fa      	bls.n	8004fe6 <_free_r+0x46>
 8004ff0:	6811      	ldr	r1, [r2, #0]
 8004ff2:	1855      	adds	r5, r2, r1
 8004ff4:	42a5      	cmp	r5, r4
 8004ff6:	d10b      	bne.n	8005010 <_free_r+0x70>
 8004ff8:	6824      	ldr	r4, [r4, #0]
 8004ffa:	4421      	add	r1, r4
 8004ffc:	1854      	adds	r4, r2, r1
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	d1e0      	bne.n	8004fc6 <_free_r+0x26>
 8005004:	681c      	ldr	r4, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	6053      	str	r3, [r2, #4]
 800500a:	4421      	add	r1, r4
 800500c:	6011      	str	r1, [r2, #0]
 800500e:	e7da      	b.n	8004fc6 <_free_r+0x26>
 8005010:	d902      	bls.n	8005018 <_free_r+0x78>
 8005012:	230c      	movs	r3, #12
 8005014:	6003      	str	r3, [r0, #0]
 8005016:	e7d6      	b.n	8004fc6 <_free_r+0x26>
 8005018:	6825      	ldr	r5, [r4, #0]
 800501a:	1961      	adds	r1, r4, r5
 800501c:	428b      	cmp	r3, r1
 800501e:	bf04      	itt	eq
 8005020:	6819      	ldreq	r1, [r3, #0]
 8005022:	685b      	ldreq	r3, [r3, #4]
 8005024:	6063      	str	r3, [r4, #4]
 8005026:	bf04      	itt	eq
 8005028:	1949      	addeq	r1, r1, r5
 800502a:	6021      	streq	r1, [r4, #0]
 800502c:	6054      	str	r4, [r2, #4]
 800502e:	e7ca      	b.n	8004fc6 <_free_r+0x26>
 8005030:	b003      	add	sp, #12
 8005032:	bd30      	pop	{r4, r5, pc}
 8005034:	20000120 	.word	0x20000120

08005038 <sbrk_aligned>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4e0e      	ldr	r6, [pc, #56]	; (8005074 <sbrk_aligned+0x3c>)
 800503c:	460c      	mov	r4, r1
 800503e:	6831      	ldr	r1, [r6, #0]
 8005040:	4605      	mov	r5, r0
 8005042:	b911      	cbnz	r1, 800504a <sbrk_aligned+0x12>
 8005044:	f001 f80c 	bl	8006060 <_sbrk_r>
 8005048:	6030      	str	r0, [r6, #0]
 800504a:	4621      	mov	r1, r4
 800504c:	4628      	mov	r0, r5
 800504e:	f001 f807 	bl	8006060 <_sbrk_r>
 8005052:	1c43      	adds	r3, r0, #1
 8005054:	d00a      	beq.n	800506c <sbrk_aligned+0x34>
 8005056:	1cc4      	adds	r4, r0, #3
 8005058:	f024 0403 	bic.w	r4, r4, #3
 800505c:	42a0      	cmp	r0, r4
 800505e:	d007      	beq.n	8005070 <sbrk_aligned+0x38>
 8005060:	1a21      	subs	r1, r4, r0
 8005062:	4628      	mov	r0, r5
 8005064:	f000 fffc 	bl	8006060 <_sbrk_r>
 8005068:	3001      	adds	r0, #1
 800506a:	d101      	bne.n	8005070 <sbrk_aligned+0x38>
 800506c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005070:	4620      	mov	r0, r4
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	20000124 	.word	0x20000124

08005078 <_malloc_r>:
 8005078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507c:	1ccd      	adds	r5, r1, #3
 800507e:	f025 0503 	bic.w	r5, r5, #3
 8005082:	3508      	adds	r5, #8
 8005084:	2d0c      	cmp	r5, #12
 8005086:	bf38      	it	cc
 8005088:	250c      	movcc	r5, #12
 800508a:	2d00      	cmp	r5, #0
 800508c:	4607      	mov	r7, r0
 800508e:	db01      	blt.n	8005094 <_malloc_r+0x1c>
 8005090:	42a9      	cmp	r1, r5
 8005092:	d905      	bls.n	80050a0 <_malloc_r+0x28>
 8005094:	230c      	movs	r3, #12
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	2600      	movs	r6, #0
 800509a:	4630      	mov	r0, r6
 800509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a0:	4e2e      	ldr	r6, [pc, #184]	; (800515c <_malloc_r+0xe4>)
 80050a2:	f001 fc67 	bl	8006974 <__malloc_lock>
 80050a6:	6833      	ldr	r3, [r6, #0]
 80050a8:	461c      	mov	r4, r3
 80050aa:	bb34      	cbnz	r4, 80050fa <_malloc_r+0x82>
 80050ac:	4629      	mov	r1, r5
 80050ae:	4638      	mov	r0, r7
 80050b0:	f7ff ffc2 	bl	8005038 <sbrk_aligned>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	4604      	mov	r4, r0
 80050b8:	d14d      	bne.n	8005156 <_malloc_r+0xde>
 80050ba:	6834      	ldr	r4, [r6, #0]
 80050bc:	4626      	mov	r6, r4
 80050be:	2e00      	cmp	r6, #0
 80050c0:	d140      	bne.n	8005144 <_malloc_r+0xcc>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	4631      	mov	r1, r6
 80050c6:	4638      	mov	r0, r7
 80050c8:	eb04 0803 	add.w	r8, r4, r3
 80050cc:	f000 ffc8 	bl	8006060 <_sbrk_r>
 80050d0:	4580      	cmp	r8, r0
 80050d2:	d13a      	bne.n	800514a <_malloc_r+0xd2>
 80050d4:	6821      	ldr	r1, [r4, #0]
 80050d6:	3503      	adds	r5, #3
 80050d8:	1a6d      	subs	r5, r5, r1
 80050da:	f025 0503 	bic.w	r5, r5, #3
 80050de:	3508      	adds	r5, #8
 80050e0:	2d0c      	cmp	r5, #12
 80050e2:	bf38      	it	cc
 80050e4:	250c      	movcc	r5, #12
 80050e6:	4629      	mov	r1, r5
 80050e8:	4638      	mov	r0, r7
 80050ea:	f7ff ffa5 	bl	8005038 <sbrk_aligned>
 80050ee:	3001      	adds	r0, #1
 80050f0:	d02b      	beq.n	800514a <_malloc_r+0xd2>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	442b      	add	r3, r5
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	e00e      	b.n	8005118 <_malloc_r+0xa0>
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	1b52      	subs	r2, r2, r5
 80050fe:	d41e      	bmi.n	800513e <_malloc_r+0xc6>
 8005100:	2a0b      	cmp	r2, #11
 8005102:	d916      	bls.n	8005132 <_malloc_r+0xba>
 8005104:	1961      	adds	r1, r4, r5
 8005106:	42a3      	cmp	r3, r4
 8005108:	6025      	str	r5, [r4, #0]
 800510a:	bf18      	it	ne
 800510c:	6059      	strne	r1, [r3, #4]
 800510e:	6863      	ldr	r3, [r4, #4]
 8005110:	bf08      	it	eq
 8005112:	6031      	streq	r1, [r6, #0]
 8005114:	5162      	str	r2, [r4, r5]
 8005116:	604b      	str	r3, [r1, #4]
 8005118:	4638      	mov	r0, r7
 800511a:	f104 060b 	add.w	r6, r4, #11
 800511e:	f001 fc2f 	bl	8006980 <__malloc_unlock>
 8005122:	f026 0607 	bic.w	r6, r6, #7
 8005126:	1d23      	adds	r3, r4, #4
 8005128:	1af2      	subs	r2, r6, r3
 800512a:	d0b6      	beq.n	800509a <_malloc_r+0x22>
 800512c:	1b9b      	subs	r3, r3, r6
 800512e:	50a3      	str	r3, [r4, r2]
 8005130:	e7b3      	b.n	800509a <_malloc_r+0x22>
 8005132:	6862      	ldr	r2, [r4, #4]
 8005134:	42a3      	cmp	r3, r4
 8005136:	bf0c      	ite	eq
 8005138:	6032      	streq	r2, [r6, #0]
 800513a:	605a      	strne	r2, [r3, #4]
 800513c:	e7ec      	b.n	8005118 <_malloc_r+0xa0>
 800513e:	4623      	mov	r3, r4
 8005140:	6864      	ldr	r4, [r4, #4]
 8005142:	e7b2      	b.n	80050aa <_malloc_r+0x32>
 8005144:	4634      	mov	r4, r6
 8005146:	6876      	ldr	r6, [r6, #4]
 8005148:	e7b9      	b.n	80050be <_malloc_r+0x46>
 800514a:	230c      	movs	r3, #12
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4638      	mov	r0, r7
 8005150:	f001 fc16 	bl	8006980 <__malloc_unlock>
 8005154:	e7a1      	b.n	800509a <_malloc_r+0x22>
 8005156:	6025      	str	r5, [r4, #0]
 8005158:	e7de      	b.n	8005118 <_malloc_r+0xa0>
 800515a:	bf00      	nop
 800515c:	20000120 	.word	0x20000120

08005160 <__ssputs_r>:
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	688e      	ldr	r6, [r1, #8]
 8005166:	429e      	cmp	r6, r3
 8005168:	4682      	mov	sl, r0
 800516a:	460c      	mov	r4, r1
 800516c:	4690      	mov	r8, r2
 800516e:	461f      	mov	r7, r3
 8005170:	d838      	bhi.n	80051e4 <__ssputs_r+0x84>
 8005172:	898a      	ldrh	r2, [r1, #12]
 8005174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005178:	d032      	beq.n	80051e0 <__ssputs_r+0x80>
 800517a:	6825      	ldr	r5, [r4, #0]
 800517c:	6909      	ldr	r1, [r1, #16]
 800517e:	eba5 0901 	sub.w	r9, r5, r1
 8005182:	6965      	ldr	r5, [r4, #20]
 8005184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800518c:	3301      	adds	r3, #1
 800518e:	444b      	add	r3, r9
 8005190:	106d      	asrs	r5, r5, #1
 8005192:	429d      	cmp	r5, r3
 8005194:	bf38      	it	cc
 8005196:	461d      	movcc	r5, r3
 8005198:	0553      	lsls	r3, r2, #21
 800519a:	d531      	bpl.n	8005200 <__ssputs_r+0xa0>
 800519c:	4629      	mov	r1, r5
 800519e:	f7ff ff6b 	bl	8005078 <_malloc_r>
 80051a2:	4606      	mov	r6, r0
 80051a4:	b950      	cbnz	r0, 80051bc <__ssputs_r+0x5c>
 80051a6:	230c      	movs	r3, #12
 80051a8:	f8ca 3000 	str.w	r3, [sl]
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051bc:	6921      	ldr	r1, [r4, #16]
 80051be:	464a      	mov	r2, r9
 80051c0:	f001 fbb0 	bl	8006924 <memcpy>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ce:	81a3      	strh	r3, [r4, #12]
 80051d0:	6126      	str	r6, [r4, #16]
 80051d2:	6165      	str	r5, [r4, #20]
 80051d4:	444e      	add	r6, r9
 80051d6:	eba5 0509 	sub.w	r5, r5, r9
 80051da:	6026      	str	r6, [r4, #0]
 80051dc:	60a5      	str	r5, [r4, #8]
 80051de:	463e      	mov	r6, r7
 80051e0:	42be      	cmp	r6, r7
 80051e2:	d900      	bls.n	80051e6 <__ssputs_r+0x86>
 80051e4:	463e      	mov	r6, r7
 80051e6:	6820      	ldr	r0, [r4, #0]
 80051e8:	4632      	mov	r2, r6
 80051ea:	4641      	mov	r1, r8
 80051ec:	f001 fba8 	bl	8006940 <memmove>
 80051f0:	68a3      	ldr	r3, [r4, #8]
 80051f2:	1b9b      	subs	r3, r3, r6
 80051f4:	60a3      	str	r3, [r4, #8]
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	4433      	add	r3, r6
 80051fa:	6023      	str	r3, [r4, #0]
 80051fc:	2000      	movs	r0, #0
 80051fe:	e7db      	b.n	80051b8 <__ssputs_r+0x58>
 8005200:	462a      	mov	r2, r5
 8005202:	f001 fbc3 	bl	800698c <_realloc_r>
 8005206:	4606      	mov	r6, r0
 8005208:	2800      	cmp	r0, #0
 800520a:	d1e1      	bne.n	80051d0 <__ssputs_r+0x70>
 800520c:	6921      	ldr	r1, [r4, #16]
 800520e:	4650      	mov	r0, sl
 8005210:	f7ff fec6 	bl	8004fa0 <_free_r>
 8005214:	e7c7      	b.n	80051a6 <__ssputs_r+0x46>
	...

08005218 <_svfiprintf_r>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	4698      	mov	r8, r3
 800521e:	898b      	ldrh	r3, [r1, #12]
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	b09d      	sub	sp, #116	; 0x74
 8005224:	4607      	mov	r7, r0
 8005226:	460d      	mov	r5, r1
 8005228:	4614      	mov	r4, r2
 800522a:	d50e      	bpl.n	800524a <_svfiprintf_r+0x32>
 800522c:	690b      	ldr	r3, [r1, #16]
 800522e:	b963      	cbnz	r3, 800524a <_svfiprintf_r+0x32>
 8005230:	2140      	movs	r1, #64	; 0x40
 8005232:	f7ff ff21 	bl	8005078 <_malloc_r>
 8005236:	6028      	str	r0, [r5, #0]
 8005238:	6128      	str	r0, [r5, #16]
 800523a:	b920      	cbnz	r0, 8005246 <_svfiprintf_r+0x2e>
 800523c:	230c      	movs	r3, #12
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005244:	e0d1      	b.n	80053ea <_svfiprintf_r+0x1d2>
 8005246:	2340      	movs	r3, #64	; 0x40
 8005248:	616b      	str	r3, [r5, #20]
 800524a:	2300      	movs	r3, #0
 800524c:	9309      	str	r3, [sp, #36]	; 0x24
 800524e:	2320      	movs	r3, #32
 8005250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005254:	f8cd 800c 	str.w	r8, [sp, #12]
 8005258:	2330      	movs	r3, #48	; 0x30
 800525a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005404 <_svfiprintf_r+0x1ec>
 800525e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005262:	f04f 0901 	mov.w	r9, #1
 8005266:	4623      	mov	r3, r4
 8005268:	469a      	mov	sl, r3
 800526a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800526e:	b10a      	cbz	r2, 8005274 <_svfiprintf_r+0x5c>
 8005270:	2a25      	cmp	r2, #37	; 0x25
 8005272:	d1f9      	bne.n	8005268 <_svfiprintf_r+0x50>
 8005274:	ebba 0b04 	subs.w	fp, sl, r4
 8005278:	d00b      	beq.n	8005292 <_svfiprintf_r+0x7a>
 800527a:	465b      	mov	r3, fp
 800527c:	4622      	mov	r2, r4
 800527e:	4629      	mov	r1, r5
 8005280:	4638      	mov	r0, r7
 8005282:	f7ff ff6d 	bl	8005160 <__ssputs_r>
 8005286:	3001      	adds	r0, #1
 8005288:	f000 80aa 	beq.w	80053e0 <_svfiprintf_r+0x1c8>
 800528c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800528e:	445a      	add	r2, fp
 8005290:	9209      	str	r2, [sp, #36]	; 0x24
 8005292:	f89a 3000 	ldrb.w	r3, [sl]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80a2 	beq.w	80053e0 <_svfiprintf_r+0x1c8>
 800529c:	2300      	movs	r3, #0
 800529e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a6:	f10a 0a01 	add.w	sl, sl, #1
 80052aa:	9304      	str	r3, [sp, #16]
 80052ac:	9307      	str	r3, [sp, #28]
 80052ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052b2:	931a      	str	r3, [sp, #104]	; 0x68
 80052b4:	4654      	mov	r4, sl
 80052b6:	2205      	movs	r2, #5
 80052b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052bc:	4851      	ldr	r0, [pc, #324]	; (8005404 <_svfiprintf_r+0x1ec>)
 80052be:	f7fa ff9f 	bl	8000200 <memchr>
 80052c2:	9a04      	ldr	r2, [sp, #16]
 80052c4:	b9d8      	cbnz	r0, 80052fe <_svfiprintf_r+0xe6>
 80052c6:	06d0      	lsls	r0, r2, #27
 80052c8:	bf44      	itt	mi
 80052ca:	2320      	movmi	r3, #32
 80052cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d0:	0711      	lsls	r1, r2, #28
 80052d2:	bf44      	itt	mi
 80052d4:	232b      	movmi	r3, #43	; 0x2b
 80052d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052da:	f89a 3000 	ldrb.w	r3, [sl]
 80052de:	2b2a      	cmp	r3, #42	; 0x2a
 80052e0:	d015      	beq.n	800530e <_svfiprintf_r+0xf6>
 80052e2:	9a07      	ldr	r2, [sp, #28]
 80052e4:	4654      	mov	r4, sl
 80052e6:	2000      	movs	r0, #0
 80052e8:	f04f 0c0a 	mov.w	ip, #10
 80052ec:	4621      	mov	r1, r4
 80052ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f2:	3b30      	subs	r3, #48	; 0x30
 80052f4:	2b09      	cmp	r3, #9
 80052f6:	d94e      	bls.n	8005396 <_svfiprintf_r+0x17e>
 80052f8:	b1b0      	cbz	r0, 8005328 <_svfiprintf_r+0x110>
 80052fa:	9207      	str	r2, [sp, #28]
 80052fc:	e014      	b.n	8005328 <_svfiprintf_r+0x110>
 80052fe:	eba0 0308 	sub.w	r3, r0, r8
 8005302:	fa09 f303 	lsl.w	r3, r9, r3
 8005306:	4313      	orrs	r3, r2
 8005308:	9304      	str	r3, [sp, #16]
 800530a:	46a2      	mov	sl, r4
 800530c:	e7d2      	b.n	80052b4 <_svfiprintf_r+0x9c>
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	1d19      	adds	r1, r3, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	9103      	str	r1, [sp, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	bfbb      	ittet	lt
 800531a:	425b      	neglt	r3, r3
 800531c:	f042 0202 	orrlt.w	r2, r2, #2
 8005320:	9307      	strge	r3, [sp, #28]
 8005322:	9307      	strlt	r3, [sp, #28]
 8005324:	bfb8      	it	lt
 8005326:	9204      	strlt	r2, [sp, #16]
 8005328:	7823      	ldrb	r3, [r4, #0]
 800532a:	2b2e      	cmp	r3, #46	; 0x2e
 800532c:	d10c      	bne.n	8005348 <_svfiprintf_r+0x130>
 800532e:	7863      	ldrb	r3, [r4, #1]
 8005330:	2b2a      	cmp	r3, #42	; 0x2a
 8005332:	d135      	bne.n	80053a0 <_svfiprintf_r+0x188>
 8005334:	9b03      	ldr	r3, [sp, #12]
 8005336:	1d1a      	adds	r2, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	9203      	str	r2, [sp, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	bfb8      	it	lt
 8005340:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005344:	3402      	adds	r4, #2
 8005346:	9305      	str	r3, [sp, #20]
 8005348:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005414 <_svfiprintf_r+0x1fc>
 800534c:	7821      	ldrb	r1, [r4, #0]
 800534e:	2203      	movs	r2, #3
 8005350:	4650      	mov	r0, sl
 8005352:	f7fa ff55 	bl	8000200 <memchr>
 8005356:	b140      	cbz	r0, 800536a <_svfiprintf_r+0x152>
 8005358:	2340      	movs	r3, #64	; 0x40
 800535a:	eba0 000a 	sub.w	r0, r0, sl
 800535e:	fa03 f000 	lsl.w	r0, r3, r0
 8005362:	9b04      	ldr	r3, [sp, #16]
 8005364:	4303      	orrs	r3, r0
 8005366:	3401      	adds	r4, #1
 8005368:	9304      	str	r3, [sp, #16]
 800536a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800536e:	4826      	ldr	r0, [pc, #152]	; (8005408 <_svfiprintf_r+0x1f0>)
 8005370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005374:	2206      	movs	r2, #6
 8005376:	f7fa ff43 	bl	8000200 <memchr>
 800537a:	2800      	cmp	r0, #0
 800537c:	d038      	beq.n	80053f0 <_svfiprintf_r+0x1d8>
 800537e:	4b23      	ldr	r3, [pc, #140]	; (800540c <_svfiprintf_r+0x1f4>)
 8005380:	bb1b      	cbnz	r3, 80053ca <_svfiprintf_r+0x1b2>
 8005382:	9b03      	ldr	r3, [sp, #12]
 8005384:	3307      	adds	r3, #7
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	3308      	adds	r3, #8
 800538c:	9303      	str	r3, [sp, #12]
 800538e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005390:	4433      	add	r3, r6
 8005392:	9309      	str	r3, [sp, #36]	; 0x24
 8005394:	e767      	b.n	8005266 <_svfiprintf_r+0x4e>
 8005396:	fb0c 3202 	mla	r2, ip, r2, r3
 800539a:	460c      	mov	r4, r1
 800539c:	2001      	movs	r0, #1
 800539e:	e7a5      	b.n	80052ec <_svfiprintf_r+0xd4>
 80053a0:	2300      	movs	r3, #0
 80053a2:	3401      	adds	r4, #1
 80053a4:	9305      	str	r3, [sp, #20]
 80053a6:	4619      	mov	r1, r3
 80053a8:	f04f 0c0a 	mov.w	ip, #10
 80053ac:	4620      	mov	r0, r4
 80053ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b2:	3a30      	subs	r2, #48	; 0x30
 80053b4:	2a09      	cmp	r2, #9
 80053b6:	d903      	bls.n	80053c0 <_svfiprintf_r+0x1a8>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0c5      	beq.n	8005348 <_svfiprintf_r+0x130>
 80053bc:	9105      	str	r1, [sp, #20]
 80053be:	e7c3      	b.n	8005348 <_svfiprintf_r+0x130>
 80053c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c4:	4604      	mov	r4, r0
 80053c6:	2301      	movs	r3, #1
 80053c8:	e7f0      	b.n	80053ac <_svfiprintf_r+0x194>
 80053ca:	ab03      	add	r3, sp, #12
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	462a      	mov	r2, r5
 80053d0:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <_svfiprintf_r+0x1f8>)
 80053d2:	a904      	add	r1, sp, #16
 80053d4:	4638      	mov	r0, r7
 80053d6:	f3af 8000 	nop.w
 80053da:	1c42      	adds	r2, r0, #1
 80053dc:	4606      	mov	r6, r0
 80053de:	d1d6      	bne.n	800538e <_svfiprintf_r+0x176>
 80053e0:	89ab      	ldrh	r3, [r5, #12]
 80053e2:	065b      	lsls	r3, r3, #25
 80053e4:	f53f af2c 	bmi.w	8005240 <_svfiprintf_r+0x28>
 80053e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ea:	b01d      	add	sp, #116	; 0x74
 80053ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f0:	ab03      	add	r3, sp, #12
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	462a      	mov	r2, r5
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <_svfiprintf_r+0x1f8>)
 80053f8:	a904      	add	r1, sp, #16
 80053fa:	4638      	mov	r0, r7
 80053fc:	f000 fba6 	bl	8005b4c <_printf_i>
 8005400:	e7eb      	b.n	80053da <_svfiprintf_r+0x1c2>
 8005402:	bf00      	nop
 8005404:	08006bec 	.word	0x08006bec
 8005408:	08006bf6 	.word	0x08006bf6
 800540c:	00000000 	.word	0x00000000
 8005410:	08005161 	.word	0x08005161
 8005414:	08006bf2 	.word	0x08006bf2

08005418 <_sungetc_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	1c4b      	adds	r3, r1, #1
 800541c:	4614      	mov	r4, r2
 800541e:	d103      	bne.n	8005428 <_sungetc_r+0x10>
 8005420:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005424:	4628      	mov	r0, r5
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	8993      	ldrh	r3, [r2, #12]
 800542a:	f023 0320 	bic.w	r3, r3, #32
 800542e:	8193      	strh	r3, [r2, #12]
 8005430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005432:	6852      	ldr	r2, [r2, #4]
 8005434:	b2cd      	uxtb	r5, r1
 8005436:	b18b      	cbz	r3, 800545c <_sungetc_r+0x44>
 8005438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800543a:	4293      	cmp	r3, r2
 800543c:	dd08      	ble.n	8005450 <_sungetc_r+0x38>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	1e5a      	subs	r2, r3, #1
 8005442:	6022      	str	r2, [r4, #0]
 8005444:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	3301      	adds	r3, #1
 800544c:	6063      	str	r3, [r4, #4]
 800544e:	e7e9      	b.n	8005424 <_sungetc_r+0xc>
 8005450:	4621      	mov	r1, r4
 8005452:	f000 ff45 	bl	80062e0 <__submore>
 8005456:	2800      	cmp	r0, #0
 8005458:	d0f1      	beq.n	800543e <_sungetc_r+0x26>
 800545a:	e7e1      	b.n	8005420 <_sungetc_r+0x8>
 800545c:	6921      	ldr	r1, [r4, #16]
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	b151      	cbz	r1, 8005478 <_sungetc_r+0x60>
 8005462:	4299      	cmp	r1, r3
 8005464:	d208      	bcs.n	8005478 <_sungetc_r+0x60>
 8005466:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800546a:	42a9      	cmp	r1, r5
 800546c:	d104      	bne.n	8005478 <_sungetc_r+0x60>
 800546e:	3b01      	subs	r3, #1
 8005470:	3201      	adds	r2, #1
 8005472:	6023      	str	r3, [r4, #0]
 8005474:	6062      	str	r2, [r4, #4]
 8005476:	e7d5      	b.n	8005424 <_sungetc_r+0xc>
 8005478:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800547c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005480:	6363      	str	r3, [r4, #52]	; 0x34
 8005482:	2303      	movs	r3, #3
 8005484:	63a3      	str	r3, [r4, #56]	; 0x38
 8005486:	4623      	mov	r3, r4
 8005488:	f803 5f46 	strb.w	r5, [r3, #70]!
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	2301      	movs	r3, #1
 8005490:	e7dc      	b.n	800544c <_sungetc_r+0x34>

08005492 <__ssrefill_r>:
 8005492:	b510      	push	{r4, lr}
 8005494:	460c      	mov	r4, r1
 8005496:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005498:	b169      	cbz	r1, 80054b6 <__ssrefill_r+0x24>
 800549a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800549e:	4299      	cmp	r1, r3
 80054a0:	d001      	beq.n	80054a6 <__ssrefill_r+0x14>
 80054a2:	f7ff fd7d 	bl	8004fa0 <_free_r>
 80054a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	2000      	movs	r0, #0
 80054ac:	6360      	str	r0, [r4, #52]	; 0x34
 80054ae:	b113      	cbz	r3, 80054b6 <__ssrefill_r+0x24>
 80054b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	bd10      	pop	{r4, pc}
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	2300      	movs	r3, #0
 80054bc:	6063      	str	r3, [r4, #4]
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	f043 0320 	orr.w	r3, r3, #32
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ca:	e7f3      	b.n	80054b4 <__ssrefill_r+0x22>

080054cc <__ssvfiscanf_r>:
 80054cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	460c      	mov	r4, r1
 80054d2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80054d6:	2100      	movs	r1, #0
 80054d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80054dc:	49a6      	ldr	r1, [pc, #664]	; (8005778 <__ssvfiscanf_r+0x2ac>)
 80054de:	91a0      	str	r1, [sp, #640]	; 0x280
 80054e0:	f10d 0804 	add.w	r8, sp, #4
 80054e4:	49a5      	ldr	r1, [pc, #660]	; (800577c <__ssvfiscanf_r+0x2b0>)
 80054e6:	4fa6      	ldr	r7, [pc, #664]	; (8005780 <__ssvfiscanf_r+0x2b4>)
 80054e8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005784 <__ssvfiscanf_r+0x2b8>
 80054ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80054f0:	4606      	mov	r6, r0
 80054f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	7813      	ldrb	r3, [r2, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 815a 	beq.w	80057b2 <__ssvfiscanf_r+0x2e6>
 80054fe:	5dd9      	ldrb	r1, [r3, r7]
 8005500:	f011 0108 	ands.w	r1, r1, #8
 8005504:	f102 0501 	add.w	r5, r2, #1
 8005508:	d019      	beq.n	800553e <__ssvfiscanf_r+0x72>
 800550a:	6863      	ldr	r3, [r4, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	dd0f      	ble.n	8005530 <__ssvfiscanf_r+0x64>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	781a      	ldrb	r2, [r3, #0]
 8005514:	5cba      	ldrb	r2, [r7, r2]
 8005516:	0712      	lsls	r2, r2, #28
 8005518:	d401      	bmi.n	800551e <__ssvfiscanf_r+0x52>
 800551a:	462a      	mov	r2, r5
 800551c:	e7eb      	b.n	80054f6 <__ssvfiscanf_r+0x2a>
 800551e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005520:	3201      	adds	r2, #1
 8005522:	9245      	str	r2, [sp, #276]	; 0x114
 8005524:	6862      	ldr	r2, [r4, #4]
 8005526:	3301      	adds	r3, #1
 8005528:	3a01      	subs	r2, #1
 800552a:	6062      	str	r2, [r4, #4]
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	e7ec      	b.n	800550a <__ssvfiscanf_r+0x3e>
 8005530:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005532:	4621      	mov	r1, r4
 8005534:	4630      	mov	r0, r6
 8005536:	4798      	blx	r3
 8005538:	2800      	cmp	r0, #0
 800553a:	d0e9      	beq.n	8005510 <__ssvfiscanf_r+0x44>
 800553c:	e7ed      	b.n	800551a <__ssvfiscanf_r+0x4e>
 800553e:	2b25      	cmp	r3, #37	; 0x25
 8005540:	d012      	beq.n	8005568 <__ssvfiscanf_r+0x9c>
 8005542:	469a      	mov	sl, r3
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f340 8091 	ble.w	800566e <__ssvfiscanf_r+0x1a2>
 800554c:	6822      	ldr	r2, [r4, #0]
 800554e:	7813      	ldrb	r3, [r2, #0]
 8005550:	4553      	cmp	r3, sl
 8005552:	f040 812e 	bne.w	80057b2 <__ssvfiscanf_r+0x2e6>
 8005556:	6863      	ldr	r3, [r4, #4]
 8005558:	3b01      	subs	r3, #1
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800555e:	3201      	adds	r2, #1
 8005560:	3301      	adds	r3, #1
 8005562:	6022      	str	r2, [r4, #0]
 8005564:	9345      	str	r3, [sp, #276]	; 0x114
 8005566:	e7d8      	b.n	800551a <__ssvfiscanf_r+0x4e>
 8005568:	9141      	str	r1, [sp, #260]	; 0x104
 800556a:	9143      	str	r1, [sp, #268]	; 0x10c
 800556c:	7853      	ldrb	r3, [r2, #1]
 800556e:	2b2a      	cmp	r3, #42	; 0x2a
 8005570:	bf02      	ittt	eq
 8005572:	2310      	moveq	r3, #16
 8005574:	1c95      	addeq	r5, r2, #2
 8005576:	9341      	streq	r3, [sp, #260]	; 0x104
 8005578:	220a      	movs	r2, #10
 800557a:	46aa      	mov	sl, r5
 800557c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005580:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005584:	2b09      	cmp	r3, #9
 8005586:	d91d      	bls.n	80055c4 <__ssvfiscanf_r+0xf8>
 8005588:	487e      	ldr	r0, [pc, #504]	; (8005784 <__ssvfiscanf_r+0x2b8>)
 800558a:	2203      	movs	r2, #3
 800558c:	f7fa fe38 	bl	8000200 <memchr>
 8005590:	b140      	cbz	r0, 80055a4 <__ssvfiscanf_r+0xd8>
 8005592:	2301      	movs	r3, #1
 8005594:	eba0 0009 	sub.w	r0, r0, r9
 8005598:	fa03 f000 	lsl.w	r0, r3, r0
 800559c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800559e:	4318      	orrs	r0, r3
 80055a0:	9041      	str	r0, [sp, #260]	; 0x104
 80055a2:	4655      	mov	r5, sl
 80055a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055a8:	2b78      	cmp	r3, #120	; 0x78
 80055aa:	d806      	bhi.n	80055ba <__ssvfiscanf_r+0xee>
 80055ac:	2b57      	cmp	r3, #87	; 0x57
 80055ae:	d810      	bhi.n	80055d2 <__ssvfiscanf_r+0x106>
 80055b0:	2b25      	cmp	r3, #37	; 0x25
 80055b2:	d0c6      	beq.n	8005542 <__ssvfiscanf_r+0x76>
 80055b4:	d856      	bhi.n	8005664 <__ssvfiscanf_r+0x198>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d064      	beq.n	8005684 <__ssvfiscanf_r+0x1b8>
 80055ba:	2303      	movs	r3, #3
 80055bc:	9347      	str	r3, [sp, #284]	; 0x11c
 80055be:	230a      	movs	r3, #10
 80055c0:	9342      	str	r3, [sp, #264]	; 0x108
 80055c2:	e071      	b.n	80056a8 <__ssvfiscanf_r+0x1dc>
 80055c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80055c6:	fb02 1103 	mla	r1, r2, r3, r1
 80055ca:	3930      	subs	r1, #48	; 0x30
 80055cc:	9143      	str	r1, [sp, #268]	; 0x10c
 80055ce:	4655      	mov	r5, sl
 80055d0:	e7d3      	b.n	800557a <__ssvfiscanf_r+0xae>
 80055d2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80055d6:	2a20      	cmp	r2, #32
 80055d8:	d8ef      	bhi.n	80055ba <__ssvfiscanf_r+0xee>
 80055da:	a101      	add	r1, pc, #4	; (adr r1, 80055e0 <__ssvfiscanf_r+0x114>)
 80055dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055e0:	08005693 	.word	0x08005693
 80055e4:	080055bb 	.word	0x080055bb
 80055e8:	080055bb 	.word	0x080055bb
 80055ec:	080056f1 	.word	0x080056f1
 80055f0:	080055bb 	.word	0x080055bb
 80055f4:	080055bb 	.word	0x080055bb
 80055f8:	080055bb 	.word	0x080055bb
 80055fc:	080055bb 	.word	0x080055bb
 8005600:	080055bb 	.word	0x080055bb
 8005604:	080055bb 	.word	0x080055bb
 8005608:	080055bb 	.word	0x080055bb
 800560c:	08005707 	.word	0x08005707
 8005610:	080056dd 	.word	0x080056dd
 8005614:	0800566b 	.word	0x0800566b
 8005618:	0800566b 	.word	0x0800566b
 800561c:	0800566b 	.word	0x0800566b
 8005620:	080055bb 	.word	0x080055bb
 8005624:	080056e1 	.word	0x080056e1
 8005628:	080055bb 	.word	0x080055bb
 800562c:	080055bb 	.word	0x080055bb
 8005630:	080055bb 	.word	0x080055bb
 8005634:	080055bb 	.word	0x080055bb
 8005638:	08005717 	.word	0x08005717
 800563c:	080056e9 	.word	0x080056e9
 8005640:	0800568b 	.word	0x0800568b
 8005644:	080055bb 	.word	0x080055bb
 8005648:	080055bb 	.word	0x080055bb
 800564c:	08005713 	.word	0x08005713
 8005650:	080055bb 	.word	0x080055bb
 8005654:	080056dd 	.word	0x080056dd
 8005658:	080055bb 	.word	0x080055bb
 800565c:	080055bb 	.word	0x080055bb
 8005660:	08005693 	.word	0x08005693
 8005664:	3b45      	subs	r3, #69	; 0x45
 8005666:	2b02      	cmp	r3, #2
 8005668:	d8a7      	bhi.n	80055ba <__ssvfiscanf_r+0xee>
 800566a:	2305      	movs	r3, #5
 800566c:	e01b      	b.n	80056a6 <__ssvfiscanf_r+0x1da>
 800566e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005670:	4621      	mov	r1, r4
 8005672:	4630      	mov	r0, r6
 8005674:	4798      	blx	r3
 8005676:	2800      	cmp	r0, #0
 8005678:	f43f af68 	beq.w	800554c <__ssvfiscanf_r+0x80>
 800567c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800567e:	2800      	cmp	r0, #0
 8005680:	f040 808d 	bne.w	800579e <__ssvfiscanf_r+0x2d2>
 8005684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005688:	e08f      	b.n	80057aa <__ssvfiscanf_r+0x2de>
 800568a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800568c:	f042 0220 	orr.w	r2, r2, #32
 8005690:	9241      	str	r2, [sp, #260]	; 0x104
 8005692:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005698:	9241      	str	r2, [sp, #260]	; 0x104
 800569a:	2210      	movs	r2, #16
 800569c:	2b6f      	cmp	r3, #111	; 0x6f
 800569e:	9242      	str	r2, [sp, #264]	; 0x108
 80056a0:	bf34      	ite	cc
 80056a2:	2303      	movcc	r3, #3
 80056a4:	2304      	movcs	r3, #4
 80056a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80056a8:	6863      	ldr	r3, [r4, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	dd42      	ble.n	8005734 <__ssvfiscanf_r+0x268>
 80056ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80056b0:	0659      	lsls	r1, r3, #25
 80056b2:	d404      	bmi.n	80056be <__ssvfiscanf_r+0x1f2>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	781a      	ldrb	r2, [r3, #0]
 80056b8:	5cba      	ldrb	r2, [r7, r2]
 80056ba:	0712      	lsls	r2, r2, #28
 80056bc:	d441      	bmi.n	8005742 <__ssvfiscanf_r+0x276>
 80056be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	dc50      	bgt.n	8005766 <__ssvfiscanf_r+0x29a>
 80056c4:	466b      	mov	r3, sp
 80056c6:	4622      	mov	r2, r4
 80056c8:	a941      	add	r1, sp, #260	; 0x104
 80056ca:	4630      	mov	r0, r6
 80056cc:	f000 fb64 	bl	8005d98 <_scanf_chars>
 80056d0:	2801      	cmp	r0, #1
 80056d2:	d06e      	beq.n	80057b2 <__ssvfiscanf_r+0x2e6>
 80056d4:	2802      	cmp	r0, #2
 80056d6:	f47f af20 	bne.w	800551a <__ssvfiscanf_r+0x4e>
 80056da:	e7cf      	b.n	800567c <__ssvfiscanf_r+0x1b0>
 80056dc:	220a      	movs	r2, #10
 80056de:	e7dd      	b.n	800569c <__ssvfiscanf_r+0x1d0>
 80056e0:	2300      	movs	r3, #0
 80056e2:	9342      	str	r3, [sp, #264]	; 0x108
 80056e4:	2303      	movs	r3, #3
 80056e6:	e7de      	b.n	80056a6 <__ssvfiscanf_r+0x1da>
 80056e8:	2308      	movs	r3, #8
 80056ea:	9342      	str	r3, [sp, #264]	; 0x108
 80056ec:	2304      	movs	r3, #4
 80056ee:	e7da      	b.n	80056a6 <__ssvfiscanf_r+0x1da>
 80056f0:	4629      	mov	r1, r5
 80056f2:	4640      	mov	r0, r8
 80056f4:	f000 fcc4 	bl	8006080 <__sccl>
 80056f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80056fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056fe:	9341      	str	r3, [sp, #260]	; 0x104
 8005700:	4605      	mov	r5, r0
 8005702:	2301      	movs	r3, #1
 8005704:	e7cf      	b.n	80056a6 <__ssvfiscanf_r+0x1da>
 8005706:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	9341      	str	r3, [sp, #260]	; 0x104
 800570e:	2300      	movs	r3, #0
 8005710:	e7c9      	b.n	80056a6 <__ssvfiscanf_r+0x1da>
 8005712:	2302      	movs	r3, #2
 8005714:	e7c7      	b.n	80056a6 <__ssvfiscanf_r+0x1da>
 8005716:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005718:	06c3      	lsls	r3, r0, #27
 800571a:	f53f aefe 	bmi.w	800551a <__ssvfiscanf_r+0x4e>
 800571e:	9b00      	ldr	r3, [sp, #0]
 8005720:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005722:	1d19      	adds	r1, r3, #4
 8005724:	9100      	str	r1, [sp, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f010 0f01 	tst.w	r0, #1
 800572c:	bf14      	ite	ne
 800572e:	801a      	strhne	r2, [r3, #0]
 8005730:	601a      	streq	r2, [r3, #0]
 8005732:	e6f2      	b.n	800551a <__ssvfiscanf_r+0x4e>
 8005734:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005736:	4621      	mov	r1, r4
 8005738:	4630      	mov	r0, r6
 800573a:	4798      	blx	r3
 800573c:	2800      	cmp	r0, #0
 800573e:	d0b6      	beq.n	80056ae <__ssvfiscanf_r+0x1e2>
 8005740:	e79c      	b.n	800567c <__ssvfiscanf_r+0x1b0>
 8005742:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005744:	3201      	adds	r2, #1
 8005746:	9245      	str	r2, [sp, #276]	; 0x114
 8005748:	6862      	ldr	r2, [r4, #4]
 800574a:	3a01      	subs	r2, #1
 800574c:	2a00      	cmp	r2, #0
 800574e:	6062      	str	r2, [r4, #4]
 8005750:	dd02      	ble.n	8005758 <__ssvfiscanf_r+0x28c>
 8005752:	3301      	adds	r3, #1
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	e7ad      	b.n	80056b4 <__ssvfiscanf_r+0x1e8>
 8005758:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800575a:	4621      	mov	r1, r4
 800575c:	4630      	mov	r0, r6
 800575e:	4798      	blx	r3
 8005760:	2800      	cmp	r0, #0
 8005762:	d0a7      	beq.n	80056b4 <__ssvfiscanf_r+0x1e8>
 8005764:	e78a      	b.n	800567c <__ssvfiscanf_r+0x1b0>
 8005766:	2b04      	cmp	r3, #4
 8005768:	dc0e      	bgt.n	8005788 <__ssvfiscanf_r+0x2bc>
 800576a:	466b      	mov	r3, sp
 800576c:	4622      	mov	r2, r4
 800576e:	a941      	add	r1, sp, #260	; 0x104
 8005770:	4630      	mov	r0, r6
 8005772:	f000 fb6b 	bl	8005e4c <_scanf_i>
 8005776:	e7ab      	b.n	80056d0 <__ssvfiscanf_r+0x204>
 8005778:	08005419 	.word	0x08005419
 800577c:	08005493 	.word	0x08005493
 8005780:	08006c3b 	.word	0x08006c3b
 8005784:	08006bf2 	.word	0x08006bf2
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <__ssvfiscanf_r+0x2ec>)
 800578a:	2b00      	cmp	r3, #0
 800578c:	f43f aec5 	beq.w	800551a <__ssvfiscanf_r+0x4e>
 8005790:	466b      	mov	r3, sp
 8005792:	4622      	mov	r2, r4
 8005794:	a941      	add	r1, sp, #260	; 0x104
 8005796:	4630      	mov	r0, r6
 8005798:	f3af 8000 	nop.w
 800579c:	e798      	b.n	80056d0 <__ssvfiscanf_r+0x204>
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057a4:	bf18      	it	ne
 80057a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80057aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80057ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80057b4:	e7f9      	b.n	80057aa <__ssvfiscanf_r+0x2de>
 80057b6:	bf00      	nop
 80057b8:	00000000 	.word	0x00000000

080057bc <__sfputc_r>:
 80057bc:	6893      	ldr	r3, [r2, #8]
 80057be:	3b01      	subs	r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	b410      	push	{r4}
 80057c4:	6093      	str	r3, [r2, #8]
 80057c6:	da08      	bge.n	80057da <__sfputc_r+0x1e>
 80057c8:	6994      	ldr	r4, [r2, #24]
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	db01      	blt.n	80057d2 <__sfputc_r+0x16>
 80057ce:	290a      	cmp	r1, #10
 80057d0:	d103      	bne.n	80057da <__sfputc_r+0x1e>
 80057d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057d6:	f000 bdbd 	b.w	8006354 <__swbuf_r>
 80057da:	6813      	ldr	r3, [r2, #0]
 80057dc:	1c58      	adds	r0, r3, #1
 80057de:	6010      	str	r0, [r2, #0]
 80057e0:	7019      	strb	r1, [r3, #0]
 80057e2:	4608      	mov	r0, r1
 80057e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <__sfputs_r>:
 80057ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ec:	4606      	mov	r6, r0
 80057ee:	460f      	mov	r7, r1
 80057f0:	4614      	mov	r4, r2
 80057f2:	18d5      	adds	r5, r2, r3
 80057f4:	42ac      	cmp	r4, r5
 80057f6:	d101      	bne.n	80057fc <__sfputs_r+0x12>
 80057f8:	2000      	movs	r0, #0
 80057fa:	e007      	b.n	800580c <__sfputs_r+0x22>
 80057fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005800:	463a      	mov	r2, r7
 8005802:	4630      	mov	r0, r6
 8005804:	f7ff ffda 	bl	80057bc <__sfputc_r>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d1f3      	bne.n	80057f4 <__sfputs_r+0xa>
 800580c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005810 <_vfiprintf_r>:
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	460d      	mov	r5, r1
 8005816:	b09d      	sub	sp, #116	; 0x74
 8005818:	4614      	mov	r4, r2
 800581a:	4698      	mov	r8, r3
 800581c:	4606      	mov	r6, r0
 800581e:	b118      	cbz	r0, 8005828 <_vfiprintf_r+0x18>
 8005820:	6983      	ldr	r3, [r0, #24]
 8005822:	b90b      	cbnz	r3, 8005828 <_vfiprintf_r+0x18>
 8005824:	f000 ff78 	bl	8006718 <__sinit>
 8005828:	4b89      	ldr	r3, [pc, #548]	; (8005a50 <_vfiprintf_r+0x240>)
 800582a:	429d      	cmp	r5, r3
 800582c:	d11b      	bne.n	8005866 <_vfiprintf_r+0x56>
 800582e:	6875      	ldr	r5, [r6, #4]
 8005830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005832:	07d9      	lsls	r1, r3, #31
 8005834:	d405      	bmi.n	8005842 <_vfiprintf_r+0x32>
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	059a      	lsls	r2, r3, #22
 800583a:	d402      	bmi.n	8005842 <_vfiprintf_r+0x32>
 800583c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800583e:	f001 f809 	bl	8006854 <__retarget_lock_acquire_recursive>
 8005842:	89ab      	ldrh	r3, [r5, #12]
 8005844:	071b      	lsls	r3, r3, #28
 8005846:	d501      	bpl.n	800584c <_vfiprintf_r+0x3c>
 8005848:	692b      	ldr	r3, [r5, #16]
 800584a:	b9eb      	cbnz	r3, 8005888 <_vfiprintf_r+0x78>
 800584c:	4629      	mov	r1, r5
 800584e:	4630      	mov	r0, r6
 8005850:	f000 fdd2 	bl	80063f8 <__swsetup_r>
 8005854:	b1c0      	cbz	r0, 8005888 <_vfiprintf_r+0x78>
 8005856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005858:	07dc      	lsls	r4, r3, #31
 800585a:	d50e      	bpl.n	800587a <_vfiprintf_r+0x6a>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005860:	b01d      	add	sp, #116	; 0x74
 8005862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005866:	4b7b      	ldr	r3, [pc, #492]	; (8005a54 <_vfiprintf_r+0x244>)
 8005868:	429d      	cmp	r5, r3
 800586a:	d101      	bne.n	8005870 <_vfiprintf_r+0x60>
 800586c:	68b5      	ldr	r5, [r6, #8]
 800586e:	e7df      	b.n	8005830 <_vfiprintf_r+0x20>
 8005870:	4b79      	ldr	r3, [pc, #484]	; (8005a58 <_vfiprintf_r+0x248>)
 8005872:	429d      	cmp	r5, r3
 8005874:	bf08      	it	eq
 8005876:	68f5      	ldreq	r5, [r6, #12]
 8005878:	e7da      	b.n	8005830 <_vfiprintf_r+0x20>
 800587a:	89ab      	ldrh	r3, [r5, #12]
 800587c:	0598      	lsls	r0, r3, #22
 800587e:	d4ed      	bmi.n	800585c <_vfiprintf_r+0x4c>
 8005880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005882:	f000 ffe8 	bl	8006856 <__retarget_lock_release_recursive>
 8005886:	e7e9      	b.n	800585c <_vfiprintf_r+0x4c>
 8005888:	2300      	movs	r3, #0
 800588a:	9309      	str	r3, [sp, #36]	; 0x24
 800588c:	2320      	movs	r3, #32
 800588e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005892:	f8cd 800c 	str.w	r8, [sp, #12]
 8005896:	2330      	movs	r3, #48	; 0x30
 8005898:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a5c <_vfiprintf_r+0x24c>
 800589c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058a0:	f04f 0901 	mov.w	r9, #1
 80058a4:	4623      	mov	r3, r4
 80058a6:	469a      	mov	sl, r3
 80058a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ac:	b10a      	cbz	r2, 80058b2 <_vfiprintf_r+0xa2>
 80058ae:	2a25      	cmp	r2, #37	; 0x25
 80058b0:	d1f9      	bne.n	80058a6 <_vfiprintf_r+0x96>
 80058b2:	ebba 0b04 	subs.w	fp, sl, r4
 80058b6:	d00b      	beq.n	80058d0 <_vfiprintf_r+0xc0>
 80058b8:	465b      	mov	r3, fp
 80058ba:	4622      	mov	r2, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	4630      	mov	r0, r6
 80058c0:	f7ff ff93 	bl	80057ea <__sfputs_r>
 80058c4:	3001      	adds	r0, #1
 80058c6:	f000 80aa 	beq.w	8005a1e <_vfiprintf_r+0x20e>
 80058ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058cc:	445a      	add	r2, fp
 80058ce:	9209      	str	r2, [sp, #36]	; 0x24
 80058d0:	f89a 3000 	ldrb.w	r3, [sl]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80a2 	beq.w	8005a1e <_vfiprintf_r+0x20e>
 80058da:	2300      	movs	r3, #0
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e4:	f10a 0a01 	add.w	sl, sl, #1
 80058e8:	9304      	str	r3, [sp, #16]
 80058ea:	9307      	str	r3, [sp, #28]
 80058ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058f0:	931a      	str	r3, [sp, #104]	; 0x68
 80058f2:	4654      	mov	r4, sl
 80058f4:	2205      	movs	r2, #5
 80058f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fa:	4858      	ldr	r0, [pc, #352]	; (8005a5c <_vfiprintf_r+0x24c>)
 80058fc:	f7fa fc80 	bl	8000200 <memchr>
 8005900:	9a04      	ldr	r2, [sp, #16]
 8005902:	b9d8      	cbnz	r0, 800593c <_vfiprintf_r+0x12c>
 8005904:	06d1      	lsls	r1, r2, #27
 8005906:	bf44      	itt	mi
 8005908:	2320      	movmi	r3, #32
 800590a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800590e:	0713      	lsls	r3, r2, #28
 8005910:	bf44      	itt	mi
 8005912:	232b      	movmi	r3, #43	; 0x2b
 8005914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005918:	f89a 3000 	ldrb.w	r3, [sl]
 800591c:	2b2a      	cmp	r3, #42	; 0x2a
 800591e:	d015      	beq.n	800594c <_vfiprintf_r+0x13c>
 8005920:	9a07      	ldr	r2, [sp, #28]
 8005922:	4654      	mov	r4, sl
 8005924:	2000      	movs	r0, #0
 8005926:	f04f 0c0a 	mov.w	ip, #10
 800592a:	4621      	mov	r1, r4
 800592c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005930:	3b30      	subs	r3, #48	; 0x30
 8005932:	2b09      	cmp	r3, #9
 8005934:	d94e      	bls.n	80059d4 <_vfiprintf_r+0x1c4>
 8005936:	b1b0      	cbz	r0, 8005966 <_vfiprintf_r+0x156>
 8005938:	9207      	str	r2, [sp, #28]
 800593a:	e014      	b.n	8005966 <_vfiprintf_r+0x156>
 800593c:	eba0 0308 	sub.w	r3, r0, r8
 8005940:	fa09 f303 	lsl.w	r3, r9, r3
 8005944:	4313      	orrs	r3, r2
 8005946:	9304      	str	r3, [sp, #16]
 8005948:	46a2      	mov	sl, r4
 800594a:	e7d2      	b.n	80058f2 <_vfiprintf_r+0xe2>
 800594c:	9b03      	ldr	r3, [sp, #12]
 800594e:	1d19      	adds	r1, r3, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	9103      	str	r1, [sp, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	bfbb      	ittet	lt
 8005958:	425b      	neglt	r3, r3
 800595a:	f042 0202 	orrlt.w	r2, r2, #2
 800595e:	9307      	strge	r3, [sp, #28]
 8005960:	9307      	strlt	r3, [sp, #28]
 8005962:	bfb8      	it	lt
 8005964:	9204      	strlt	r2, [sp, #16]
 8005966:	7823      	ldrb	r3, [r4, #0]
 8005968:	2b2e      	cmp	r3, #46	; 0x2e
 800596a:	d10c      	bne.n	8005986 <_vfiprintf_r+0x176>
 800596c:	7863      	ldrb	r3, [r4, #1]
 800596e:	2b2a      	cmp	r3, #42	; 0x2a
 8005970:	d135      	bne.n	80059de <_vfiprintf_r+0x1ce>
 8005972:	9b03      	ldr	r3, [sp, #12]
 8005974:	1d1a      	adds	r2, r3, #4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	9203      	str	r2, [sp, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfb8      	it	lt
 800597e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005982:	3402      	adds	r4, #2
 8005984:	9305      	str	r3, [sp, #20]
 8005986:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a6c <_vfiprintf_r+0x25c>
 800598a:	7821      	ldrb	r1, [r4, #0]
 800598c:	2203      	movs	r2, #3
 800598e:	4650      	mov	r0, sl
 8005990:	f7fa fc36 	bl	8000200 <memchr>
 8005994:	b140      	cbz	r0, 80059a8 <_vfiprintf_r+0x198>
 8005996:	2340      	movs	r3, #64	; 0x40
 8005998:	eba0 000a 	sub.w	r0, r0, sl
 800599c:	fa03 f000 	lsl.w	r0, r3, r0
 80059a0:	9b04      	ldr	r3, [sp, #16]
 80059a2:	4303      	orrs	r3, r0
 80059a4:	3401      	adds	r4, #1
 80059a6:	9304      	str	r3, [sp, #16]
 80059a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ac:	482c      	ldr	r0, [pc, #176]	; (8005a60 <_vfiprintf_r+0x250>)
 80059ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059b2:	2206      	movs	r2, #6
 80059b4:	f7fa fc24 	bl	8000200 <memchr>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d03f      	beq.n	8005a3c <_vfiprintf_r+0x22c>
 80059bc:	4b29      	ldr	r3, [pc, #164]	; (8005a64 <_vfiprintf_r+0x254>)
 80059be:	bb1b      	cbnz	r3, 8005a08 <_vfiprintf_r+0x1f8>
 80059c0:	9b03      	ldr	r3, [sp, #12]
 80059c2:	3307      	adds	r3, #7
 80059c4:	f023 0307 	bic.w	r3, r3, #7
 80059c8:	3308      	adds	r3, #8
 80059ca:	9303      	str	r3, [sp, #12]
 80059cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ce:	443b      	add	r3, r7
 80059d0:	9309      	str	r3, [sp, #36]	; 0x24
 80059d2:	e767      	b.n	80058a4 <_vfiprintf_r+0x94>
 80059d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80059d8:	460c      	mov	r4, r1
 80059da:	2001      	movs	r0, #1
 80059dc:	e7a5      	b.n	800592a <_vfiprintf_r+0x11a>
 80059de:	2300      	movs	r3, #0
 80059e0:	3401      	adds	r4, #1
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	4619      	mov	r1, r3
 80059e6:	f04f 0c0a 	mov.w	ip, #10
 80059ea:	4620      	mov	r0, r4
 80059ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059f0:	3a30      	subs	r2, #48	; 0x30
 80059f2:	2a09      	cmp	r2, #9
 80059f4:	d903      	bls.n	80059fe <_vfiprintf_r+0x1ee>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0c5      	beq.n	8005986 <_vfiprintf_r+0x176>
 80059fa:	9105      	str	r1, [sp, #20]
 80059fc:	e7c3      	b.n	8005986 <_vfiprintf_r+0x176>
 80059fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a02:	4604      	mov	r4, r0
 8005a04:	2301      	movs	r3, #1
 8005a06:	e7f0      	b.n	80059ea <_vfiprintf_r+0x1da>
 8005a08:	ab03      	add	r3, sp, #12
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	4b16      	ldr	r3, [pc, #88]	; (8005a68 <_vfiprintf_r+0x258>)
 8005a10:	a904      	add	r1, sp, #16
 8005a12:	4630      	mov	r0, r6
 8005a14:	f3af 8000 	nop.w
 8005a18:	4607      	mov	r7, r0
 8005a1a:	1c78      	adds	r0, r7, #1
 8005a1c:	d1d6      	bne.n	80059cc <_vfiprintf_r+0x1bc>
 8005a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a20:	07d9      	lsls	r1, r3, #31
 8005a22:	d405      	bmi.n	8005a30 <_vfiprintf_r+0x220>
 8005a24:	89ab      	ldrh	r3, [r5, #12]
 8005a26:	059a      	lsls	r2, r3, #22
 8005a28:	d402      	bmi.n	8005a30 <_vfiprintf_r+0x220>
 8005a2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a2c:	f000 ff13 	bl	8006856 <__retarget_lock_release_recursive>
 8005a30:	89ab      	ldrh	r3, [r5, #12]
 8005a32:	065b      	lsls	r3, r3, #25
 8005a34:	f53f af12 	bmi.w	800585c <_vfiprintf_r+0x4c>
 8005a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a3a:	e711      	b.n	8005860 <_vfiprintf_r+0x50>
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	462a      	mov	r2, r5
 8005a42:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <_vfiprintf_r+0x258>)
 8005a44:	a904      	add	r1, sp, #16
 8005a46:	4630      	mov	r0, r6
 8005a48:	f000 f880 	bl	8005b4c <_printf_i>
 8005a4c:	e7e4      	b.n	8005a18 <_vfiprintf_r+0x208>
 8005a4e:	bf00      	nop
 8005a50:	08006d5c 	.word	0x08006d5c
 8005a54:	08006d7c 	.word	0x08006d7c
 8005a58:	08006d3c 	.word	0x08006d3c
 8005a5c:	08006bec 	.word	0x08006bec
 8005a60:	08006bf6 	.word	0x08006bf6
 8005a64:	00000000 	.word	0x00000000
 8005a68:	080057eb 	.word	0x080057eb
 8005a6c:	08006bf2 	.word	0x08006bf2

08005a70 <_printf_common>:
 8005a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a74:	4616      	mov	r6, r2
 8005a76:	4699      	mov	r9, r3
 8005a78:	688a      	ldr	r2, [r1, #8]
 8005a7a:	690b      	ldr	r3, [r1, #16]
 8005a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a80:	4293      	cmp	r3, r2
 8005a82:	bfb8      	it	lt
 8005a84:	4613      	movlt	r3, r2
 8005a86:	6033      	str	r3, [r6, #0]
 8005a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	b10a      	cbz	r2, 8005a96 <_printf_common+0x26>
 8005a92:	3301      	adds	r3, #1
 8005a94:	6033      	str	r3, [r6, #0]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	0699      	lsls	r1, r3, #26
 8005a9a:	bf42      	ittt	mi
 8005a9c:	6833      	ldrmi	r3, [r6, #0]
 8005a9e:	3302      	addmi	r3, #2
 8005aa0:	6033      	strmi	r3, [r6, #0]
 8005aa2:	6825      	ldr	r5, [r4, #0]
 8005aa4:	f015 0506 	ands.w	r5, r5, #6
 8005aa8:	d106      	bne.n	8005ab8 <_printf_common+0x48>
 8005aaa:	f104 0a19 	add.w	sl, r4, #25
 8005aae:	68e3      	ldr	r3, [r4, #12]
 8005ab0:	6832      	ldr	r2, [r6, #0]
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	42ab      	cmp	r3, r5
 8005ab6:	dc26      	bgt.n	8005b06 <_printf_common+0x96>
 8005ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005abc:	1e13      	subs	r3, r2, #0
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	bf18      	it	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	0692      	lsls	r2, r2, #26
 8005ac6:	d42b      	bmi.n	8005b20 <_printf_common+0xb0>
 8005ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005acc:	4649      	mov	r1, r9
 8005ace:	4638      	mov	r0, r7
 8005ad0:	47c0      	blx	r8
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d01e      	beq.n	8005b14 <_printf_common+0xa4>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	68e5      	ldr	r5, [r4, #12]
 8005ada:	6832      	ldr	r2, [r6, #0]
 8005adc:	f003 0306 	and.w	r3, r3, #6
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	bf08      	it	eq
 8005ae4:	1aad      	subeq	r5, r5, r2
 8005ae6:	68a3      	ldr	r3, [r4, #8]
 8005ae8:	6922      	ldr	r2, [r4, #16]
 8005aea:	bf0c      	ite	eq
 8005aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af0:	2500      	movne	r5, #0
 8005af2:	4293      	cmp	r3, r2
 8005af4:	bfc4      	itt	gt
 8005af6:	1a9b      	subgt	r3, r3, r2
 8005af8:	18ed      	addgt	r5, r5, r3
 8005afa:	2600      	movs	r6, #0
 8005afc:	341a      	adds	r4, #26
 8005afe:	42b5      	cmp	r5, r6
 8005b00:	d11a      	bne.n	8005b38 <_printf_common+0xc8>
 8005b02:	2000      	movs	r0, #0
 8005b04:	e008      	b.n	8005b18 <_printf_common+0xa8>
 8005b06:	2301      	movs	r3, #1
 8005b08:	4652      	mov	r2, sl
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	47c0      	blx	r8
 8005b10:	3001      	adds	r0, #1
 8005b12:	d103      	bne.n	8005b1c <_printf_common+0xac>
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1c:	3501      	adds	r5, #1
 8005b1e:	e7c6      	b.n	8005aae <_printf_common+0x3e>
 8005b20:	18e1      	adds	r1, r4, r3
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	2030      	movs	r0, #48	; 0x30
 8005b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b2a:	4422      	add	r2, r4
 8005b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b34:	3302      	adds	r3, #2
 8005b36:	e7c7      	b.n	8005ac8 <_printf_common+0x58>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	4638      	mov	r0, r7
 8005b40:	47c0      	blx	r8
 8005b42:	3001      	adds	r0, #1
 8005b44:	d0e6      	beq.n	8005b14 <_printf_common+0xa4>
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7d9      	b.n	8005afe <_printf_common+0x8e>
	...

08005b4c <_printf_i>:
 8005b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	7e0f      	ldrb	r7, [r1, #24]
 8005b52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b54:	2f78      	cmp	r7, #120	; 0x78
 8005b56:	4691      	mov	r9, r2
 8005b58:	4680      	mov	r8, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	469a      	mov	sl, r3
 8005b5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b62:	d807      	bhi.n	8005b74 <_printf_i+0x28>
 8005b64:	2f62      	cmp	r7, #98	; 0x62
 8005b66:	d80a      	bhi.n	8005b7e <_printf_i+0x32>
 8005b68:	2f00      	cmp	r7, #0
 8005b6a:	f000 80d8 	beq.w	8005d1e <_printf_i+0x1d2>
 8005b6e:	2f58      	cmp	r7, #88	; 0x58
 8005b70:	f000 80a3 	beq.w	8005cba <_printf_i+0x16e>
 8005b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b7c:	e03a      	b.n	8005bf4 <_printf_i+0xa8>
 8005b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b82:	2b15      	cmp	r3, #21
 8005b84:	d8f6      	bhi.n	8005b74 <_printf_i+0x28>
 8005b86:	a101      	add	r1, pc, #4	; (adr r1, 8005b8c <_printf_i+0x40>)
 8005b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b8c:	08005be5 	.word	0x08005be5
 8005b90:	08005bf9 	.word	0x08005bf9
 8005b94:	08005b75 	.word	0x08005b75
 8005b98:	08005b75 	.word	0x08005b75
 8005b9c:	08005b75 	.word	0x08005b75
 8005ba0:	08005b75 	.word	0x08005b75
 8005ba4:	08005bf9 	.word	0x08005bf9
 8005ba8:	08005b75 	.word	0x08005b75
 8005bac:	08005b75 	.word	0x08005b75
 8005bb0:	08005b75 	.word	0x08005b75
 8005bb4:	08005b75 	.word	0x08005b75
 8005bb8:	08005d05 	.word	0x08005d05
 8005bbc:	08005c29 	.word	0x08005c29
 8005bc0:	08005ce7 	.word	0x08005ce7
 8005bc4:	08005b75 	.word	0x08005b75
 8005bc8:	08005b75 	.word	0x08005b75
 8005bcc:	08005d27 	.word	0x08005d27
 8005bd0:	08005b75 	.word	0x08005b75
 8005bd4:	08005c29 	.word	0x08005c29
 8005bd8:	08005b75 	.word	0x08005b75
 8005bdc:	08005b75 	.word	0x08005b75
 8005be0:	08005cef 	.word	0x08005cef
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	1d1a      	adds	r2, r3, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	602a      	str	r2, [r5, #0]
 8005bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0a3      	b.n	8005d40 <_printf_i+0x1f4>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	6829      	ldr	r1, [r5, #0]
 8005bfc:	0606      	lsls	r6, r0, #24
 8005bfe:	f101 0304 	add.w	r3, r1, #4
 8005c02:	d50a      	bpl.n	8005c1a <_printf_i+0xce>
 8005c04:	680e      	ldr	r6, [r1, #0]
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	2e00      	cmp	r6, #0
 8005c0a:	da03      	bge.n	8005c14 <_printf_i+0xc8>
 8005c0c:	232d      	movs	r3, #45	; 0x2d
 8005c0e:	4276      	negs	r6, r6
 8005c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c14:	485e      	ldr	r0, [pc, #376]	; (8005d90 <_printf_i+0x244>)
 8005c16:	230a      	movs	r3, #10
 8005c18:	e019      	b.n	8005c4e <_printf_i+0x102>
 8005c1a:	680e      	ldr	r6, [r1, #0]
 8005c1c:	602b      	str	r3, [r5, #0]
 8005c1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c22:	bf18      	it	ne
 8005c24:	b236      	sxthne	r6, r6
 8005c26:	e7ef      	b.n	8005c08 <_printf_i+0xbc>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	6820      	ldr	r0, [r4, #0]
 8005c2c:	1d19      	adds	r1, r3, #4
 8005c2e:	6029      	str	r1, [r5, #0]
 8005c30:	0601      	lsls	r1, r0, #24
 8005c32:	d501      	bpl.n	8005c38 <_printf_i+0xec>
 8005c34:	681e      	ldr	r6, [r3, #0]
 8005c36:	e002      	b.n	8005c3e <_printf_i+0xf2>
 8005c38:	0646      	lsls	r6, r0, #25
 8005c3a:	d5fb      	bpl.n	8005c34 <_printf_i+0xe8>
 8005c3c:	881e      	ldrh	r6, [r3, #0]
 8005c3e:	4854      	ldr	r0, [pc, #336]	; (8005d90 <_printf_i+0x244>)
 8005c40:	2f6f      	cmp	r7, #111	; 0x6f
 8005c42:	bf0c      	ite	eq
 8005c44:	2308      	moveq	r3, #8
 8005c46:	230a      	movne	r3, #10
 8005c48:	2100      	movs	r1, #0
 8005c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c4e:	6865      	ldr	r5, [r4, #4]
 8005c50:	60a5      	str	r5, [r4, #8]
 8005c52:	2d00      	cmp	r5, #0
 8005c54:	bfa2      	ittt	ge
 8005c56:	6821      	ldrge	r1, [r4, #0]
 8005c58:	f021 0104 	bicge.w	r1, r1, #4
 8005c5c:	6021      	strge	r1, [r4, #0]
 8005c5e:	b90e      	cbnz	r6, 8005c64 <_printf_i+0x118>
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	d04d      	beq.n	8005d00 <_printf_i+0x1b4>
 8005c64:	4615      	mov	r5, r2
 8005c66:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c6a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c6e:	5dc7      	ldrb	r7, [r0, r7]
 8005c70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c74:	4637      	mov	r7, r6
 8005c76:	42bb      	cmp	r3, r7
 8005c78:	460e      	mov	r6, r1
 8005c7a:	d9f4      	bls.n	8005c66 <_printf_i+0x11a>
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d10b      	bne.n	8005c98 <_printf_i+0x14c>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	07de      	lsls	r6, r3, #31
 8005c84:	d508      	bpl.n	8005c98 <_printf_i+0x14c>
 8005c86:	6923      	ldr	r3, [r4, #16]
 8005c88:	6861      	ldr	r1, [r4, #4]
 8005c8a:	4299      	cmp	r1, r3
 8005c8c:	bfde      	ittt	le
 8005c8e:	2330      	movle	r3, #48	; 0x30
 8005c90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c98:	1b52      	subs	r2, r2, r5
 8005c9a:	6122      	str	r2, [r4, #16]
 8005c9c:	f8cd a000 	str.w	sl, [sp]
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	aa03      	add	r2, sp, #12
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	f7ff fee2 	bl	8005a70 <_printf_common>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d14c      	bne.n	8005d4a <_printf_i+0x1fe>
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb4:	b004      	add	sp, #16
 8005cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cba:	4835      	ldr	r0, [pc, #212]	; (8005d90 <_printf_i+0x244>)
 8005cbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cc0:	6829      	ldr	r1, [r5, #0]
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cc8:	6029      	str	r1, [r5, #0]
 8005cca:	061d      	lsls	r5, r3, #24
 8005ccc:	d514      	bpl.n	8005cf8 <_printf_i+0x1ac>
 8005cce:	07df      	lsls	r7, r3, #31
 8005cd0:	bf44      	itt	mi
 8005cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8005cd6:	6023      	strmi	r3, [r4, #0]
 8005cd8:	b91e      	cbnz	r6, 8005ce2 <_printf_i+0x196>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	f023 0320 	bic.w	r3, r3, #32
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	2310      	movs	r3, #16
 8005ce4:	e7b0      	b.n	8005c48 <_printf_i+0xfc>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	f043 0320 	orr.w	r3, r3, #32
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	2378      	movs	r3, #120	; 0x78
 8005cf0:	4828      	ldr	r0, [pc, #160]	; (8005d94 <_printf_i+0x248>)
 8005cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cf6:	e7e3      	b.n	8005cc0 <_printf_i+0x174>
 8005cf8:	0659      	lsls	r1, r3, #25
 8005cfa:	bf48      	it	mi
 8005cfc:	b2b6      	uxthmi	r6, r6
 8005cfe:	e7e6      	b.n	8005cce <_printf_i+0x182>
 8005d00:	4615      	mov	r5, r2
 8005d02:	e7bb      	b.n	8005c7c <_printf_i+0x130>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	6826      	ldr	r6, [r4, #0]
 8005d08:	6961      	ldr	r1, [r4, #20]
 8005d0a:	1d18      	adds	r0, r3, #4
 8005d0c:	6028      	str	r0, [r5, #0]
 8005d0e:	0635      	lsls	r5, r6, #24
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	d501      	bpl.n	8005d18 <_printf_i+0x1cc>
 8005d14:	6019      	str	r1, [r3, #0]
 8005d16:	e002      	b.n	8005d1e <_printf_i+0x1d2>
 8005d18:	0670      	lsls	r0, r6, #25
 8005d1a:	d5fb      	bpl.n	8005d14 <_printf_i+0x1c8>
 8005d1c:	8019      	strh	r1, [r3, #0]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6123      	str	r3, [r4, #16]
 8005d22:	4615      	mov	r5, r2
 8005d24:	e7ba      	b.n	8005c9c <_printf_i+0x150>
 8005d26:	682b      	ldr	r3, [r5, #0]
 8005d28:	1d1a      	adds	r2, r3, #4
 8005d2a:	602a      	str	r2, [r5, #0]
 8005d2c:	681d      	ldr	r5, [r3, #0]
 8005d2e:	6862      	ldr	r2, [r4, #4]
 8005d30:	2100      	movs	r1, #0
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7fa fa64 	bl	8000200 <memchr>
 8005d38:	b108      	cbz	r0, 8005d3e <_printf_i+0x1f2>
 8005d3a:	1b40      	subs	r0, r0, r5
 8005d3c:	6060      	str	r0, [r4, #4]
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	2300      	movs	r3, #0
 8005d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d48:	e7a8      	b.n	8005c9c <_printf_i+0x150>
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	462a      	mov	r2, r5
 8005d4e:	4649      	mov	r1, r9
 8005d50:	4640      	mov	r0, r8
 8005d52:	47d0      	blx	sl
 8005d54:	3001      	adds	r0, #1
 8005d56:	d0ab      	beq.n	8005cb0 <_printf_i+0x164>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	079b      	lsls	r3, r3, #30
 8005d5c:	d413      	bmi.n	8005d86 <_printf_i+0x23a>
 8005d5e:	68e0      	ldr	r0, [r4, #12]
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	4298      	cmp	r0, r3
 8005d64:	bfb8      	it	lt
 8005d66:	4618      	movlt	r0, r3
 8005d68:	e7a4      	b.n	8005cb4 <_printf_i+0x168>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	4649      	mov	r1, r9
 8005d70:	4640      	mov	r0, r8
 8005d72:	47d0      	blx	sl
 8005d74:	3001      	adds	r0, #1
 8005d76:	d09b      	beq.n	8005cb0 <_printf_i+0x164>
 8005d78:	3501      	adds	r5, #1
 8005d7a:	68e3      	ldr	r3, [r4, #12]
 8005d7c:	9903      	ldr	r1, [sp, #12]
 8005d7e:	1a5b      	subs	r3, r3, r1
 8005d80:	42ab      	cmp	r3, r5
 8005d82:	dcf2      	bgt.n	8005d6a <_printf_i+0x21e>
 8005d84:	e7eb      	b.n	8005d5e <_printf_i+0x212>
 8005d86:	2500      	movs	r5, #0
 8005d88:	f104 0619 	add.w	r6, r4, #25
 8005d8c:	e7f5      	b.n	8005d7a <_printf_i+0x22e>
 8005d8e:	bf00      	nop
 8005d90:	08006bfd 	.word	0x08006bfd
 8005d94:	08006c0e 	.word	0x08006c0e

08005d98 <_scanf_chars>:
 8005d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d9c:	4615      	mov	r5, r2
 8005d9e:	688a      	ldr	r2, [r1, #8]
 8005da0:	4680      	mov	r8, r0
 8005da2:	460c      	mov	r4, r1
 8005da4:	b932      	cbnz	r2, 8005db4 <_scanf_chars+0x1c>
 8005da6:	698a      	ldr	r2, [r1, #24]
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	bf0c      	ite	eq
 8005dac:	2201      	moveq	r2, #1
 8005dae:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8005db2:	608a      	str	r2, [r1, #8]
 8005db4:	6822      	ldr	r2, [r4, #0]
 8005db6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005e48 <_scanf_chars+0xb0>
 8005dba:	06d1      	lsls	r1, r2, #27
 8005dbc:	bf5f      	itttt	pl
 8005dbe:	681a      	ldrpl	r2, [r3, #0]
 8005dc0:	1d11      	addpl	r1, r2, #4
 8005dc2:	6019      	strpl	r1, [r3, #0]
 8005dc4:	6816      	ldrpl	r6, [r2, #0]
 8005dc6:	2700      	movs	r7, #0
 8005dc8:	69a0      	ldr	r0, [r4, #24]
 8005dca:	b188      	cbz	r0, 8005df0 <_scanf_chars+0x58>
 8005dcc:	2801      	cmp	r0, #1
 8005dce:	d107      	bne.n	8005de0 <_scanf_chars+0x48>
 8005dd0:	682a      	ldr	r2, [r5, #0]
 8005dd2:	7811      	ldrb	r1, [r2, #0]
 8005dd4:	6962      	ldr	r2, [r4, #20]
 8005dd6:	5c52      	ldrb	r2, [r2, r1]
 8005dd8:	b952      	cbnz	r2, 8005df0 <_scanf_chars+0x58>
 8005dda:	2f00      	cmp	r7, #0
 8005ddc:	d031      	beq.n	8005e42 <_scanf_chars+0xaa>
 8005dde:	e022      	b.n	8005e26 <_scanf_chars+0x8e>
 8005de0:	2802      	cmp	r0, #2
 8005de2:	d120      	bne.n	8005e26 <_scanf_chars+0x8e>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005dec:	071b      	lsls	r3, r3, #28
 8005dee:	d41a      	bmi.n	8005e26 <_scanf_chars+0x8e>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	06da      	lsls	r2, r3, #27
 8005df4:	bf5e      	ittt	pl
 8005df6:	682b      	ldrpl	r3, [r5, #0]
 8005df8:	781b      	ldrbpl	r3, [r3, #0]
 8005dfa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005dfe:	682a      	ldr	r2, [r5, #0]
 8005e00:	686b      	ldr	r3, [r5, #4]
 8005e02:	3201      	adds	r2, #1
 8005e04:	602a      	str	r2, [r5, #0]
 8005e06:	68a2      	ldr	r2, [r4, #8]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	3a01      	subs	r2, #1
 8005e0c:	606b      	str	r3, [r5, #4]
 8005e0e:	3701      	adds	r7, #1
 8005e10:	60a2      	str	r2, [r4, #8]
 8005e12:	b142      	cbz	r2, 8005e26 <_scanf_chars+0x8e>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dcd7      	bgt.n	8005dc8 <_scanf_chars+0x30>
 8005e18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4640      	mov	r0, r8
 8005e20:	4798      	blx	r3
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d0d0      	beq.n	8005dc8 <_scanf_chars+0x30>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	f013 0310 	ands.w	r3, r3, #16
 8005e2c:	d105      	bne.n	8005e3a <_scanf_chars+0xa2>
 8005e2e:	68e2      	ldr	r2, [r4, #12]
 8005e30:	3201      	adds	r2, #1
 8005e32:	60e2      	str	r2, [r4, #12]
 8005e34:	69a2      	ldr	r2, [r4, #24]
 8005e36:	b102      	cbz	r2, 8005e3a <_scanf_chars+0xa2>
 8005e38:	7033      	strb	r3, [r6, #0]
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	443b      	add	r3, r7
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	2000      	movs	r0, #0
 8005e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e46:	bf00      	nop
 8005e48:	08006c3b 	.word	0x08006c3b

08005e4c <_scanf_i>:
 8005e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e50:	4698      	mov	r8, r3
 8005e52:	4b76      	ldr	r3, [pc, #472]	; (800602c <_scanf_i+0x1e0>)
 8005e54:	460c      	mov	r4, r1
 8005e56:	4682      	mov	sl, r0
 8005e58:	4616      	mov	r6, r2
 8005e5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	ab03      	add	r3, sp, #12
 8005e62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005e66:	4b72      	ldr	r3, [pc, #456]	; (8006030 <_scanf_i+0x1e4>)
 8005e68:	69a1      	ldr	r1, [r4, #24]
 8005e6a:	4a72      	ldr	r2, [pc, #456]	; (8006034 <_scanf_i+0x1e8>)
 8005e6c:	2903      	cmp	r1, #3
 8005e6e:	bf18      	it	ne
 8005e70:	461a      	movne	r2, r3
 8005e72:	68a3      	ldr	r3, [r4, #8]
 8005e74:	9201      	str	r2, [sp, #4]
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e7c:	bf88      	it	hi
 8005e7e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005e82:	4627      	mov	r7, r4
 8005e84:	bf82      	ittt	hi
 8005e86:	eb03 0905 	addhi.w	r9, r3, r5
 8005e8a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e8e:	60a3      	strhi	r3, [r4, #8]
 8005e90:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005e94:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005e98:	bf98      	it	ls
 8005e9a:	f04f 0900 	movls.w	r9, #0
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	463d      	mov	r5, r7
 8005ea2:	f04f 0b00 	mov.w	fp, #0
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	ab03      	add	r3, sp, #12
 8005eaa:	7809      	ldrb	r1, [r1, #0]
 8005eac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	f7fa f9a5 	bl	8000200 <memchr>
 8005eb6:	b328      	cbz	r0, 8005f04 <_scanf_i+0xb8>
 8005eb8:	f1bb 0f01 	cmp.w	fp, #1
 8005ebc:	d159      	bne.n	8005f72 <_scanf_i+0x126>
 8005ebe:	6862      	ldr	r2, [r4, #4]
 8005ec0:	b92a      	cbnz	r2, 8005ece <_scanf_i+0x82>
 8005ec2:	6822      	ldr	r2, [r4, #0]
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eca:	6063      	str	r3, [r4, #4]
 8005ecc:	6022      	str	r2, [r4, #0]
 8005ece:	6822      	ldr	r2, [r4, #0]
 8005ed0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005ed4:	6022      	str	r2, [r4, #0]
 8005ed6:	68a2      	ldr	r2, [r4, #8]
 8005ed8:	1e51      	subs	r1, r2, #1
 8005eda:	60a1      	str	r1, [r4, #8]
 8005edc:	b192      	cbz	r2, 8005f04 <_scanf_i+0xb8>
 8005ede:	6832      	ldr	r2, [r6, #0]
 8005ee0:	1c51      	adds	r1, r2, #1
 8005ee2:	6031      	str	r1, [r6, #0]
 8005ee4:	7812      	ldrb	r2, [r2, #0]
 8005ee6:	f805 2b01 	strb.w	r2, [r5], #1
 8005eea:	6872      	ldr	r2, [r6, #4]
 8005eec:	3a01      	subs	r2, #1
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	6072      	str	r2, [r6, #4]
 8005ef2:	dc07      	bgt.n	8005f04 <_scanf_i+0xb8>
 8005ef4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4650      	mov	r0, sl
 8005efc:	4790      	blx	r2
 8005efe:	2800      	cmp	r0, #0
 8005f00:	f040 8085 	bne.w	800600e <_scanf_i+0x1c2>
 8005f04:	f10b 0b01 	add.w	fp, fp, #1
 8005f08:	f1bb 0f03 	cmp.w	fp, #3
 8005f0c:	d1cb      	bne.n	8005ea6 <_scanf_i+0x5a>
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	b90b      	cbnz	r3, 8005f16 <_scanf_i+0xca>
 8005f12:	230a      	movs	r3, #10
 8005f14:	6063      	str	r3, [r4, #4]
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	4947      	ldr	r1, [pc, #284]	; (8006038 <_scanf_i+0x1ec>)
 8005f1a:	6960      	ldr	r0, [r4, #20]
 8005f1c:	1ac9      	subs	r1, r1, r3
 8005f1e:	f000 f8af 	bl	8006080 <__sccl>
 8005f22:	f04f 0b00 	mov.w	fp, #0
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	6822      	ldr	r2, [r4, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03d      	beq.n	8005faa <_scanf_i+0x15e>
 8005f2e:	6831      	ldr	r1, [r6, #0]
 8005f30:	6960      	ldr	r0, [r4, #20]
 8005f32:	f891 c000 	ldrb.w	ip, [r1]
 8005f36:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d035      	beq.n	8005faa <_scanf_i+0x15e>
 8005f3e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005f42:	d124      	bne.n	8005f8e <_scanf_i+0x142>
 8005f44:	0510      	lsls	r0, r2, #20
 8005f46:	d522      	bpl.n	8005f8e <_scanf_i+0x142>
 8005f48:	f10b 0b01 	add.w	fp, fp, #1
 8005f4c:	f1b9 0f00 	cmp.w	r9, #0
 8005f50:	d003      	beq.n	8005f5a <_scanf_i+0x10e>
 8005f52:	3301      	adds	r3, #1
 8005f54:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005f58:	60a3      	str	r3, [r4, #8]
 8005f5a:	6873      	ldr	r3, [r6, #4]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	6073      	str	r3, [r6, #4]
 8005f62:	dd1b      	ble.n	8005f9c <_scanf_i+0x150>
 8005f64:	6833      	ldr	r3, [r6, #0]
 8005f66:	3301      	adds	r3, #1
 8005f68:	6033      	str	r3, [r6, #0]
 8005f6a:	68a3      	ldr	r3, [r4, #8]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	60a3      	str	r3, [r4, #8]
 8005f70:	e7d9      	b.n	8005f26 <_scanf_i+0xda>
 8005f72:	f1bb 0f02 	cmp.w	fp, #2
 8005f76:	d1ae      	bne.n	8005ed6 <_scanf_i+0x8a>
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005f7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005f82:	d1bf      	bne.n	8005f04 <_scanf_i+0xb8>
 8005f84:	2310      	movs	r3, #16
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f8c:	e7a2      	b.n	8005ed4 <_scanf_i+0x88>
 8005f8e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005f92:	6022      	str	r2, [r4, #0]
 8005f94:	780b      	ldrb	r3, [r1, #0]
 8005f96:	f805 3b01 	strb.w	r3, [r5], #1
 8005f9a:	e7de      	b.n	8005f5a <_scanf_i+0x10e>
 8005f9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	4798      	blx	r3
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d0df      	beq.n	8005f6a <_scanf_i+0x11e>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	05db      	lsls	r3, r3, #23
 8005fae:	d50d      	bpl.n	8005fcc <_scanf_i+0x180>
 8005fb0:	42bd      	cmp	r5, r7
 8005fb2:	d909      	bls.n	8005fc8 <_scanf_i+0x17c>
 8005fb4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005fb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	4798      	blx	r3
 8005fc2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005fc6:	464d      	mov	r5, r9
 8005fc8:	42bd      	cmp	r5, r7
 8005fca:	d02d      	beq.n	8006028 <_scanf_i+0x1dc>
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	f012 0210 	ands.w	r2, r2, #16
 8005fd2:	d113      	bne.n	8005ffc <_scanf_i+0x1b0>
 8005fd4:	702a      	strb	r2, [r5, #0]
 8005fd6:	6863      	ldr	r3, [r4, #4]
 8005fd8:	9e01      	ldr	r6, [sp, #4]
 8005fda:	4639      	mov	r1, r7
 8005fdc:	4650      	mov	r0, sl
 8005fde:	47b0      	blx	r6
 8005fe0:	6821      	ldr	r1, [r4, #0]
 8005fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8005fe6:	f011 0f20 	tst.w	r1, #32
 8005fea:	d013      	beq.n	8006014 <_scanf_i+0x1c8>
 8005fec:	1d1a      	adds	r2, r3, #4
 8005fee:	f8c8 2000 	str.w	r2, [r8]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6018      	str	r0, [r3, #0]
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	60e3      	str	r3, [r4, #12]
 8005ffc:	1bed      	subs	r5, r5, r7
 8005ffe:	44ab      	add	fp, r5
 8006000:	6925      	ldr	r5, [r4, #16]
 8006002:	445d      	add	r5, fp
 8006004:	6125      	str	r5, [r4, #16]
 8006006:	2000      	movs	r0, #0
 8006008:	b007      	add	sp, #28
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	f04f 0b00 	mov.w	fp, #0
 8006012:	e7ca      	b.n	8005faa <_scanf_i+0x15e>
 8006014:	1d1a      	adds	r2, r3, #4
 8006016:	f8c8 2000 	str.w	r2, [r8]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f011 0f01 	tst.w	r1, #1
 8006020:	bf14      	ite	ne
 8006022:	8018      	strhne	r0, [r3, #0]
 8006024:	6018      	streq	r0, [r3, #0]
 8006026:	e7e6      	b.n	8005ff6 <_scanf_i+0x1aa>
 8006028:	2001      	movs	r0, #1
 800602a:	e7ed      	b.n	8006008 <_scanf_i+0x1bc>
 800602c:	08006b14 	.word	0x08006b14
 8006030:	080062dd 	.word	0x080062dd
 8006034:	080061f5 	.word	0x080061f5
 8006038:	08006c38 	.word	0x08006c38

0800603c <_read_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4d07      	ldr	r5, [pc, #28]	; (800605c <_read_r+0x20>)
 8006040:	4604      	mov	r4, r0
 8006042:	4608      	mov	r0, r1
 8006044:	4611      	mov	r1, r2
 8006046:	2200      	movs	r2, #0
 8006048:	602a      	str	r2, [r5, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f7fb fc44 	bl	80018d8 <_read>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_read_r+0x1e>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_read_r+0x1e>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	20000128 	.word	0x20000128

08006060 <_sbrk_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d06      	ldr	r5, [pc, #24]	; (800607c <_sbrk_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fb fca2 	bl	80019b4 <_sbrk>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_sbrk_r+0x1a>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_sbrk_r+0x1a>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20000128 	.word	0x20000128

08006080 <__sccl>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	780b      	ldrb	r3, [r1, #0]
 8006084:	4604      	mov	r4, r0
 8006086:	2b5e      	cmp	r3, #94	; 0x5e
 8006088:	bf0b      	itete	eq
 800608a:	784b      	ldrbeq	r3, [r1, #1]
 800608c:	1c48      	addne	r0, r1, #1
 800608e:	1c88      	addeq	r0, r1, #2
 8006090:	2200      	movne	r2, #0
 8006092:	bf08      	it	eq
 8006094:	2201      	moveq	r2, #1
 8006096:	1e61      	subs	r1, r4, #1
 8006098:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800609c:	f801 2f01 	strb.w	r2, [r1, #1]!
 80060a0:	42a9      	cmp	r1, r5
 80060a2:	d1fb      	bne.n	800609c <__sccl+0x1c>
 80060a4:	b90b      	cbnz	r3, 80060aa <__sccl+0x2a>
 80060a6:	3801      	subs	r0, #1
 80060a8:	bd70      	pop	{r4, r5, r6, pc}
 80060aa:	f082 0201 	eor.w	r2, r2, #1
 80060ae:	54e2      	strb	r2, [r4, r3]
 80060b0:	4605      	mov	r5, r0
 80060b2:	4628      	mov	r0, r5
 80060b4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80060b8:	292d      	cmp	r1, #45	; 0x2d
 80060ba:	d006      	beq.n	80060ca <__sccl+0x4a>
 80060bc:	295d      	cmp	r1, #93	; 0x5d
 80060be:	d0f3      	beq.n	80060a8 <__sccl+0x28>
 80060c0:	b909      	cbnz	r1, 80060c6 <__sccl+0x46>
 80060c2:	4628      	mov	r0, r5
 80060c4:	e7f0      	b.n	80060a8 <__sccl+0x28>
 80060c6:	460b      	mov	r3, r1
 80060c8:	e7f1      	b.n	80060ae <__sccl+0x2e>
 80060ca:	786e      	ldrb	r6, [r5, #1]
 80060cc:	2e5d      	cmp	r6, #93	; 0x5d
 80060ce:	d0fa      	beq.n	80060c6 <__sccl+0x46>
 80060d0:	42b3      	cmp	r3, r6
 80060d2:	dcf8      	bgt.n	80060c6 <__sccl+0x46>
 80060d4:	3502      	adds	r5, #2
 80060d6:	4619      	mov	r1, r3
 80060d8:	3101      	adds	r1, #1
 80060da:	428e      	cmp	r6, r1
 80060dc:	5462      	strb	r2, [r4, r1]
 80060de:	dcfb      	bgt.n	80060d8 <__sccl+0x58>
 80060e0:	1af1      	subs	r1, r6, r3
 80060e2:	3901      	subs	r1, #1
 80060e4:	1c58      	adds	r0, r3, #1
 80060e6:	42b3      	cmp	r3, r6
 80060e8:	bfa8      	it	ge
 80060ea:	2100      	movge	r1, #0
 80060ec:	1843      	adds	r3, r0, r1
 80060ee:	e7e0      	b.n	80060b2 <__sccl+0x32>

080060f0 <_strtol_l.constprop.0>:
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f6:	d001      	beq.n	80060fc <_strtol_l.constprop.0+0xc>
 80060f8:	2b24      	cmp	r3, #36	; 0x24
 80060fa:	d906      	bls.n	800610a <_strtol_l.constprop.0+0x1a>
 80060fc:	f7fe fdc4 	bl	8004c88 <__errno>
 8006100:	2316      	movs	r3, #22
 8006102:	6003      	str	r3, [r0, #0]
 8006104:	2000      	movs	r0, #0
 8006106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800610a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80061f0 <_strtol_l.constprop.0+0x100>
 800610e:	460d      	mov	r5, r1
 8006110:	462e      	mov	r6, r5
 8006112:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006116:	f814 700c 	ldrb.w	r7, [r4, ip]
 800611a:	f017 0708 	ands.w	r7, r7, #8
 800611e:	d1f7      	bne.n	8006110 <_strtol_l.constprop.0+0x20>
 8006120:	2c2d      	cmp	r4, #45	; 0x2d
 8006122:	d132      	bne.n	800618a <_strtol_l.constprop.0+0x9a>
 8006124:	782c      	ldrb	r4, [r5, #0]
 8006126:	2701      	movs	r7, #1
 8006128:	1cb5      	adds	r5, r6, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d05b      	beq.n	80061e6 <_strtol_l.constprop.0+0xf6>
 800612e:	2b10      	cmp	r3, #16
 8006130:	d109      	bne.n	8006146 <_strtol_l.constprop.0+0x56>
 8006132:	2c30      	cmp	r4, #48	; 0x30
 8006134:	d107      	bne.n	8006146 <_strtol_l.constprop.0+0x56>
 8006136:	782c      	ldrb	r4, [r5, #0]
 8006138:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800613c:	2c58      	cmp	r4, #88	; 0x58
 800613e:	d14d      	bne.n	80061dc <_strtol_l.constprop.0+0xec>
 8006140:	786c      	ldrb	r4, [r5, #1]
 8006142:	2310      	movs	r3, #16
 8006144:	3502      	adds	r5, #2
 8006146:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800614a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800614e:	f04f 0c00 	mov.w	ip, #0
 8006152:	fbb8 f9f3 	udiv	r9, r8, r3
 8006156:	4666      	mov	r6, ip
 8006158:	fb03 8a19 	mls	sl, r3, r9, r8
 800615c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006160:	f1be 0f09 	cmp.w	lr, #9
 8006164:	d816      	bhi.n	8006194 <_strtol_l.constprop.0+0xa4>
 8006166:	4674      	mov	r4, lr
 8006168:	42a3      	cmp	r3, r4
 800616a:	dd24      	ble.n	80061b6 <_strtol_l.constprop.0+0xc6>
 800616c:	f1bc 0f00 	cmp.w	ip, #0
 8006170:	db1e      	blt.n	80061b0 <_strtol_l.constprop.0+0xc0>
 8006172:	45b1      	cmp	r9, r6
 8006174:	d31c      	bcc.n	80061b0 <_strtol_l.constprop.0+0xc0>
 8006176:	d101      	bne.n	800617c <_strtol_l.constprop.0+0x8c>
 8006178:	45a2      	cmp	sl, r4
 800617a:	db19      	blt.n	80061b0 <_strtol_l.constprop.0+0xc0>
 800617c:	fb06 4603 	mla	r6, r6, r3, r4
 8006180:	f04f 0c01 	mov.w	ip, #1
 8006184:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006188:	e7e8      	b.n	800615c <_strtol_l.constprop.0+0x6c>
 800618a:	2c2b      	cmp	r4, #43	; 0x2b
 800618c:	bf04      	itt	eq
 800618e:	782c      	ldrbeq	r4, [r5, #0]
 8006190:	1cb5      	addeq	r5, r6, #2
 8006192:	e7ca      	b.n	800612a <_strtol_l.constprop.0+0x3a>
 8006194:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006198:	f1be 0f19 	cmp.w	lr, #25
 800619c:	d801      	bhi.n	80061a2 <_strtol_l.constprop.0+0xb2>
 800619e:	3c37      	subs	r4, #55	; 0x37
 80061a0:	e7e2      	b.n	8006168 <_strtol_l.constprop.0+0x78>
 80061a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80061a6:	f1be 0f19 	cmp.w	lr, #25
 80061aa:	d804      	bhi.n	80061b6 <_strtol_l.constprop.0+0xc6>
 80061ac:	3c57      	subs	r4, #87	; 0x57
 80061ae:	e7db      	b.n	8006168 <_strtol_l.constprop.0+0x78>
 80061b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80061b4:	e7e6      	b.n	8006184 <_strtol_l.constprop.0+0x94>
 80061b6:	f1bc 0f00 	cmp.w	ip, #0
 80061ba:	da05      	bge.n	80061c8 <_strtol_l.constprop.0+0xd8>
 80061bc:	2322      	movs	r3, #34	; 0x22
 80061be:	6003      	str	r3, [r0, #0]
 80061c0:	4646      	mov	r6, r8
 80061c2:	b942      	cbnz	r2, 80061d6 <_strtol_l.constprop.0+0xe6>
 80061c4:	4630      	mov	r0, r6
 80061c6:	e79e      	b.n	8006106 <_strtol_l.constprop.0+0x16>
 80061c8:	b107      	cbz	r7, 80061cc <_strtol_l.constprop.0+0xdc>
 80061ca:	4276      	negs	r6, r6
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	d0f9      	beq.n	80061c4 <_strtol_l.constprop.0+0xd4>
 80061d0:	f1bc 0f00 	cmp.w	ip, #0
 80061d4:	d000      	beq.n	80061d8 <_strtol_l.constprop.0+0xe8>
 80061d6:	1e69      	subs	r1, r5, #1
 80061d8:	6011      	str	r1, [r2, #0]
 80061da:	e7f3      	b.n	80061c4 <_strtol_l.constprop.0+0xd4>
 80061dc:	2430      	movs	r4, #48	; 0x30
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1b1      	bne.n	8006146 <_strtol_l.constprop.0+0x56>
 80061e2:	2308      	movs	r3, #8
 80061e4:	e7af      	b.n	8006146 <_strtol_l.constprop.0+0x56>
 80061e6:	2c30      	cmp	r4, #48	; 0x30
 80061e8:	d0a5      	beq.n	8006136 <_strtol_l.constprop.0+0x46>
 80061ea:	230a      	movs	r3, #10
 80061ec:	e7ab      	b.n	8006146 <_strtol_l.constprop.0+0x56>
 80061ee:	bf00      	nop
 80061f0:	08006c3b 	.word	0x08006c3b

080061f4 <_strtol_r>:
 80061f4:	f7ff bf7c 	b.w	80060f0 <_strtol_l.constprop.0>

080061f8 <_strtoul_l.constprop.0>:
 80061f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061fc:	4f36      	ldr	r7, [pc, #216]	; (80062d8 <_strtoul_l.constprop.0+0xe0>)
 80061fe:	4686      	mov	lr, r0
 8006200:	460d      	mov	r5, r1
 8006202:	4628      	mov	r0, r5
 8006204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006208:	5de6      	ldrb	r6, [r4, r7]
 800620a:	f016 0608 	ands.w	r6, r6, #8
 800620e:	d1f8      	bne.n	8006202 <_strtoul_l.constprop.0+0xa>
 8006210:	2c2d      	cmp	r4, #45	; 0x2d
 8006212:	d12f      	bne.n	8006274 <_strtoul_l.constprop.0+0x7c>
 8006214:	782c      	ldrb	r4, [r5, #0]
 8006216:	2601      	movs	r6, #1
 8006218:	1c85      	adds	r5, r0, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d057      	beq.n	80062ce <_strtoul_l.constprop.0+0xd6>
 800621e:	2b10      	cmp	r3, #16
 8006220:	d109      	bne.n	8006236 <_strtoul_l.constprop.0+0x3e>
 8006222:	2c30      	cmp	r4, #48	; 0x30
 8006224:	d107      	bne.n	8006236 <_strtoul_l.constprop.0+0x3e>
 8006226:	7828      	ldrb	r0, [r5, #0]
 8006228:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800622c:	2858      	cmp	r0, #88	; 0x58
 800622e:	d149      	bne.n	80062c4 <_strtoul_l.constprop.0+0xcc>
 8006230:	786c      	ldrb	r4, [r5, #1]
 8006232:	2310      	movs	r3, #16
 8006234:	3502      	adds	r5, #2
 8006236:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800623a:	2700      	movs	r7, #0
 800623c:	fbb8 f8f3 	udiv	r8, r8, r3
 8006240:	fb03 f908 	mul.w	r9, r3, r8
 8006244:	ea6f 0909 	mvn.w	r9, r9
 8006248:	4638      	mov	r0, r7
 800624a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800624e:	f1bc 0f09 	cmp.w	ip, #9
 8006252:	d814      	bhi.n	800627e <_strtoul_l.constprop.0+0x86>
 8006254:	4664      	mov	r4, ip
 8006256:	42a3      	cmp	r3, r4
 8006258:	dd22      	ble.n	80062a0 <_strtoul_l.constprop.0+0xa8>
 800625a:	2f00      	cmp	r7, #0
 800625c:	db1d      	blt.n	800629a <_strtoul_l.constprop.0+0xa2>
 800625e:	4580      	cmp	r8, r0
 8006260:	d31b      	bcc.n	800629a <_strtoul_l.constprop.0+0xa2>
 8006262:	d101      	bne.n	8006268 <_strtoul_l.constprop.0+0x70>
 8006264:	45a1      	cmp	r9, r4
 8006266:	db18      	blt.n	800629a <_strtoul_l.constprop.0+0xa2>
 8006268:	fb00 4003 	mla	r0, r0, r3, r4
 800626c:	2701      	movs	r7, #1
 800626e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006272:	e7ea      	b.n	800624a <_strtoul_l.constprop.0+0x52>
 8006274:	2c2b      	cmp	r4, #43	; 0x2b
 8006276:	bf04      	itt	eq
 8006278:	782c      	ldrbeq	r4, [r5, #0]
 800627a:	1c85      	addeq	r5, r0, #2
 800627c:	e7cd      	b.n	800621a <_strtoul_l.constprop.0+0x22>
 800627e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006282:	f1bc 0f19 	cmp.w	ip, #25
 8006286:	d801      	bhi.n	800628c <_strtoul_l.constprop.0+0x94>
 8006288:	3c37      	subs	r4, #55	; 0x37
 800628a:	e7e4      	b.n	8006256 <_strtoul_l.constprop.0+0x5e>
 800628c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006290:	f1bc 0f19 	cmp.w	ip, #25
 8006294:	d804      	bhi.n	80062a0 <_strtoul_l.constprop.0+0xa8>
 8006296:	3c57      	subs	r4, #87	; 0x57
 8006298:	e7dd      	b.n	8006256 <_strtoul_l.constprop.0+0x5e>
 800629a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800629e:	e7e6      	b.n	800626e <_strtoul_l.constprop.0+0x76>
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	da07      	bge.n	80062b4 <_strtoul_l.constprop.0+0xbc>
 80062a4:	2322      	movs	r3, #34	; 0x22
 80062a6:	f8ce 3000 	str.w	r3, [lr]
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062ae:	b932      	cbnz	r2, 80062be <_strtoul_l.constprop.0+0xc6>
 80062b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062b4:	b106      	cbz	r6, 80062b8 <_strtoul_l.constprop.0+0xc0>
 80062b6:	4240      	negs	r0, r0
 80062b8:	2a00      	cmp	r2, #0
 80062ba:	d0f9      	beq.n	80062b0 <_strtoul_l.constprop.0+0xb8>
 80062bc:	b107      	cbz	r7, 80062c0 <_strtoul_l.constprop.0+0xc8>
 80062be:	1e69      	subs	r1, r5, #1
 80062c0:	6011      	str	r1, [r2, #0]
 80062c2:	e7f5      	b.n	80062b0 <_strtoul_l.constprop.0+0xb8>
 80062c4:	2430      	movs	r4, #48	; 0x30
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1b5      	bne.n	8006236 <_strtoul_l.constprop.0+0x3e>
 80062ca:	2308      	movs	r3, #8
 80062cc:	e7b3      	b.n	8006236 <_strtoul_l.constprop.0+0x3e>
 80062ce:	2c30      	cmp	r4, #48	; 0x30
 80062d0:	d0a9      	beq.n	8006226 <_strtoul_l.constprop.0+0x2e>
 80062d2:	230a      	movs	r3, #10
 80062d4:	e7af      	b.n	8006236 <_strtoul_l.constprop.0+0x3e>
 80062d6:	bf00      	nop
 80062d8:	08006c3b 	.word	0x08006c3b

080062dc <_strtoul_r>:
 80062dc:	f7ff bf8c 	b.w	80061f8 <_strtoul_l.constprop.0>

080062e0 <__submore>:
 80062e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e4:	460c      	mov	r4, r1
 80062e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80062e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062ec:	4299      	cmp	r1, r3
 80062ee:	d11d      	bne.n	800632c <__submore+0x4c>
 80062f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062f4:	f7fe fec0 	bl	8005078 <_malloc_r>
 80062f8:	b918      	cbnz	r0, 8006302 <__submore+0x22>
 80062fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006306:	63a3      	str	r3, [r4, #56]	; 0x38
 8006308:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800630c:	6360      	str	r0, [r4, #52]	; 0x34
 800630e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006312:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006316:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800631a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800631e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006322:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006326:	6020      	str	r0, [r4, #0]
 8006328:	2000      	movs	r0, #0
 800632a:	e7e8      	b.n	80062fe <__submore+0x1e>
 800632c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800632e:	0077      	lsls	r7, r6, #1
 8006330:	463a      	mov	r2, r7
 8006332:	f000 fb2b 	bl	800698c <_realloc_r>
 8006336:	4605      	mov	r5, r0
 8006338:	2800      	cmp	r0, #0
 800633a:	d0de      	beq.n	80062fa <__submore+0x1a>
 800633c:	eb00 0806 	add.w	r8, r0, r6
 8006340:	4601      	mov	r1, r0
 8006342:	4632      	mov	r2, r6
 8006344:	4640      	mov	r0, r8
 8006346:	f000 faed 	bl	8006924 <memcpy>
 800634a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800634e:	f8c4 8000 	str.w	r8, [r4]
 8006352:	e7e9      	b.n	8006328 <__submore+0x48>

08006354 <__swbuf_r>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	460e      	mov	r6, r1
 8006358:	4614      	mov	r4, r2
 800635a:	4605      	mov	r5, r0
 800635c:	b118      	cbz	r0, 8006366 <__swbuf_r+0x12>
 800635e:	6983      	ldr	r3, [r0, #24]
 8006360:	b90b      	cbnz	r3, 8006366 <__swbuf_r+0x12>
 8006362:	f000 f9d9 	bl	8006718 <__sinit>
 8006366:	4b21      	ldr	r3, [pc, #132]	; (80063ec <__swbuf_r+0x98>)
 8006368:	429c      	cmp	r4, r3
 800636a:	d12b      	bne.n	80063c4 <__swbuf_r+0x70>
 800636c:	686c      	ldr	r4, [r5, #4]
 800636e:	69a3      	ldr	r3, [r4, #24]
 8006370:	60a3      	str	r3, [r4, #8]
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	071a      	lsls	r2, r3, #28
 8006376:	d52f      	bpl.n	80063d8 <__swbuf_r+0x84>
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	b36b      	cbz	r3, 80063d8 <__swbuf_r+0x84>
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	6820      	ldr	r0, [r4, #0]
 8006380:	1ac0      	subs	r0, r0, r3
 8006382:	6963      	ldr	r3, [r4, #20]
 8006384:	b2f6      	uxtb	r6, r6
 8006386:	4283      	cmp	r3, r0
 8006388:	4637      	mov	r7, r6
 800638a:	dc04      	bgt.n	8006396 <__swbuf_r+0x42>
 800638c:	4621      	mov	r1, r4
 800638e:	4628      	mov	r0, r5
 8006390:	f000 f92e 	bl	80065f0 <_fflush_r>
 8006394:	bb30      	cbnz	r0, 80063e4 <__swbuf_r+0x90>
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	3b01      	subs	r3, #1
 800639a:	60a3      	str	r3, [r4, #8]
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	6022      	str	r2, [r4, #0]
 80063a2:	701e      	strb	r6, [r3, #0]
 80063a4:	6963      	ldr	r3, [r4, #20]
 80063a6:	3001      	adds	r0, #1
 80063a8:	4283      	cmp	r3, r0
 80063aa:	d004      	beq.n	80063b6 <__swbuf_r+0x62>
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	07db      	lsls	r3, r3, #31
 80063b0:	d506      	bpl.n	80063c0 <__swbuf_r+0x6c>
 80063b2:	2e0a      	cmp	r6, #10
 80063b4:	d104      	bne.n	80063c0 <__swbuf_r+0x6c>
 80063b6:	4621      	mov	r1, r4
 80063b8:	4628      	mov	r0, r5
 80063ba:	f000 f919 	bl	80065f0 <_fflush_r>
 80063be:	b988      	cbnz	r0, 80063e4 <__swbuf_r+0x90>
 80063c0:	4638      	mov	r0, r7
 80063c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <__swbuf_r+0x9c>)
 80063c6:	429c      	cmp	r4, r3
 80063c8:	d101      	bne.n	80063ce <__swbuf_r+0x7a>
 80063ca:	68ac      	ldr	r4, [r5, #8]
 80063cc:	e7cf      	b.n	800636e <__swbuf_r+0x1a>
 80063ce:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <__swbuf_r+0xa0>)
 80063d0:	429c      	cmp	r4, r3
 80063d2:	bf08      	it	eq
 80063d4:	68ec      	ldreq	r4, [r5, #12]
 80063d6:	e7ca      	b.n	800636e <__swbuf_r+0x1a>
 80063d8:	4621      	mov	r1, r4
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 f80c 	bl	80063f8 <__swsetup_r>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d0cb      	beq.n	800637c <__swbuf_r+0x28>
 80063e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80063e8:	e7ea      	b.n	80063c0 <__swbuf_r+0x6c>
 80063ea:	bf00      	nop
 80063ec:	08006d5c 	.word	0x08006d5c
 80063f0:	08006d7c 	.word	0x08006d7c
 80063f4:	08006d3c 	.word	0x08006d3c

080063f8 <__swsetup_r>:
 80063f8:	4b32      	ldr	r3, [pc, #200]	; (80064c4 <__swsetup_r+0xcc>)
 80063fa:	b570      	push	{r4, r5, r6, lr}
 80063fc:	681d      	ldr	r5, [r3, #0]
 80063fe:	4606      	mov	r6, r0
 8006400:	460c      	mov	r4, r1
 8006402:	b125      	cbz	r5, 800640e <__swsetup_r+0x16>
 8006404:	69ab      	ldr	r3, [r5, #24]
 8006406:	b913      	cbnz	r3, 800640e <__swsetup_r+0x16>
 8006408:	4628      	mov	r0, r5
 800640a:	f000 f985 	bl	8006718 <__sinit>
 800640e:	4b2e      	ldr	r3, [pc, #184]	; (80064c8 <__swsetup_r+0xd0>)
 8006410:	429c      	cmp	r4, r3
 8006412:	d10f      	bne.n	8006434 <__swsetup_r+0x3c>
 8006414:	686c      	ldr	r4, [r5, #4]
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800641c:	0719      	lsls	r1, r3, #28
 800641e:	d42c      	bmi.n	800647a <__swsetup_r+0x82>
 8006420:	06dd      	lsls	r5, r3, #27
 8006422:	d411      	bmi.n	8006448 <__swsetup_r+0x50>
 8006424:	2309      	movs	r3, #9
 8006426:	6033      	str	r3, [r6, #0]
 8006428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006432:	e03e      	b.n	80064b2 <__swsetup_r+0xba>
 8006434:	4b25      	ldr	r3, [pc, #148]	; (80064cc <__swsetup_r+0xd4>)
 8006436:	429c      	cmp	r4, r3
 8006438:	d101      	bne.n	800643e <__swsetup_r+0x46>
 800643a:	68ac      	ldr	r4, [r5, #8]
 800643c:	e7eb      	b.n	8006416 <__swsetup_r+0x1e>
 800643e:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <__swsetup_r+0xd8>)
 8006440:	429c      	cmp	r4, r3
 8006442:	bf08      	it	eq
 8006444:	68ec      	ldreq	r4, [r5, #12]
 8006446:	e7e6      	b.n	8006416 <__swsetup_r+0x1e>
 8006448:	0758      	lsls	r0, r3, #29
 800644a:	d512      	bpl.n	8006472 <__swsetup_r+0x7a>
 800644c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800644e:	b141      	cbz	r1, 8006462 <__swsetup_r+0x6a>
 8006450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006454:	4299      	cmp	r1, r3
 8006456:	d002      	beq.n	800645e <__swsetup_r+0x66>
 8006458:	4630      	mov	r0, r6
 800645a:	f7fe fda1 	bl	8004fa0 <_free_r>
 800645e:	2300      	movs	r3, #0
 8006460:	6363      	str	r3, [r4, #52]	; 0x34
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	2300      	movs	r3, #0
 800646c:	6063      	str	r3, [r4, #4]
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	f043 0308 	orr.w	r3, r3, #8
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	6923      	ldr	r3, [r4, #16]
 800647c:	b94b      	cbnz	r3, 8006492 <__swsetup_r+0x9a>
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006488:	d003      	beq.n	8006492 <__swsetup_r+0x9a>
 800648a:	4621      	mov	r1, r4
 800648c:	4630      	mov	r0, r6
 800648e:	f000 fa09 	bl	80068a4 <__smakebuf_r>
 8006492:	89a0      	ldrh	r0, [r4, #12]
 8006494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006498:	f010 0301 	ands.w	r3, r0, #1
 800649c:	d00a      	beq.n	80064b4 <__swsetup_r+0xbc>
 800649e:	2300      	movs	r3, #0
 80064a0:	60a3      	str	r3, [r4, #8]
 80064a2:	6963      	ldr	r3, [r4, #20]
 80064a4:	425b      	negs	r3, r3
 80064a6:	61a3      	str	r3, [r4, #24]
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	b943      	cbnz	r3, 80064be <__swsetup_r+0xc6>
 80064ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064b0:	d1ba      	bne.n	8006428 <__swsetup_r+0x30>
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	0781      	lsls	r1, r0, #30
 80064b6:	bf58      	it	pl
 80064b8:	6963      	ldrpl	r3, [r4, #20]
 80064ba:	60a3      	str	r3, [r4, #8]
 80064bc:	e7f4      	b.n	80064a8 <__swsetup_r+0xb0>
 80064be:	2000      	movs	r0, #0
 80064c0:	e7f7      	b.n	80064b2 <__swsetup_r+0xba>
 80064c2:	bf00      	nop
 80064c4:	2000000c 	.word	0x2000000c
 80064c8:	08006d5c 	.word	0x08006d5c
 80064cc:	08006d7c 	.word	0x08006d7c
 80064d0:	08006d3c 	.word	0x08006d3c

080064d4 <abort>:
 80064d4:	b508      	push	{r3, lr}
 80064d6:	2006      	movs	r0, #6
 80064d8:	f000 fab0 	bl	8006a3c <raise>
 80064dc:	2001      	movs	r0, #1
 80064de:	f7fb f9f1 	bl	80018c4 <_exit>
	...

080064e4 <__sflush_r>:
 80064e4:	898a      	ldrh	r2, [r1, #12]
 80064e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ea:	4605      	mov	r5, r0
 80064ec:	0710      	lsls	r0, r2, #28
 80064ee:	460c      	mov	r4, r1
 80064f0:	d458      	bmi.n	80065a4 <__sflush_r+0xc0>
 80064f2:	684b      	ldr	r3, [r1, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dc05      	bgt.n	8006504 <__sflush_r+0x20>
 80064f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dc02      	bgt.n	8006504 <__sflush_r+0x20>
 80064fe:	2000      	movs	r0, #0
 8006500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006506:	2e00      	cmp	r6, #0
 8006508:	d0f9      	beq.n	80064fe <__sflush_r+0x1a>
 800650a:	2300      	movs	r3, #0
 800650c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006510:	682f      	ldr	r7, [r5, #0]
 8006512:	602b      	str	r3, [r5, #0]
 8006514:	d032      	beq.n	800657c <__sflush_r+0x98>
 8006516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	075a      	lsls	r2, r3, #29
 800651c:	d505      	bpl.n	800652a <__sflush_r+0x46>
 800651e:	6863      	ldr	r3, [r4, #4]
 8006520:	1ac0      	subs	r0, r0, r3
 8006522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006524:	b10b      	cbz	r3, 800652a <__sflush_r+0x46>
 8006526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006528:	1ac0      	subs	r0, r0, r3
 800652a:	2300      	movs	r3, #0
 800652c:	4602      	mov	r2, r0
 800652e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006530:	6a21      	ldr	r1, [r4, #32]
 8006532:	4628      	mov	r0, r5
 8006534:	47b0      	blx	r6
 8006536:	1c43      	adds	r3, r0, #1
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	d106      	bne.n	800654a <__sflush_r+0x66>
 800653c:	6829      	ldr	r1, [r5, #0]
 800653e:	291d      	cmp	r1, #29
 8006540:	d82c      	bhi.n	800659c <__sflush_r+0xb8>
 8006542:	4a2a      	ldr	r2, [pc, #168]	; (80065ec <__sflush_r+0x108>)
 8006544:	40ca      	lsrs	r2, r1
 8006546:	07d6      	lsls	r6, r2, #31
 8006548:	d528      	bpl.n	800659c <__sflush_r+0xb8>
 800654a:	2200      	movs	r2, #0
 800654c:	6062      	str	r2, [r4, #4]
 800654e:	04d9      	lsls	r1, r3, #19
 8006550:	6922      	ldr	r2, [r4, #16]
 8006552:	6022      	str	r2, [r4, #0]
 8006554:	d504      	bpl.n	8006560 <__sflush_r+0x7c>
 8006556:	1c42      	adds	r2, r0, #1
 8006558:	d101      	bne.n	800655e <__sflush_r+0x7a>
 800655a:	682b      	ldr	r3, [r5, #0]
 800655c:	b903      	cbnz	r3, 8006560 <__sflush_r+0x7c>
 800655e:	6560      	str	r0, [r4, #84]	; 0x54
 8006560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006562:	602f      	str	r7, [r5, #0]
 8006564:	2900      	cmp	r1, #0
 8006566:	d0ca      	beq.n	80064fe <__sflush_r+0x1a>
 8006568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800656c:	4299      	cmp	r1, r3
 800656e:	d002      	beq.n	8006576 <__sflush_r+0x92>
 8006570:	4628      	mov	r0, r5
 8006572:	f7fe fd15 	bl	8004fa0 <_free_r>
 8006576:	2000      	movs	r0, #0
 8006578:	6360      	str	r0, [r4, #52]	; 0x34
 800657a:	e7c1      	b.n	8006500 <__sflush_r+0x1c>
 800657c:	6a21      	ldr	r1, [r4, #32]
 800657e:	2301      	movs	r3, #1
 8006580:	4628      	mov	r0, r5
 8006582:	47b0      	blx	r6
 8006584:	1c41      	adds	r1, r0, #1
 8006586:	d1c7      	bne.n	8006518 <__sflush_r+0x34>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0c4      	beq.n	8006518 <__sflush_r+0x34>
 800658e:	2b1d      	cmp	r3, #29
 8006590:	d001      	beq.n	8006596 <__sflush_r+0xb2>
 8006592:	2b16      	cmp	r3, #22
 8006594:	d101      	bne.n	800659a <__sflush_r+0xb6>
 8006596:	602f      	str	r7, [r5, #0]
 8006598:	e7b1      	b.n	80064fe <__sflush_r+0x1a>
 800659a:	89a3      	ldrh	r3, [r4, #12]
 800659c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	e7ad      	b.n	8006500 <__sflush_r+0x1c>
 80065a4:	690f      	ldr	r7, [r1, #16]
 80065a6:	2f00      	cmp	r7, #0
 80065a8:	d0a9      	beq.n	80064fe <__sflush_r+0x1a>
 80065aa:	0793      	lsls	r3, r2, #30
 80065ac:	680e      	ldr	r6, [r1, #0]
 80065ae:	bf08      	it	eq
 80065b0:	694b      	ldreq	r3, [r1, #20]
 80065b2:	600f      	str	r7, [r1, #0]
 80065b4:	bf18      	it	ne
 80065b6:	2300      	movne	r3, #0
 80065b8:	eba6 0807 	sub.w	r8, r6, r7
 80065bc:	608b      	str	r3, [r1, #8]
 80065be:	f1b8 0f00 	cmp.w	r8, #0
 80065c2:	dd9c      	ble.n	80064fe <__sflush_r+0x1a>
 80065c4:	6a21      	ldr	r1, [r4, #32]
 80065c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065c8:	4643      	mov	r3, r8
 80065ca:	463a      	mov	r2, r7
 80065cc:	4628      	mov	r0, r5
 80065ce:	47b0      	blx	r6
 80065d0:	2800      	cmp	r0, #0
 80065d2:	dc06      	bgt.n	80065e2 <__sflush_r+0xfe>
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065da:	81a3      	strh	r3, [r4, #12]
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065e0:	e78e      	b.n	8006500 <__sflush_r+0x1c>
 80065e2:	4407      	add	r7, r0
 80065e4:	eba8 0800 	sub.w	r8, r8, r0
 80065e8:	e7e9      	b.n	80065be <__sflush_r+0xda>
 80065ea:	bf00      	nop
 80065ec:	20400001 	.word	0x20400001

080065f0 <_fflush_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	690b      	ldr	r3, [r1, #16]
 80065f4:	4605      	mov	r5, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	b913      	cbnz	r3, 8006600 <_fflush_r+0x10>
 80065fa:	2500      	movs	r5, #0
 80065fc:	4628      	mov	r0, r5
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	b118      	cbz	r0, 800660a <_fflush_r+0x1a>
 8006602:	6983      	ldr	r3, [r0, #24]
 8006604:	b90b      	cbnz	r3, 800660a <_fflush_r+0x1a>
 8006606:	f000 f887 	bl	8006718 <__sinit>
 800660a:	4b14      	ldr	r3, [pc, #80]	; (800665c <_fflush_r+0x6c>)
 800660c:	429c      	cmp	r4, r3
 800660e:	d11b      	bne.n	8006648 <_fflush_r+0x58>
 8006610:	686c      	ldr	r4, [r5, #4]
 8006612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0ef      	beq.n	80065fa <_fflush_r+0xa>
 800661a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800661c:	07d0      	lsls	r0, r2, #31
 800661e:	d404      	bmi.n	800662a <_fflush_r+0x3a>
 8006620:	0599      	lsls	r1, r3, #22
 8006622:	d402      	bmi.n	800662a <_fflush_r+0x3a>
 8006624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006626:	f000 f915 	bl	8006854 <__retarget_lock_acquire_recursive>
 800662a:	4628      	mov	r0, r5
 800662c:	4621      	mov	r1, r4
 800662e:	f7ff ff59 	bl	80064e4 <__sflush_r>
 8006632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006634:	07da      	lsls	r2, r3, #31
 8006636:	4605      	mov	r5, r0
 8006638:	d4e0      	bmi.n	80065fc <_fflush_r+0xc>
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	059b      	lsls	r3, r3, #22
 800663e:	d4dd      	bmi.n	80065fc <_fflush_r+0xc>
 8006640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006642:	f000 f908 	bl	8006856 <__retarget_lock_release_recursive>
 8006646:	e7d9      	b.n	80065fc <_fflush_r+0xc>
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <_fflush_r+0x70>)
 800664a:	429c      	cmp	r4, r3
 800664c:	d101      	bne.n	8006652 <_fflush_r+0x62>
 800664e:	68ac      	ldr	r4, [r5, #8]
 8006650:	e7df      	b.n	8006612 <_fflush_r+0x22>
 8006652:	4b04      	ldr	r3, [pc, #16]	; (8006664 <_fflush_r+0x74>)
 8006654:	429c      	cmp	r4, r3
 8006656:	bf08      	it	eq
 8006658:	68ec      	ldreq	r4, [r5, #12]
 800665a:	e7da      	b.n	8006612 <_fflush_r+0x22>
 800665c:	08006d5c 	.word	0x08006d5c
 8006660:	08006d7c 	.word	0x08006d7c
 8006664:	08006d3c 	.word	0x08006d3c

08006668 <std>:
 8006668:	2300      	movs	r3, #0
 800666a:	b510      	push	{r4, lr}
 800666c:	4604      	mov	r4, r0
 800666e:	e9c0 3300 	strd	r3, r3, [r0]
 8006672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006676:	6083      	str	r3, [r0, #8]
 8006678:	8181      	strh	r1, [r0, #12]
 800667a:	6643      	str	r3, [r0, #100]	; 0x64
 800667c:	81c2      	strh	r2, [r0, #14]
 800667e:	6183      	str	r3, [r0, #24]
 8006680:	4619      	mov	r1, r3
 8006682:	2208      	movs	r2, #8
 8006684:	305c      	adds	r0, #92	; 0x5c
 8006686:	f7fe fb29 	bl	8004cdc <memset>
 800668a:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <std+0x38>)
 800668c:	6263      	str	r3, [r4, #36]	; 0x24
 800668e:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <std+0x3c>)
 8006690:	62a3      	str	r3, [r4, #40]	; 0x28
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <std+0x40>)
 8006694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <std+0x44>)
 8006698:	6224      	str	r4, [r4, #32]
 800669a:	6323      	str	r3, [r4, #48]	; 0x30
 800669c:	bd10      	pop	{r4, pc}
 800669e:	bf00      	nop
 80066a0:	08004d85 	.word	0x08004d85
 80066a4:	08004dab 	.word	0x08004dab
 80066a8:	08004de3 	.word	0x08004de3
 80066ac:	08004e07 	.word	0x08004e07

080066b0 <_cleanup_r>:
 80066b0:	4901      	ldr	r1, [pc, #4]	; (80066b8 <_cleanup_r+0x8>)
 80066b2:	f000 b8af 	b.w	8006814 <_fwalk_reent>
 80066b6:	bf00      	nop
 80066b8:	080065f1 	.word	0x080065f1

080066bc <__sfmoreglue>:
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	2268      	movs	r2, #104	; 0x68
 80066c0:	1e4d      	subs	r5, r1, #1
 80066c2:	4355      	muls	r5, r2
 80066c4:	460e      	mov	r6, r1
 80066c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066ca:	f7fe fcd5 	bl	8005078 <_malloc_r>
 80066ce:	4604      	mov	r4, r0
 80066d0:	b140      	cbz	r0, 80066e4 <__sfmoreglue+0x28>
 80066d2:	2100      	movs	r1, #0
 80066d4:	e9c0 1600 	strd	r1, r6, [r0]
 80066d8:	300c      	adds	r0, #12
 80066da:	60a0      	str	r0, [r4, #8]
 80066dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066e0:	f7fe fafc 	bl	8004cdc <memset>
 80066e4:	4620      	mov	r0, r4
 80066e6:	bd70      	pop	{r4, r5, r6, pc}

080066e8 <__sfp_lock_acquire>:
 80066e8:	4801      	ldr	r0, [pc, #4]	; (80066f0 <__sfp_lock_acquire+0x8>)
 80066ea:	f000 b8b3 	b.w	8006854 <__retarget_lock_acquire_recursive>
 80066ee:	bf00      	nop
 80066f0:	2000012d 	.word	0x2000012d

080066f4 <__sfp_lock_release>:
 80066f4:	4801      	ldr	r0, [pc, #4]	; (80066fc <__sfp_lock_release+0x8>)
 80066f6:	f000 b8ae 	b.w	8006856 <__retarget_lock_release_recursive>
 80066fa:	bf00      	nop
 80066fc:	2000012d 	.word	0x2000012d

08006700 <__sinit_lock_acquire>:
 8006700:	4801      	ldr	r0, [pc, #4]	; (8006708 <__sinit_lock_acquire+0x8>)
 8006702:	f000 b8a7 	b.w	8006854 <__retarget_lock_acquire_recursive>
 8006706:	bf00      	nop
 8006708:	2000012e 	.word	0x2000012e

0800670c <__sinit_lock_release>:
 800670c:	4801      	ldr	r0, [pc, #4]	; (8006714 <__sinit_lock_release+0x8>)
 800670e:	f000 b8a2 	b.w	8006856 <__retarget_lock_release_recursive>
 8006712:	bf00      	nop
 8006714:	2000012e 	.word	0x2000012e

08006718 <__sinit>:
 8006718:	b510      	push	{r4, lr}
 800671a:	4604      	mov	r4, r0
 800671c:	f7ff fff0 	bl	8006700 <__sinit_lock_acquire>
 8006720:	69a3      	ldr	r3, [r4, #24]
 8006722:	b11b      	cbz	r3, 800672c <__sinit+0x14>
 8006724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006728:	f7ff bff0 	b.w	800670c <__sinit_lock_release>
 800672c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006730:	6523      	str	r3, [r4, #80]	; 0x50
 8006732:	4b13      	ldr	r3, [pc, #76]	; (8006780 <__sinit+0x68>)
 8006734:	4a13      	ldr	r2, [pc, #76]	; (8006784 <__sinit+0x6c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	62a2      	str	r2, [r4, #40]	; 0x28
 800673a:	42a3      	cmp	r3, r4
 800673c:	bf04      	itt	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	61a3      	streq	r3, [r4, #24]
 8006742:	4620      	mov	r0, r4
 8006744:	f000 f820 	bl	8006788 <__sfp>
 8006748:	6060      	str	r0, [r4, #4]
 800674a:	4620      	mov	r0, r4
 800674c:	f000 f81c 	bl	8006788 <__sfp>
 8006750:	60a0      	str	r0, [r4, #8]
 8006752:	4620      	mov	r0, r4
 8006754:	f000 f818 	bl	8006788 <__sfp>
 8006758:	2200      	movs	r2, #0
 800675a:	60e0      	str	r0, [r4, #12]
 800675c:	2104      	movs	r1, #4
 800675e:	6860      	ldr	r0, [r4, #4]
 8006760:	f7ff ff82 	bl	8006668 <std>
 8006764:	68a0      	ldr	r0, [r4, #8]
 8006766:	2201      	movs	r2, #1
 8006768:	2109      	movs	r1, #9
 800676a:	f7ff ff7d 	bl	8006668 <std>
 800676e:	68e0      	ldr	r0, [r4, #12]
 8006770:	2202      	movs	r2, #2
 8006772:	2112      	movs	r1, #18
 8006774:	f7ff ff78 	bl	8006668 <std>
 8006778:	2301      	movs	r3, #1
 800677a:	61a3      	str	r3, [r4, #24]
 800677c:	e7d2      	b.n	8006724 <__sinit+0xc>
 800677e:	bf00      	nop
 8006780:	08006b38 	.word	0x08006b38
 8006784:	080066b1 	.word	0x080066b1

08006788 <__sfp>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	4607      	mov	r7, r0
 800678c:	f7ff ffac 	bl	80066e8 <__sfp_lock_acquire>
 8006790:	4b1e      	ldr	r3, [pc, #120]	; (800680c <__sfp+0x84>)
 8006792:	681e      	ldr	r6, [r3, #0]
 8006794:	69b3      	ldr	r3, [r6, #24]
 8006796:	b913      	cbnz	r3, 800679e <__sfp+0x16>
 8006798:	4630      	mov	r0, r6
 800679a:	f7ff ffbd 	bl	8006718 <__sinit>
 800679e:	3648      	adds	r6, #72	; 0x48
 80067a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	d503      	bpl.n	80067b0 <__sfp+0x28>
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	b30b      	cbz	r3, 80067f0 <__sfp+0x68>
 80067ac:	6836      	ldr	r6, [r6, #0]
 80067ae:	e7f7      	b.n	80067a0 <__sfp+0x18>
 80067b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067b4:	b9d5      	cbnz	r5, 80067ec <__sfp+0x64>
 80067b6:	4b16      	ldr	r3, [pc, #88]	; (8006810 <__sfp+0x88>)
 80067b8:	60e3      	str	r3, [r4, #12]
 80067ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067be:	6665      	str	r5, [r4, #100]	; 0x64
 80067c0:	f000 f847 	bl	8006852 <__retarget_lock_init_recursive>
 80067c4:	f7ff ff96 	bl	80066f4 <__sfp_lock_release>
 80067c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067d0:	6025      	str	r5, [r4, #0]
 80067d2:	61a5      	str	r5, [r4, #24]
 80067d4:	2208      	movs	r2, #8
 80067d6:	4629      	mov	r1, r5
 80067d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067dc:	f7fe fa7e 	bl	8004cdc <memset>
 80067e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067e8:	4620      	mov	r0, r4
 80067ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ec:	3468      	adds	r4, #104	; 0x68
 80067ee:	e7d9      	b.n	80067a4 <__sfp+0x1c>
 80067f0:	2104      	movs	r1, #4
 80067f2:	4638      	mov	r0, r7
 80067f4:	f7ff ff62 	bl	80066bc <__sfmoreglue>
 80067f8:	4604      	mov	r4, r0
 80067fa:	6030      	str	r0, [r6, #0]
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d1d5      	bne.n	80067ac <__sfp+0x24>
 8006800:	f7ff ff78 	bl	80066f4 <__sfp_lock_release>
 8006804:	230c      	movs	r3, #12
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	e7ee      	b.n	80067e8 <__sfp+0x60>
 800680a:	bf00      	nop
 800680c:	08006b38 	.word	0x08006b38
 8006810:	ffff0001 	.word	0xffff0001

08006814 <_fwalk_reent>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	4606      	mov	r6, r0
 800681a:	4688      	mov	r8, r1
 800681c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006820:	2700      	movs	r7, #0
 8006822:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006826:	f1b9 0901 	subs.w	r9, r9, #1
 800682a:	d505      	bpl.n	8006838 <_fwalk_reent+0x24>
 800682c:	6824      	ldr	r4, [r4, #0]
 800682e:	2c00      	cmp	r4, #0
 8006830:	d1f7      	bne.n	8006822 <_fwalk_reent+0xe>
 8006832:	4638      	mov	r0, r7
 8006834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006838:	89ab      	ldrh	r3, [r5, #12]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d907      	bls.n	800684e <_fwalk_reent+0x3a>
 800683e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006842:	3301      	adds	r3, #1
 8006844:	d003      	beq.n	800684e <_fwalk_reent+0x3a>
 8006846:	4629      	mov	r1, r5
 8006848:	4630      	mov	r0, r6
 800684a:	47c0      	blx	r8
 800684c:	4307      	orrs	r7, r0
 800684e:	3568      	adds	r5, #104	; 0x68
 8006850:	e7e9      	b.n	8006826 <_fwalk_reent+0x12>

08006852 <__retarget_lock_init_recursive>:
 8006852:	4770      	bx	lr

08006854 <__retarget_lock_acquire_recursive>:
 8006854:	4770      	bx	lr

08006856 <__retarget_lock_release_recursive>:
 8006856:	4770      	bx	lr

08006858 <__swhatbuf_r>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	460e      	mov	r6, r1
 800685c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006860:	2900      	cmp	r1, #0
 8006862:	b096      	sub	sp, #88	; 0x58
 8006864:	4614      	mov	r4, r2
 8006866:	461d      	mov	r5, r3
 8006868:	da08      	bge.n	800687c <__swhatbuf_r+0x24>
 800686a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	602a      	str	r2, [r5, #0]
 8006872:	061a      	lsls	r2, r3, #24
 8006874:	d410      	bmi.n	8006898 <__swhatbuf_r+0x40>
 8006876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800687a:	e00e      	b.n	800689a <__swhatbuf_r+0x42>
 800687c:	466a      	mov	r2, sp
 800687e:	f000 f8f9 	bl	8006a74 <_fstat_r>
 8006882:	2800      	cmp	r0, #0
 8006884:	dbf1      	blt.n	800686a <__swhatbuf_r+0x12>
 8006886:	9a01      	ldr	r2, [sp, #4]
 8006888:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800688c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006890:	425a      	negs	r2, r3
 8006892:	415a      	adcs	r2, r3
 8006894:	602a      	str	r2, [r5, #0]
 8006896:	e7ee      	b.n	8006876 <__swhatbuf_r+0x1e>
 8006898:	2340      	movs	r3, #64	; 0x40
 800689a:	2000      	movs	r0, #0
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	b016      	add	sp, #88	; 0x58
 80068a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080068a4 <__smakebuf_r>:
 80068a4:	898b      	ldrh	r3, [r1, #12]
 80068a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068a8:	079d      	lsls	r5, r3, #30
 80068aa:	4606      	mov	r6, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	d507      	bpl.n	80068c0 <__smakebuf_r+0x1c>
 80068b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	6123      	str	r3, [r4, #16]
 80068b8:	2301      	movs	r3, #1
 80068ba:	6163      	str	r3, [r4, #20]
 80068bc:	b002      	add	sp, #8
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	ab01      	add	r3, sp, #4
 80068c2:	466a      	mov	r2, sp
 80068c4:	f7ff ffc8 	bl	8006858 <__swhatbuf_r>
 80068c8:	9900      	ldr	r1, [sp, #0]
 80068ca:	4605      	mov	r5, r0
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7fe fbd3 	bl	8005078 <_malloc_r>
 80068d2:	b948      	cbnz	r0, 80068e8 <__smakebuf_r+0x44>
 80068d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d8:	059a      	lsls	r2, r3, #22
 80068da:	d4ef      	bmi.n	80068bc <__smakebuf_r+0x18>
 80068dc:	f023 0303 	bic.w	r3, r3, #3
 80068e0:	f043 0302 	orr.w	r3, r3, #2
 80068e4:	81a3      	strh	r3, [r4, #12]
 80068e6:	e7e3      	b.n	80068b0 <__smakebuf_r+0xc>
 80068e8:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <__smakebuf_r+0x7c>)
 80068ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	6020      	str	r0, [r4, #0]
 80068f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	9b00      	ldr	r3, [sp, #0]
 80068f8:	6163      	str	r3, [r4, #20]
 80068fa:	9b01      	ldr	r3, [sp, #4]
 80068fc:	6120      	str	r0, [r4, #16]
 80068fe:	b15b      	cbz	r3, 8006918 <__smakebuf_r+0x74>
 8006900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006904:	4630      	mov	r0, r6
 8006906:	f000 f8c7 	bl	8006a98 <_isatty_r>
 800690a:	b128      	cbz	r0, 8006918 <__smakebuf_r+0x74>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	89a0      	ldrh	r0, [r4, #12]
 800691a:	4305      	orrs	r5, r0
 800691c:	81a5      	strh	r5, [r4, #12]
 800691e:	e7cd      	b.n	80068bc <__smakebuf_r+0x18>
 8006920:	080066b1 	.word	0x080066b1

08006924 <memcpy>:
 8006924:	440a      	add	r2, r1
 8006926:	4291      	cmp	r1, r2
 8006928:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800692c:	d100      	bne.n	8006930 <memcpy+0xc>
 800692e:	4770      	bx	lr
 8006930:	b510      	push	{r4, lr}
 8006932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800693a:	4291      	cmp	r1, r2
 800693c:	d1f9      	bne.n	8006932 <memcpy+0xe>
 800693e:	bd10      	pop	{r4, pc}

08006940 <memmove>:
 8006940:	4288      	cmp	r0, r1
 8006942:	b510      	push	{r4, lr}
 8006944:	eb01 0402 	add.w	r4, r1, r2
 8006948:	d902      	bls.n	8006950 <memmove+0x10>
 800694a:	4284      	cmp	r4, r0
 800694c:	4623      	mov	r3, r4
 800694e:	d807      	bhi.n	8006960 <memmove+0x20>
 8006950:	1e43      	subs	r3, r0, #1
 8006952:	42a1      	cmp	r1, r4
 8006954:	d008      	beq.n	8006968 <memmove+0x28>
 8006956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800695a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800695e:	e7f8      	b.n	8006952 <memmove+0x12>
 8006960:	4402      	add	r2, r0
 8006962:	4601      	mov	r1, r0
 8006964:	428a      	cmp	r2, r1
 8006966:	d100      	bne.n	800696a <memmove+0x2a>
 8006968:	bd10      	pop	{r4, pc}
 800696a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800696e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006972:	e7f7      	b.n	8006964 <memmove+0x24>

08006974 <__malloc_lock>:
 8006974:	4801      	ldr	r0, [pc, #4]	; (800697c <__malloc_lock+0x8>)
 8006976:	f7ff bf6d 	b.w	8006854 <__retarget_lock_acquire_recursive>
 800697a:	bf00      	nop
 800697c:	2000012c 	.word	0x2000012c

08006980 <__malloc_unlock>:
 8006980:	4801      	ldr	r0, [pc, #4]	; (8006988 <__malloc_unlock+0x8>)
 8006982:	f7ff bf68 	b.w	8006856 <__retarget_lock_release_recursive>
 8006986:	bf00      	nop
 8006988:	2000012c 	.word	0x2000012c

0800698c <_realloc_r>:
 800698c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006990:	4680      	mov	r8, r0
 8006992:	4614      	mov	r4, r2
 8006994:	460e      	mov	r6, r1
 8006996:	b921      	cbnz	r1, 80069a2 <_realloc_r+0x16>
 8006998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800699c:	4611      	mov	r1, r2
 800699e:	f7fe bb6b 	b.w	8005078 <_malloc_r>
 80069a2:	b92a      	cbnz	r2, 80069b0 <_realloc_r+0x24>
 80069a4:	f7fe fafc 	bl	8004fa0 <_free_r>
 80069a8:	4625      	mov	r5, r4
 80069aa:	4628      	mov	r0, r5
 80069ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b0:	f000 f882 	bl	8006ab8 <_malloc_usable_size_r>
 80069b4:	4284      	cmp	r4, r0
 80069b6:	4607      	mov	r7, r0
 80069b8:	d802      	bhi.n	80069c0 <_realloc_r+0x34>
 80069ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069be:	d812      	bhi.n	80069e6 <_realloc_r+0x5a>
 80069c0:	4621      	mov	r1, r4
 80069c2:	4640      	mov	r0, r8
 80069c4:	f7fe fb58 	bl	8005078 <_malloc_r>
 80069c8:	4605      	mov	r5, r0
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d0ed      	beq.n	80069aa <_realloc_r+0x1e>
 80069ce:	42bc      	cmp	r4, r7
 80069d0:	4622      	mov	r2, r4
 80069d2:	4631      	mov	r1, r6
 80069d4:	bf28      	it	cs
 80069d6:	463a      	movcs	r2, r7
 80069d8:	f7ff ffa4 	bl	8006924 <memcpy>
 80069dc:	4631      	mov	r1, r6
 80069de:	4640      	mov	r0, r8
 80069e0:	f7fe fade 	bl	8004fa0 <_free_r>
 80069e4:	e7e1      	b.n	80069aa <_realloc_r+0x1e>
 80069e6:	4635      	mov	r5, r6
 80069e8:	e7df      	b.n	80069aa <_realloc_r+0x1e>

080069ea <_raise_r>:
 80069ea:	291f      	cmp	r1, #31
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4604      	mov	r4, r0
 80069f0:	460d      	mov	r5, r1
 80069f2:	d904      	bls.n	80069fe <_raise_r+0x14>
 80069f4:	2316      	movs	r3, #22
 80069f6:	6003      	str	r3, [r0, #0]
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a00:	b112      	cbz	r2, 8006a08 <_raise_r+0x1e>
 8006a02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a06:	b94b      	cbnz	r3, 8006a1c <_raise_r+0x32>
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 f831 	bl	8006a70 <_getpid_r>
 8006a0e:	462a      	mov	r2, r5
 8006a10:	4601      	mov	r1, r0
 8006a12:	4620      	mov	r0, r4
 8006a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a18:	f000 b818 	b.w	8006a4c <_kill_r>
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d00a      	beq.n	8006a36 <_raise_r+0x4c>
 8006a20:	1c59      	adds	r1, r3, #1
 8006a22:	d103      	bne.n	8006a2c <_raise_r+0x42>
 8006a24:	2316      	movs	r3, #22
 8006a26:	6003      	str	r3, [r0, #0]
 8006a28:	2001      	movs	r0, #1
 8006a2a:	e7e7      	b.n	80069fc <_raise_r+0x12>
 8006a2c:	2400      	movs	r4, #0
 8006a2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a32:	4628      	mov	r0, r5
 8006a34:	4798      	blx	r3
 8006a36:	2000      	movs	r0, #0
 8006a38:	e7e0      	b.n	80069fc <_raise_r+0x12>
	...

08006a3c <raise>:
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <raise+0xc>)
 8006a3e:	4601      	mov	r1, r0
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	f7ff bfd2 	b.w	80069ea <_raise_r>
 8006a46:	bf00      	nop
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <_kill_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d07      	ldr	r5, [pc, #28]	; (8006a6c <_kill_r+0x20>)
 8006a50:	2300      	movs	r3, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	4611      	mov	r1, r2
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	f7fa ff23 	bl	80018a4 <_kill>
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	d102      	bne.n	8006a68 <_kill_r+0x1c>
 8006a62:	682b      	ldr	r3, [r5, #0]
 8006a64:	b103      	cbz	r3, 8006a68 <_kill_r+0x1c>
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	bd38      	pop	{r3, r4, r5, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000128 	.word	0x20000128

08006a70 <_getpid_r>:
 8006a70:	f7fa bf10 	b.w	8001894 <_getpid>

08006a74 <_fstat_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d07      	ldr	r5, [pc, #28]	; (8006a94 <_fstat_r+0x20>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	4611      	mov	r1, r2
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	f7fa ff6e 	bl	8001962 <_fstat>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d102      	bne.n	8006a90 <_fstat_r+0x1c>
 8006a8a:	682b      	ldr	r3, [r5, #0]
 8006a8c:	b103      	cbz	r3, 8006a90 <_fstat_r+0x1c>
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	bd38      	pop	{r3, r4, r5, pc}
 8006a92:	bf00      	nop
 8006a94:	20000128 	.word	0x20000128

08006a98 <_isatty_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d06      	ldr	r5, [pc, #24]	; (8006ab4 <_isatty_r+0x1c>)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	f7fa ff6d 	bl	8001982 <_isatty>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_isatty_r+0x1a>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_isatty_r+0x1a>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20000128 	.word	0x20000128

08006ab8 <_malloc_usable_size_r>:
 8006ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006abc:	1f18      	subs	r0, r3, #4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	bfbc      	itt	lt
 8006ac2:	580b      	ldrlt	r3, [r1, r0]
 8006ac4:	18c0      	addlt	r0, r0, r3
 8006ac6:	4770      	bx	lr

08006ac8 <_init>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr

08006ad4 <_fini>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	bf00      	nop
 8006ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ada:	bc08      	pop	{r3}
 8006adc:	469e      	mov	lr, r3
 8006ade:	4770      	bx	lr
